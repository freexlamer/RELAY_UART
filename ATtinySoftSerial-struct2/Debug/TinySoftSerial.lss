
TinySoftSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000070c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000780  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000087  00800060  00800060  00000780  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000780  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000007ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ed9  00000000  00000000  0000087c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000080f  00000000  00000000  00001755  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006d7  00000000  00000000  00001f64  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  0000263c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000531  00000000  00000000  000027d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006cc  00000000  00000000  00002d01  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  000033cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	5e c0       	rjmp	.+188    	; 0xbe <__ctors_end>
   2:	78 c0       	rjmp	.+240    	; 0xf4 <__bad_interrupt>
   4:	9d c1       	rjmp	.+826    	; 0x340 <__vector_2>
   6:	76 c0       	rjmp	.+236    	; 0xf4 <__bad_interrupt>
   8:	75 c0       	rjmp	.+234    	; 0xf4 <__bad_interrupt>
   a:	74 c0       	rjmp	.+232    	; 0xf4 <__bad_interrupt>
   c:	73 c0       	rjmp	.+230    	; 0xf4 <__bad_interrupt>
   e:	72 c0       	rjmp	.+228    	; 0xf4 <__bad_interrupt>
  10:	71 c0       	rjmp	.+226    	; 0xf4 <__bad_interrupt>
  12:	d0 c1       	rjmp	.+928    	; 0x3b4 <__vector_9>
  14:	6f c0       	rjmp	.+222    	; 0xf4 <__bad_interrupt>
  16:	6e c0       	rjmp	.+220    	; 0xf4 <__bad_interrupt>
  18:	6d c0       	rjmp	.+218    	; 0xf4 <__bad_interrupt>
  1a:	6c c0       	rjmp	.+216    	; 0xf4 <__bad_interrupt>
  1c:	6b c0       	rjmp	.+214    	; 0xf4 <__bad_interrupt>
  1e:	6a c0       	rjmp	.+212    	; 0xf4 <__bad_interrupt>
  20:	69 c0       	rjmp	.+210    	; 0xf4 <__bad_interrupt>

00000022 <__trampolines_end>:
  22:	00 c2       	rjmp	.+1024   	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
  24:	01 00       	.word	0x0001	; ????
  26:	01 00       	.word	0x0001	; ????
  28:	05 00       	.word	0x0005	; ????
  2a:	05 00       	.word	0x0005	; ????
  2c:	03 00       	.word	0x0003	; ????
  2e:	00 e1       	ldi	r16, 0x10	; 16
  30:	00 00       	nop
  32:	01 00       	.word	0x0001	; ????
  34:	0f 00       	.word	0x000f	; ????
  36:	0f 00       	.word	0x000f	; ????
  38:	0d 00       	.word	0x000d	; ????
  3a:	00 96       	adiw	r24, 0x00	; 0
  3c:	00 00       	nop
  3e:	02 00       	.word	0x0002	; ????
  40:	19 00       	.word	0x0019	; ????
  42:	1a 00       	.word	0x001a	; ????
  44:	17 00       	.word	0x0017	; ????
  46:	12 7a       	andi	r17, 0xA2	; 162
  48:	00 00       	nop
  4a:	07 00       	.word	0x0007	; ????
  4c:	20 00       	.word	0x0020	; ????
  4e:	21 00       	.word	0x0021	; ????
  50:	1d 00       	.word	0x001d	; ????
  52:	80 70       	andi	r24, 0x00	; 0
  54:	00 00       	nop
  56:	0b 00       	.word	0x000b	; ????
  58:	23 00       	.word	0x0023	; ????
  5a:	23 00       	.word	0x0023	; ????
  5c:	20 00       	.word	0x0020	; ????
  5e:	00 4b       	sbci	r16, 0xB0	; 176
  60:	00 00       	nop
  62:	14 00       	.word	0x0014	; ????
  64:	37 00       	.word	0x0037	; ????
  66:	37 00       	.word	0x0037	; ????
  68:	34 00       	.word	0x0034	; ????
  6a:	40 38       	cpi	r20, 0x80	; 128
  6c:	00 00       	nop
  6e:	1e 00       	.word	0x001e	; ????
  70:	4b 00       	.word	0x004b	; ????
  72:	4b 00       	.word	0x004b	; ????
  74:	48 00       	.word	0x0048	; ????
  76:	80 25       	eor	r24, r0
  78:	00 00       	nop
  7a:	32 00       	.word	0x0032	; ????
  7c:	72 00       	.word	0x0072	; ????
  7e:	72 00       	.word	0x0072	; ????
  80:	70 00       	.word	0x0070	; ????
  82:	c0 12       	cpse	r12, r16
  84:	00 00       	nop
  86:	6e 00       	.word	0x006e	; ????
  88:	e9 00       	.word	0x00e9	; ????
  8a:	e9 00       	.word	0x00e9	; ????
  8c:	e6 00       	.word	0x00e6	; ????
  8e:	60 09       	sbc	r22, r0
  90:	00 00       	nop
  92:	e5 00       	.word	0x00e5	; ????
  94:	d8 01       	movw	r26, r16
  96:	d8 01       	movw	r26, r16
  98:	d5 01       	movw	r26, r10
  9a:	b0 04       	cpc	r11, r0
  9c:	00 00       	nop
  9e:	d3 01       	movw	r26, r6
  a0:	b4 03       	fmuls	r19, r20
  a2:	b4 03       	fmuls	r19, r20
  a4:	b1 03       	fmuls	r19, r17
  a6:	58 02       	muls	r21, r24
  a8:	00 00       	nop
  aa:	b4 03       	fmuls	r19, r20
  ac:	67 07       	cpc	r22, r23
  ae:	67 07       	cpc	r22, r23
  b0:	62 07       	cpc	r22, r18
  b2:	2c 01       	movw	r4, r24
  b4:	00 00       	nop
  b6:	67 07       	cpc	r22, r23
  b8:	dd 0e       	add	r13, r29
  ba:	dd 0e       	add	r13, r29
  bc:	da 0e       	add	r13, r26

000000be <__ctors_end>:
  be:	11 24       	eor	r1, r1
  c0:	1f be       	out	0x3f, r1	; 63
  c2:	cf e5       	ldi	r28, 0x5F	; 95
  c4:	d2 e0       	ldi	r29, 0x02	; 2
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	cd bf       	out	0x3d, r28	; 61

000000ca <__do_copy_data>:
  ca:	10 e0       	ldi	r17, 0x00	; 0
  cc:	a0 e6       	ldi	r26, 0x60	; 96
  ce:	b0 e0       	ldi	r27, 0x00	; 0
  d0:	ec e0       	ldi	r30, 0x0C	; 12
  d2:	f7 e0       	ldi	r31, 0x07	; 7
  d4:	02 c0       	rjmp	.+4      	; 0xda <__do_copy_data+0x10>
  d6:	05 90       	lpm	r0, Z+
  d8:	0d 92       	st	X+, r0
  da:	a0 36       	cpi	r26, 0x60	; 96
  dc:	b1 07       	cpc	r27, r17
  de:	d9 f7       	brne	.-10     	; 0xd6 <__do_copy_data+0xc>

000000e0 <__do_clear_bss>:
  e0:	20 e0       	ldi	r18, 0x00	; 0
  e2:	a0 e6       	ldi	r26, 0x60	; 96
  e4:	b0 e0       	ldi	r27, 0x00	; 0
  e6:	01 c0       	rjmp	.+2      	; 0xea <.do_clear_bss_start>

000000e8 <.do_clear_bss_loop>:
  e8:	1d 92       	st	X+, r1

000000ea <.do_clear_bss_start>:
  ea:	a7 3e       	cpi	r26, 0xE7	; 231
  ec:	b2 07       	cpc	r27, r18
  ee:	e1 f7       	brne	.-8      	; 0xe8 <.do_clear_bss_loop>
  f0:	02 d0       	rcall	.+4      	; 0xf6 <main>
  f2:	0a c3       	rjmp	.+1556   	; 0x708 <_exit>

000000f4 <__bad_interrupt>:
  f4:	85 cf       	rjmp	.-246    	; 0x0 <__vectors>

000000f6 <main>:




int main()
{
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	cd b7       	in	r28, 0x3d	; 61
  fc:	de b7       	in	r29, 0x3e	; 62
  fe:	c0 5a       	subi	r28, 0xA0	; 160
 100:	d1 09       	sbc	r29, r1
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	f8 94       	cli
 106:	de bf       	out	0x3e, r29	; 62
 108:	0f be       	out	0x3f, r0	; 63
 10a:	cd bf       	out	0x3d, r28	; 61
	// Clock value: 125,000 kHz
	// Mode: CTC top=OCR0A
	// OC0A output: Disconnected
	// OC0B output: Disconnected
	// Timer Period: 1 ms
	TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (1<<WGM01) | (0<<WGM00);
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	80 bf       	out	0x30, r24	; 48
	TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
 110:	13 be       	out	0x33, r1	; 51
	//TCCR0B=(0<<WGM02) | (0<<CS02) | (1<<CS01) | (1<<CS00);
	TCNT0=0x00;
 112:	12 be       	out	0x32, r1	; 50
	OCR0A=0x7C;
 114:	9c e7       	ldi	r25, 0x7C	; 124
 116:	96 bf       	out	0x36, r25	; 54
	OCR0B=0x00;
 118:	1c be       	out	0x3c, r1	; 60
	// Timer/Counter 0 Interrupt(s) initialization
	TIMSK0=(0<<OCIE0B) | (1<<OCIE0A) | (0<<TOIE0);
 11a:	89 bf       	out	0x39, r24	; 57
	
	Uart serial0 = {9600,&DDRA,&PORTA,&PINA,PA5,PA1};
 11c:	fe 01       	movw	r30, r28
 11e:	e7 58       	subi	r30, 0x87	; 135
 120:	ff 4f       	sbci	r31, 0xFF	; 255
 122:	18 e2       	ldi	r17, 0x28	; 40
 124:	df 01       	movw	r26, r30
 126:	81 2f       	mov	r24, r17
 128:	1d 92       	st	X+, r1
 12a:	8a 95       	dec	r24
 12c:	e9 f7       	brne	.-6      	; 0x128 <main+0x32>
 12e:	0f 2e       	mov	r0, r31
 130:	f0 e8       	ldi	r31, 0x80	; 128
 132:	8f 2e       	mov	r8, r31
 134:	f5 e2       	ldi	r31, 0x25	; 37
 136:	9f 2e       	mov	r9, r31
 138:	a1 2c       	mov	r10, r1
 13a:	b1 2c       	mov	r11, r1
 13c:	f0 2d       	mov	r31, r0
 13e:	80 82       	st	Z, r8
 140:	91 82       	std	Z+1, r9	; 0x01
 142:	a2 82       	std	Z+2, r10	; 0x02
 144:	b3 82       	std	Z+3, r11	; 0x03
 146:	6a e3       	ldi	r22, 0x3A	; 58
 148:	70 e0       	ldi	r23, 0x00	; 0
 14a:	75 83       	std	Z+5, r23	; 0x05
 14c:	64 83       	std	Z+4, r22	; 0x04
 14e:	4b e3       	ldi	r20, 0x3B	; 59
 150:	50 e0       	ldi	r21, 0x00	; 0
 152:	57 83       	std	Z+7, r21	; 0x07
 154:	46 83       	std	Z+6, r20	; 0x06
 156:	29 e3       	ldi	r18, 0x39	; 57
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	31 87       	std	Z+9, r19	; 0x09
 15c:	20 87       	std	Z+8, r18	; 0x08
 15e:	85 e0       	ldi	r24, 0x05	; 5
 160:	82 87       	std	Z+10, r24	; 0x0a
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	83 87       	std	Z+11, r24	; 0x0b
 166:	08 e2       	ldi	r16, 0x28	; 40
 168:	ce 01       	movw	r24, r28
 16a:	01 96       	adiw	r24, 0x01	; 1
 16c:	dc 01       	movw	r26, r24
 16e:	01 90       	ld	r0, Z+
 170:	0d 92       	st	X+, r0
 172:	0a 95       	dec	r16
 174:	e1 f7       	brne	.-8      	; 0x16e <main+0x78>
	Uart serial1 = {9600,&DDRA,&PORTA,&PINA,PA4,PA0};
 176:	fe 01       	movw	r30, r28
 178:	ef 5a       	subi	r30, 0xAF	; 175
 17a:	ff 4f       	sbci	r31, 0xFF	; 255
 17c:	df 01       	movw	r26, r30
 17e:	1d 92       	st	X+, r1
 180:	1a 95       	dec	r17
 182:	e9 f7       	brne	.-6      	; 0x17e <main+0x88>
 184:	80 82       	st	Z, r8
 186:	91 82       	std	Z+1, r9	; 0x01
 188:	a2 82       	std	Z+2, r10	; 0x02
 18a:	b3 82       	std	Z+3, r11	; 0x03
 18c:	75 83       	std	Z+5, r23	; 0x05
 18e:	64 83       	std	Z+4, r22	; 0x04
 190:	57 83       	std	Z+7, r21	; 0x07
 192:	46 83       	std	Z+6, r20	; 0x06
 194:	31 87       	std	Z+9, r19	; 0x09
 196:	20 87       	std	Z+8, r18	; 0x08
 198:	24 e0       	ldi	r18, 0x04	; 4
 19a:	22 87       	std	Z+10, r18	; 0x0a
 19c:	28 e2       	ldi	r18, 0x28	; 40
 19e:	de 01       	movw	r26, r28
 1a0:	99 96       	adiw	r26, 0x29	; 41
 1a2:	01 90       	ld	r0, Z+
 1a4:	0d 92       	st	X+, r0
 1a6:	2a 95       	dec	r18
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <main+0xac>
	seial_0 = &serial0;
 1aa:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <seial_0+0x1>
 1ae:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <seial_0>
	seial_1 = &serial1;
 1b2:	88 96       	adiw	r24, 0x28	; 40
 1b4:	90 93 e5 00 	sts	0x00E5, r25	; 0x8000e5 <seial_1+0x1>
 1b8:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <seial_1>
	softSerialBegin(seial_1);
 1bc:	12 d1       	rcall	.+548    	; 0x3e2 <softSerialBegin>
	softSerialBegin(seial_0);
 1be:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <seial_0>
 1c2:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <seial_0+0x1>
 1c6:	0d d1       	rcall	.+538    	; 0x3e2 <softSerialBegin>
	DDRB=0xff;
 1c8:	8f ef       	ldi	r24, 0xFF	; 255
 1ca:	87 bb       	out	0x17, r24	; 23
	
	
	

	while (1) {
	   if (softSerialAvailable(seial_0)) {
 1cc:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <seial_0>
 1d0:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <seial_0+0x1>
 1d4:	00 d2       	rcall	.+1024   	; 0x5d6 <softSerialAvailable>
 1d6:	89 2b       	or	r24, r25
 1d8:	59 f0       	breq	.+22     	; 0x1f0 <main+0xfa>
			softSerialWrite( softSerialRead(seial_0),seial_1 );
 1da:	00 91 e4 00 	lds	r16, 0x00E4	; 0x8000e4 <seial_1>
 1de:	10 91 e5 00 	lds	r17, 0x00E5	; 0x8000e5 <seial_1+0x1>
 1e2:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <seial_0>
 1e6:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <seial_0+0x1>
 1ea:	e1 d1       	rcall	.+962    	; 0x5ae <softSerialRead>
 1ec:	b8 01       	movw	r22, r16
 1ee:	fe d1       	rcall	.+1020   	; 0x5ec <softSerialWrite>
		}
		
		if (softSerialAvailable(seial_1)) {
 1f0:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <seial_1>
 1f4:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <seial_1+0x1>
 1f8:	ee d1       	rcall	.+988    	; 0x5d6 <softSerialAvailable>
 1fa:	89 2b       	or	r24, r25
 1fc:	59 f0       	breq	.+22     	; 0x214 <main+0x11e>
			softSerialWrite( softSerialRead(seial_1),seial_0);
 1fe:	00 91 a0 00 	lds	r16, 0x00A0	; 0x8000a0 <seial_0>
 202:	10 91 a1 00 	lds	r17, 0x00A1	; 0x8000a1 <seial_0+0x1>
 206:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <seial_1>
 20a:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <seial_1+0x1>
 20e:	cf d1       	rcall	.+926    	; 0x5ae <softSerialRead>
 210:	b8 01       	movw	r22, r16
 212:	ec d1       	rcall	.+984    	; 0x5ec <softSerialWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 214:	8f ec       	ldi	r24, 0xCF	; 207
 216:	97 e0       	ldi	r25, 0x07	; 7
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <main+0x122>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <main+0x128>
 21e:	00 00       	nop
 220:	d5 cf       	rjmp	.-86     	; 0x1cc <main+0xd6>

00000222 <handler>:

bool softSerialOverflow(Uart *p) {
	bool ret = p->_buffer_overflow;
	p->_buffer_overflow = false;
	return ret;
}
 222:	dc 01       	movw	r26, r24
 224:	18 96       	adiw	r26, 0x08	; 8
 226:	ed 91       	ld	r30, X+
 228:	fc 91       	ld	r31, X
 22a:	19 97       	sbiw	r26, 0x09	; 9
 22c:	1a 96       	adiw	r26, 0x0a	; 10
 22e:	2c 91       	ld	r18, X
 230:	1a 97       	sbiw	r26, 0x0a	; 10
 232:	80 81       	ld	r24, Z
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	02 c0       	rjmp	.+4      	; 0x23c <handler+0x1a>
 238:	95 95       	asr	r25
 23a:	87 95       	ror	r24
 23c:	2a 95       	dec	r18
 23e:	e2 f7       	brpl	.-8      	; 0x238 <handler+0x16>
 240:	80 fd       	sbrc	r24, 0
 242:	7d c0       	rjmp	.+250    	; 0x33e <__stack+0xdf>
 244:	92 96       	adiw	r26, 0x22	; 34
 246:	8d 91       	ld	r24, X+
 248:	9c 91       	ld	r25, X
 24a:	93 97       	sbiw	r26, 0x23	; 35
 24c:	20 e0       	ldi	r18, 0x00	; 0
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	2f ef       	ldi	r18, 0xFF	; 255
 252:	8f 3f       	cpi	r24, 0xFF	; 255
 254:	92 07       	cpc	r25, r18
 256:	d9 f7       	brne	.-10     	; 0x24e <handler+0x2c>
 258:	91 e0       	ldi	r25, 0x01	; 1
 25a:	40 e0       	ldi	r20, 0x00	; 0
 25c:	50 e0       	ldi	r21, 0x00	; 0
 25e:	61 e0       	ldi	r22, 0x01	; 1
 260:	73 e0       	ldi	r23, 0x03	; 3
 262:	99 30       	cpi	r25, 0x09	; 9
 264:	20 f5       	brcc	.+72     	; 0x2ae <__stack+0x4f>
 266:	90 96       	adiw	r26, 0x20	; 32
 268:	ed 91       	ld	r30, X+
 26a:	fc 91       	ld	r31, X
 26c:	91 97       	sbiw	r26, 0x21	; 33
 26e:	35 97       	sbiw	r30, 0x05	; 5
 270:	25 2f       	mov	r18, r21
 272:	31 97       	sbiw	r30, 0x01	; 1
 274:	2f ef       	ldi	r18, 0xFF	; 255
 276:	ef 3f       	cpi	r30, 0xFF	; 255
 278:	f2 07       	cpc	r31, r18
 27a:	d9 f7       	brne	.-10     	; 0x272 <__stack+0x13>
 27c:	18 96       	adiw	r26, 0x08	; 8
 27e:	ed 91       	ld	r30, X+
 280:	fc 91       	ld	r31, X
 282:	19 97       	sbiw	r26, 0x09	; 9
 284:	1a 96       	adiw	r26, 0x0a	; 10
 286:	8c 91       	ld	r24, X
 288:	1a 97       	sbiw	r26, 0x0a	; 10
 28a:	20 81       	ld	r18, Z
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	02 c0       	rjmp	.+4      	; 0x294 <__stack+0x35>
 290:	35 95       	asr	r19
 292:	27 95       	ror	r18
 294:	8a 95       	dec	r24
 296:	e2 f7       	brpl	.-8      	; 0x290 <__stack+0x31>
 298:	20 ff       	sbrs	r18, 0
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <__stack+0x41>
 29c:	49 2b       	or	r20, r25
 29e:	03 c0       	rjmp	.+6      	; 0x2a6 <__stack+0x47>
 2a0:	89 2f       	mov	r24, r25
 2a2:	80 95       	com	r24
 2a4:	48 23       	and	r20, r24
 2a6:	88 b3       	in	r24, 0x18	; 24
 2a8:	86 27       	eor	r24, r22
 2aa:	88 bb       	out	0x18, r24	; 24
 2ac:	21 c0       	rjmp	.+66     	; 0x2f0 <__stack+0x91>
 2ae:	94 96       	adiw	r26, 0x24	; 36
 2b0:	ed 91       	ld	r30, X+
 2b2:	fc 91       	ld	r31, X
 2b4:	95 97       	sbiw	r26, 0x25	; 37
 2b6:	25 2f       	mov	r18, r21
 2b8:	31 97       	sbiw	r30, 0x01	; 1
 2ba:	2f ef       	ldi	r18, 0xFF	; 255
 2bc:	ef 3f       	cpi	r30, 0xFF	; 255
 2be:	f2 07       	cpc	r31, r18
 2c0:	d9 f7       	brne	.-10     	; 0x2b8 <__stack+0x59>
 2c2:	18 96       	adiw	r26, 0x08	; 8
 2c4:	ed 91       	ld	r30, X+
 2c6:	fc 91       	ld	r31, X
 2c8:	19 97       	sbiw	r26, 0x09	; 9
 2ca:	1a 96       	adiw	r26, 0x0a	; 10
 2cc:	8c 91       	ld	r24, X
 2ce:	1a 97       	sbiw	r26, 0x0a	; 10
 2d0:	20 81       	ld	r18, Z
 2d2:	30 e0       	ldi	r19, 0x00	; 0
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <__stack+0x7b>
 2d6:	35 95       	asr	r19
 2d8:	27 95       	ror	r18
 2da:	8a 95       	dec	r24
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <__stack+0x77>
 2de:	20 fd       	sbrc	r18, 0
 2e0:	07 c0       	rjmp	.+14     	; 0x2f0 <__stack+0x91>
 2e2:	60 93 e6 00 	sts	0x00E6, r22	; 0x8000e6 <FLAG>
 2e6:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <pWidth+0x1>
 2ea:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <pWidth>
 2ee:	73 bf       	out	0x33, r23	; 51
 2f0:	9f 5f       	subi	r25, 0xFF	; 255
 2f2:	9a 30       	cpi	r25, 0x0A	; 10
 2f4:	09 f0       	breq	.+2      	; 0x2f8 <__stack+0x99>
 2f6:	b5 cf       	rjmp	.-150    	; 0x262 <__stack+0x3>
 2f8:	5c 96       	adiw	r26, 0x1c	; 28
 2fa:	8c 91       	ld	r24, X
 2fc:	5c 97       	sbiw	r26, 0x1c	; 28
 2fe:	5d 96       	adiw	r26, 0x1d	; 29
 300:	2c 91       	ld	r18, X
 302:	5d 97       	sbiw	r26, 0x1d	; 29
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	01 96       	adiw	r24, 0x01	; 1
 308:	8f 70       	andi	r24, 0x0F	; 15
 30a:	99 27       	eor	r25, r25
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	82 17       	cp	r24, r18
 310:	93 07       	cpc	r25, r19
 312:	79 f0       	breq	.+30     	; 0x332 <__stack+0xd3>
 314:	5c 96       	adiw	r26, 0x1c	; 28
 316:	8c 91       	ld	r24, X
 318:	5c 97       	sbiw	r26, 0x1c	; 28
 31a:	fd 01       	movw	r30, r26
 31c:	e8 0f       	add	r30, r24
 31e:	f1 1d       	adc	r31, r1
 320:	44 87       	std	Z+12, r20	; 0x0c
 322:	5c 96       	adiw	r26, 0x1c	; 28
 324:	8c 91       	ld	r24, X
 326:	5c 97       	sbiw	r26, 0x1c	; 28
 328:	8f 5f       	subi	r24, 0xFF	; 255
 32a:	8f 70       	andi	r24, 0x0F	; 15
 32c:	5c 96       	adiw	r26, 0x1c	; 28
 32e:	8c 93       	st	X, r24
 330:	08 95       	ret
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	5f 96       	adiw	r26, 0x1f	; 31
 338:	9c 93       	st	X, r25
 33a:	8e 93       	st	-X, r24
 33c:	5e 97       	sbiw	r26, 0x1e	; 30
 33e:	08 95       	ret

00000340 <__vector_2>:
 340:	1f 92       	push	r1
 342:	0f 92       	push	r0
 344:	0f b6       	in	r0, 0x3f	; 63
 346:	0f 92       	push	r0
 348:	11 24       	eor	r1, r1
 34a:	2f 93       	push	r18
 34c:	3f 93       	push	r19
 34e:	4f 93       	push	r20
 350:	5f 93       	push	r21
 352:	6f 93       	push	r22
 354:	7f 93       	push	r23
 356:	8f 93       	push	r24
 358:	9f 93       	push	r25
 35a:	af 93       	push	r26
 35c:	bf 93       	push	r27
 35e:	ef 93       	push	r30
 360:	ff 93       	push	r31
 362:	80 91 e6 00 	lds	r24, 0x00E6	; 0x8000e6 <FLAG>
 366:	88 23       	and	r24, r24
 368:	31 f0       	breq	.+12     	; 0x376 <__vector_2+0x36>
 36a:	cc 9b       	sbis	0x19, 4	; 25
 36c:	04 c0       	rjmp	.+8      	; 0x376 <__vector_2+0x36>
 36e:	13 be       	out	0x33, r1	; 51
 370:	12 be       	out	0x32, r1	; 50
 372:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <FLAG>
 376:	cd 99       	sbic	0x19, 5	; 25
 378:	05 c0       	rjmp	.+10     	; 0x384 <__vector_2+0x44>
 37a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <seial_0>
 37e:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <seial_0+0x1>
 382:	4f df       	rcall	.-354    	; 0x222 <handler>
 384:	cc 99       	sbic	0x19, 4	; 25
 386:	05 c0       	rjmp	.+10     	; 0x392 <__vector_2+0x52>
 388:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <seial_1>
 38c:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <seial_1+0x1>
 390:	48 df       	rcall	.-368    	; 0x222 <handler>
 392:	ff 91       	pop	r31
 394:	ef 91       	pop	r30
 396:	bf 91       	pop	r27
 398:	af 91       	pop	r26
 39a:	9f 91       	pop	r25
 39c:	8f 91       	pop	r24
 39e:	7f 91       	pop	r23
 3a0:	6f 91       	pop	r22
 3a2:	5f 91       	pop	r21
 3a4:	4f 91       	pop	r20
 3a6:	3f 91       	pop	r19
 3a8:	2f 91       	pop	r18
 3aa:	0f 90       	pop	r0
 3ac:	0f be       	out	0x3f, r0	; 63
 3ae:	0f 90       	pop	r0
 3b0:	1f 90       	pop	r1
 3b2:	18 95       	reti

000003b4 <__vector_9>:
 3b4:	1f 92       	push	r1
 3b6:	0f 92       	push	r0
 3b8:	0f b6       	in	r0, 0x3f	; 63
 3ba:	0f 92       	push	r0
 3bc:	11 24       	eor	r1, r1
 3be:	8f 93       	push	r24
 3c0:	9f 93       	push	r25
 3c2:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <pWidth>
 3c6:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <pWidth+0x1>
 3ca:	01 96       	adiw	r24, 0x01	; 1
 3cc:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <pWidth+0x1>
 3d0:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <pWidth>
 3d4:	9f 91       	pop	r25
 3d6:	8f 91       	pop	r24
 3d8:	0f 90       	pop	r0
 3da:	0f be       	out	0x3f, r0	; 63
 3dc:	0f 90       	pop	r0
 3de:	1f 90       	pop	r1
 3e0:	18 95       	reti

000003e2 <softSerialBegin>:
 3e2:	8f 92       	push	r8
 3e4:	9f 92       	push	r9
 3e6:	af 92       	push	r10
 3e8:	bf 92       	push	r11
 3ea:	cf 92       	push	r12
 3ec:	df 92       	push	r13
 3ee:	ef 92       	push	r14
 3f0:	ff 92       	push	r15
 3f2:	dc 01       	movw	r26, r24
 3f4:	5c 96       	adiw	r26, 0x1c	; 28
 3f6:	1c 92       	st	X, r1
 3f8:	5c 97       	sbiw	r26, 0x1c	; 28
 3fa:	5d 96       	adiw	r26, 0x1d	; 29
 3fc:	1c 92       	st	X, r1
 3fe:	5d 97       	sbiw	r26, 0x1d	; 29
 400:	5f 96       	adiw	r26, 0x1f	; 31
 402:	1c 92       	st	X, r1
 404:	1e 92       	st	-X, r1
 406:	5e 97       	sbiw	r26, 0x1e	; 30
 408:	1b 96       	adiw	r26, 0x0b	; 11
 40a:	2c 91       	ld	r18, X
 40c:	1b 97       	sbiw	r26, 0x0b	; 11
 40e:	14 96       	adiw	r26, 0x04	; 4
 410:	ed 91       	ld	r30, X+
 412:	fc 91       	ld	r31, X
 414:	15 97       	sbiw	r26, 0x05	; 5
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	ac 01       	movw	r20, r24
 41c:	02 c0       	rjmp	.+4      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 41e:	44 0f       	add	r20, r20
 420:	55 1f       	adc	r21, r21
 422:	2a 95       	dec	r18
 424:	e2 f7       	brpl	.-8      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 426:	9a 01       	movw	r18, r20
 428:	30 81       	ld	r19, Z
 42a:	23 2b       	or	r18, r19
 42c:	20 83       	st	Z, r18
 42e:	1a 96       	adiw	r26, 0x0a	; 10
 430:	2c 91       	ld	r18, X
 432:	1a 97       	sbiw	r26, 0x0a	; 10
 434:	14 96       	adiw	r26, 0x04	; 4
 436:	ed 91       	ld	r30, X+
 438:	fc 91       	ld	r31, X
 43a:	15 97       	sbiw	r26, 0x05	; 5
 43c:	bc 01       	movw	r22, r24
 43e:	02 c0       	rjmp	.+4      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 440:	66 0f       	add	r22, r22
 442:	77 1f       	adc	r23, r23
 444:	2a 95       	dec	r18
 446:	e2 f7       	brpl	.-8      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 448:	9b 01       	movw	r18, r22
 44a:	20 95       	com	r18
 44c:	30 95       	com	r19
 44e:	30 81       	ld	r19, Z
 450:	23 23       	and	r18, r19
 452:	20 83       	st	Z, r18
 454:	1a 96       	adiw	r26, 0x0a	; 10
 456:	2c 91       	ld	r18, X
 458:	1a 97       	sbiw	r26, 0x0a	; 10
 45a:	1b 96       	adiw	r26, 0x0b	; 11
 45c:	4c 91       	ld	r20, X
 45e:	1b 97       	sbiw	r26, 0x0b	; 11
 460:	16 96       	adiw	r26, 0x06	; 6
 462:	ed 91       	ld	r30, X+
 464:	fc 91       	ld	r31, X
 466:	17 97       	sbiw	r26, 0x07	; 7
 468:	bc 01       	movw	r22, r24
 46a:	02 c0       	rjmp	.+4      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 46c:	66 0f       	add	r22, r22
 46e:	77 1f       	adc	r23, r23
 470:	2a 95       	dec	r18
 472:	e2 f7       	brpl	.-8      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 474:	02 c0       	rjmp	.+4      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 476:	88 0f       	add	r24, r24
 478:	99 1f       	adc	r25, r25
 47a:	4a 95       	dec	r20
 47c:	e2 f7       	brpl	.-8      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 47e:	86 2b       	or	r24, r22
 480:	97 2b       	or	r25, r23
 482:	90 81       	ld	r25, Z
 484:	89 2b       	or	r24, r25
 486:	80 83       	st	Z, r24
 488:	e2 e2       	ldi	r30, 0x22	; 34
 48a:	f0 e0       	ldi	r31, 0x00	; 0
 48c:	c5 90       	lpm	r12, Z+
 48e:	d5 90       	lpm	r13, Z+
 490:	e5 90       	lpm	r14, Z+
 492:	f4 90       	lpm	r15, Z
 494:	4d 91       	ld	r20, X+
 496:	5d 91       	ld	r21, X+
 498:	6d 91       	ld	r22, X+
 49a:	7c 91       	ld	r23, X
 49c:	13 97       	sbiw	r26, 0x03	; 3
 49e:	c4 16       	cp	r12, r20
 4a0:	d5 06       	cpc	r13, r21
 4a2:	e6 06       	cpc	r14, r22
 4a4:	f7 06       	cpc	r15, r23
 4a6:	a9 f0       	breq	.+42     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 4a8:	4e e2       	ldi	r20, 0x2E	; 46
 4aa:	50 e0       	ldi	r21, 0x00	; 0
 4ac:	21 e0       	ldi	r18, 0x01	; 1
 4ae:	30 e0       	ldi	r19, 0x00	; 0
 4b0:	fa 01       	movw	r30, r20
 4b2:	85 90       	lpm	r8, Z+
 4b4:	95 90       	lpm	r9, Z+
 4b6:	a5 90       	lpm	r10, Z+
 4b8:	b4 90       	lpm	r11, Z
 4ba:	cd 90       	ld	r12, X+
 4bc:	dd 90       	ld	r13, X+
 4be:	ed 90       	ld	r14, X+
 4c0:	fc 90       	ld	r15, X
 4c2:	13 97       	sbiw	r26, 0x03	; 3
 4c4:	8c 14       	cp	r8, r12
 4c6:	9d 04       	cpc	r9, r13
 4c8:	ae 04       	cpc	r10, r14
 4ca:	bf 04       	cpc	r11, r15
 4cc:	09 f0       	breq	.+2      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
 4ce:	5e c0       	rjmp	.+188    	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 4d2:	20 e0       	ldi	r18, 0x00	; 0
 4d4:	30 e0       	ldi	r19, 0x00	; 0
 4d6:	c9 01       	movw	r24, r18
 4d8:	88 0f       	add	r24, r24
 4da:	99 1f       	adc	r25, r25
 4dc:	fc 01       	movw	r30, r24
 4de:	e2 0f       	add	r30, r18
 4e0:	f3 1f       	adc	r31, r19
 4e2:	ee 0f       	add	r30, r30
 4e4:	ff 1f       	adc	r31, r31
 4e6:	ee 0f       	add	r30, r30
 4e8:	ff 1f       	adc	r31, r31
 4ea:	ea 5d       	subi	r30, 0xDA	; 218
 4ec:	ff 4f       	sbci	r31, 0xFF	; 255
 4ee:	45 91       	lpm	r20, Z+
 4f0:	54 91       	lpm	r21, Z
 4f2:	93 96       	adiw	r26, 0x23	; 35
 4f4:	5c 93       	st	X, r21
 4f6:	4e 93       	st	-X, r20
 4f8:	92 97       	sbiw	r26, 0x22	; 34
 4fa:	fc 01       	movw	r30, r24
 4fc:	e2 0f       	add	r30, r18
 4fe:	f3 1f       	adc	r31, r19
 500:	ee 0f       	add	r30, r30
 502:	ff 1f       	adc	r31, r31
 504:	ee 0f       	add	r30, r30
 506:	ff 1f       	adc	r31, r31
 508:	e8 5d       	subi	r30, 0xD8	; 216
 50a:	ff 4f       	sbci	r31, 0xFF	; 255
 50c:	45 91       	lpm	r20, Z+
 50e:	54 91       	lpm	r21, Z
 510:	91 96       	adiw	r26, 0x21	; 33
 512:	5c 93       	st	X, r21
 514:	4e 93       	st	-X, r20
 516:	90 97       	sbiw	r26, 0x20	; 32
 518:	fc 01       	movw	r30, r24
 51a:	e2 0f       	add	r30, r18
 51c:	f3 1f       	adc	r31, r19
 51e:	ee 0f       	add	r30, r30
 520:	ff 1f       	adc	r31, r31
 522:	ee 0f       	add	r30, r30
 524:	ff 1f       	adc	r31, r31
 526:	e6 5d       	subi	r30, 0xD6	; 214
 528:	ff 4f       	sbci	r31, 0xFF	; 255
 52a:	45 91       	lpm	r20, Z+
 52c:	54 91       	lpm	r21, Z
 52e:	95 96       	adiw	r26, 0x25	; 37
 530:	5c 93       	st	X, r21
 532:	4e 93       	st	-X, r20
 534:	94 97       	sbiw	r26, 0x24	; 36
 536:	fc 01       	movw	r30, r24
 538:	e2 0f       	add	r30, r18
 53a:	f3 1f       	adc	r31, r19
 53c:	ee 0f       	add	r30, r30
 53e:	ff 1f       	adc	r31, r31
 540:	ee 0f       	add	r30, r30
 542:	ff 1f       	adc	r31, r31
 544:	e4 5d       	subi	r30, 0xD4	; 212
 546:	ff 4f       	sbci	r31, 0xFF	; 255
 548:	85 91       	lpm	r24, Z+
 54a:	94 91       	lpm	r25, Z
 54c:	97 96       	adiw	r26, 0x27	; 39
 54e:	9c 93       	st	X, r25
 550:	8e 93       	st	-X, r24
 552:	96 97       	sbiw	r26, 0x26	; 38
 554:	8b b7       	in	r24, 0x3b	; 59
 556:	80 61       	ori	r24, 0x10	; 16
 558:	8b bf       	out	0x3b, r24	; 59
 55a:	1a 96       	adiw	r26, 0x0a	; 10
 55c:	3c 91       	ld	r19, X
 55e:	1a 97       	sbiw	r26, 0x0a	; 10
 560:	22 b3       	in	r18, 0x12	; 18
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	02 c0       	rjmp	.+4      	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
 568:	88 0f       	add	r24, r24
 56a:	99 1f       	adc	r25, r25
 56c:	3a 95       	dec	r19
 56e:	e2 f7       	brpl	.-8      	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
 570:	82 2b       	or	r24, r18
 572:	82 bb       	out	0x12, r24	; 18
 574:	96 96       	adiw	r26, 0x26	; 38
 576:	8d 91       	ld	r24, X+
 578:	9c 91       	ld	r25, X
 57a:	97 97       	sbiw	r26, 0x27	; 39
 57c:	20 e0       	ldi	r18, 0x00	; 0
 57e:	01 97       	sbiw	r24, 0x01	; 1
 580:	2f ef       	ldi	r18, 0xFF	; 255
 582:	8f 3f       	cpi	r24, 0xFF	; 255
 584:	92 07       	cpc	r25, r18
 586:	d9 f7       	brne	.-10     	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
 588:	78 94       	sei
 58a:	08 c0       	rjmp	.+16     	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
 58c:	2f 5f       	subi	r18, 0xFF	; 255
 58e:	3f 4f       	sbci	r19, 0xFF	; 255
 590:	44 5f       	subi	r20, 0xF4	; 244
 592:	5f 4f       	sbci	r21, 0xFF	; 255
 594:	2d 30       	cpi	r18, 0x0D	; 13
 596:	31 05       	cpc	r19, r1
 598:	09 f0       	breq	.+2      	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
 59a:	8a cf       	rjmp	.-236    	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 59c:	ff 90       	pop	r15
 59e:	ef 90       	pop	r14
 5a0:	df 90       	pop	r13
 5a2:	cf 90       	pop	r12
 5a4:	bf 90       	pop	r11
 5a6:	af 90       	pop	r10
 5a8:	9f 90       	pop	r9
 5aa:	8f 90       	pop	r8
 5ac:	08 95       	ret

000005ae <softSerialRead>:
 5ae:	fc 01       	movw	r30, r24
 5b0:	95 8d       	ldd	r25, Z+29	; 0x1d
 5b2:	84 8d       	ldd	r24, Z+28	; 0x1c
 5b4:	98 17       	cp	r25, r24
 5b6:	61 f0       	breq	.+24     	; 0x5d0 <softSerialRead+0x22>
 5b8:	85 8d       	ldd	r24, Z+29	; 0x1d
 5ba:	df 01       	movw	r26, r30
 5bc:	a8 0f       	add	r26, r24
 5be:	b1 1d       	adc	r27, r1
 5c0:	1c 96       	adiw	r26, 0x0c	; 12
 5c2:	8c 91       	ld	r24, X
 5c4:	95 8d       	ldd	r25, Z+29	; 0x1d
 5c6:	9f 5f       	subi	r25, 0xFF	; 255
 5c8:	9f 70       	andi	r25, 0x0F	; 15
 5ca:	95 8f       	std	Z+29, r25	; 0x1d
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	08 95       	ret
 5d0:	8f ef       	ldi	r24, 0xFF	; 255
 5d2:	9f ef       	ldi	r25, 0xFF	; 255
 5d4:	08 95       	ret

000005d6 <softSerialAvailable>:
 5d6:	fc 01       	movw	r30, r24
 5d8:	94 8d       	ldd	r25, Z+28	; 0x1c
 5da:	25 8d       	ldd	r18, Z+29	; 0x1d
 5dc:	89 2f       	mov	r24, r25
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	40 96       	adiw	r24, 0x10	; 16
 5e2:	82 1b       	sub	r24, r18
 5e4:	91 09       	sbc	r25, r1
 5e6:	8f 70       	andi	r24, 0x0F	; 15
 5e8:	99 27       	eor	r25, r25
 5ea:	08 95       	ret

000005ec <softSerialWrite>:

size_t softSerialWrite(uint8_t b, Uart *p) {
 5ec:	0f 93       	push	r16
 5ee:	1f 93       	push	r17
 5f0:	cf 93       	push	r28
 5f2:	df 93       	push	r29
 5f4:	db 01       	movw	r26, r22
	if (p->_tx_delay == 0) {
 5f6:	96 96       	adiw	r26, 0x26	; 38
 5f8:	2d 91       	ld	r18, X+
 5fa:	3c 91       	ld	r19, X
 5fc:	97 97       	sbiw	r26, 0x27	; 39
 5fe:	21 15       	cp	r18, r1
 600:	31 05       	cpc	r19, r1
 602:	09 f4       	brne	.+2      	; 0x606 <softSerialWrite+0x1a>
 604:	7b c0       	rjmp	.+246    	; 0x6fc <softSerialWrite+0x110>
		//setWriteError();
		return 0;
	}

	uint8_t oldSREG = SREG; // store interrupt flag
 606:	cf b7       	in	r28, 0x3f	; 63
	cli();	// turn off interrupts for a clean txmit
 608:	f8 94       	cli

	// Write the start bit
	*p->_PORT &= ~(1<<p->_TX_PIN_NUM); // tx pin low
 60a:	1b 96       	adiw	r26, 0x0b	; 11
 60c:	9c 91       	ld	r25, X
 60e:	1b 97       	sbiw	r26, 0x0b	; 11
 610:	16 96       	adiw	r26, 0x06	; 6
 612:	ed 91       	ld	r30, X+
 614:	fc 91       	ld	r31, X
 616:	17 97       	sbiw	r26, 0x07	; 7
 618:	21 e0       	ldi	r18, 0x01	; 1
 61a:	30 e0       	ldi	r19, 0x00	; 0
 61c:	02 c0       	rjmp	.+4      	; 0x622 <softSerialWrite+0x36>
 61e:	22 0f       	add	r18, r18
 620:	33 1f       	adc	r19, r19
 622:	9a 95       	dec	r25
 624:	e2 f7       	brpl	.-8      	; 0x61e <softSerialWrite+0x32>
 626:	20 95       	com	r18
 628:	30 95       	com	r19
 62a:	90 81       	ld	r25, Z
 62c:	29 23       	and	r18, r25
 62e:	20 83       	st	Z, r18
	tunedDelay(p->_tx_delay + XMIT_START_ADJUSTMENT);
 630:	96 96       	adiw	r26, 0x26	; 38
 632:	ed 91       	ld	r30, X+
 634:	fc 91       	ld	r31, X
 636:	97 97       	sbiw	r26, 0x27	; 39
 638:	34 96       	adiw	r30, 0x04	; 4

/* static */
inline void tunedDelay(uint16_t delay) {
	uint8_t tmp = 0;

	asm volatile("sbiw    %0, 0x01 \n\t"
 63a:	20 e0       	ldi	r18, 0x00	; 0
 63c:	31 97       	sbiw	r30, 0x01	; 1
 63e:	2f ef       	ldi	r18, 0xFF	; 255
 640:	ef 3f       	cpi	r30, 0xFF	; 255
 642:	f2 07       	cpc	r31, r18
 644:	d9 f7       	brne	.-10     	; 0x63c <softSerialWrite+0x50>
 646:	48 e0       	ldi	r20, 0x08	; 8
 648:	50 e0       	ldi	r21, 0x00	; 0
	// Write the start bit
	*p->_PORT &= ~(1<<p->_TX_PIN_NUM); // tx pin low
	tunedDelay(p->_tx_delay + XMIT_START_ADJUSTMENT);

	// Write each of the 8 bits
	for (byte mask = 0x01; mask; mask <<= 1) {
 64a:	91 e0       	ldi	r25, 0x01	; 1
		if (b & mask) // choose bit
			*p->_PORT |= (1<<p->_TX_PIN_NUM); // tx pin high, send 1
		else
			*p->_PORT &= ~(1<<p->_TX_PIN_NUM); // tx pin low, send 0
 64c:	61 e0       	ldi	r22, 0x01	; 1
 64e:	70 e0       	ldi	r23, 0x00	; 0

/* static */
inline void tunedDelay(uint16_t delay) {
	uint8_t tmp = 0;

	asm volatile("sbiw    %0, 0x01 \n\t"
 650:	d0 e0       	ldi	r29, 0x00	; 0
	*p->_PORT &= ~(1<<p->_TX_PIN_NUM); // tx pin low
	tunedDelay(p->_tx_delay + XMIT_START_ADJUSTMENT);

	// Write each of the 8 bits
	for (byte mask = 0x01; mask; mask <<= 1) {
		if (b & mask) // choose bit
 652:	28 2f       	mov	r18, r24
 654:	29 23       	and	r18, r25
 656:	91 f0       	breq	.+36     	; 0x67c <softSerialWrite+0x90>
			*p->_PORT |= (1<<p->_TX_PIN_NUM); // tx pin high, send 1
 658:	1b 96       	adiw	r26, 0x0b	; 11
 65a:	2c 91       	ld	r18, X
 65c:	1b 97       	sbiw	r26, 0x0b	; 11
 65e:	16 96       	adiw	r26, 0x06	; 6
 660:	ed 91       	ld	r30, X+
 662:	fc 91       	ld	r31, X
 664:	17 97       	sbiw	r26, 0x07	; 7
 666:	8b 01       	movw	r16, r22
 668:	02 c0       	rjmp	.+4      	; 0x66e <softSerialWrite+0x82>
 66a:	00 0f       	add	r16, r16
 66c:	11 1f       	adc	r17, r17
 66e:	2a 95       	dec	r18
 670:	e2 f7       	brpl	.-8      	; 0x66a <softSerialWrite+0x7e>
 672:	98 01       	movw	r18, r16
 674:	30 81       	ld	r19, Z
 676:	23 2b       	or	r18, r19
 678:	20 83       	st	Z, r18
 67a:	13 c0       	rjmp	.+38     	; 0x6a2 <softSerialWrite+0xb6>
		else
			*p->_PORT &= ~(1<<p->_TX_PIN_NUM); // tx pin low, send 0
 67c:	1b 96       	adiw	r26, 0x0b	; 11
 67e:	2c 91       	ld	r18, X
 680:	1b 97       	sbiw	r26, 0x0b	; 11
 682:	16 96       	adiw	r26, 0x06	; 6
 684:	ed 91       	ld	r30, X+
 686:	fc 91       	ld	r31, X
 688:	17 97       	sbiw	r26, 0x07	; 7
 68a:	8b 01       	movw	r16, r22
 68c:	02 c0       	rjmp	.+4      	; 0x692 <softSerialWrite+0xa6>
 68e:	00 0f       	add	r16, r16
 690:	11 1f       	adc	r17, r17
 692:	2a 95       	dec	r18
 694:	e2 f7       	brpl	.-8      	; 0x68e <softSerialWrite+0xa2>
 696:	98 01       	movw	r18, r16
 698:	20 95       	com	r18
 69a:	30 95       	com	r19
 69c:	30 81       	ld	r19, Z
 69e:	23 23       	and	r18, r19
 6a0:	20 83       	st	Z, r18

		tunedDelay(p->_tx_delay);
 6a2:	96 96       	adiw	r26, 0x26	; 38
 6a4:	ed 91       	ld	r30, X+
 6a6:	fc 91       	ld	r31, X
 6a8:	97 97       	sbiw	r26, 0x27	; 39

/* static */
inline void tunedDelay(uint16_t delay) {
	uint8_t tmp = 0;

	asm volatile("sbiw    %0, 0x01 \n\t"
 6aa:	2d 2f       	mov	r18, r29
 6ac:	31 97       	sbiw	r30, 0x01	; 1
 6ae:	2f ef       	ldi	r18, 0xFF	; 255
 6b0:	ef 3f       	cpi	r30, 0xFF	; 255
 6b2:	f2 07       	cpc	r31, r18
 6b4:	d9 f7       	brne	.-10     	; 0x6ac <softSerialWrite+0xc0>
	// Write the start bit
	*p->_PORT &= ~(1<<p->_TX_PIN_NUM); // tx pin low
	tunedDelay(p->_tx_delay + XMIT_START_ADJUSTMENT);

	// Write each of the 8 bits
	for (byte mask = 0x01; mask; mask <<= 1) {
 6b6:	99 0f       	add	r25, r25
 6b8:	41 50       	subi	r20, 0x01	; 1
 6ba:	51 09       	sbc	r21, r1
 6bc:	09 f0       	breq	.+2      	; 0x6c0 <softSerialWrite+0xd4>
 6be:	c9 cf       	rjmp	.-110    	; 0x652 <softSerialWrite+0x66>
		else
			*p->_PORT &= ~(1<<p->_TX_PIN_NUM); // tx pin low, send 0

		tunedDelay(p->_tx_delay);
	}
	*p->_PORT |= (1<<p->_TX_PIN_NUM); // tx pin high, restore pin to natural state
 6c0:	1b 96       	adiw	r26, 0x0b	; 11
 6c2:	2c 91       	ld	r18, X
 6c4:	1b 97       	sbiw	r26, 0x0b	; 11
 6c6:	16 96       	adiw	r26, 0x06	; 6
 6c8:	ed 91       	ld	r30, X+
 6ca:	fc 91       	ld	r31, X
 6cc:	17 97       	sbiw	r26, 0x07	; 7
 6ce:	81 e0       	ldi	r24, 0x01	; 1
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	02 c0       	rjmp	.+4      	; 0x6d8 <softSerialWrite+0xec>
 6d4:	88 0f       	add	r24, r24
 6d6:	99 1f       	adc	r25, r25
 6d8:	2a 95       	dec	r18
 6da:	e2 f7       	brpl	.-8      	; 0x6d4 <softSerialWrite+0xe8>
 6dc:	90 81       	ld	r25, Z
 6de:	89 2b       	or	r24, r25
 6e0:	80 83       	st	Z, r24

	//sei();
	SREG = oldSREG; // turn interrupts back on
 6e2:	cf bf       	out	0x3f, r28	; 63
	tunedDelay(p->_tx_delay);
 6e4:	96 96       	adiw	r26, 0x26	; 38
 6e6:	8d 91       	ld	r24, X+
 6e8:	9c 91       	ld	r25, X
 6ea:	97 97       	sbiw	r26, 0x27	; 39

/* static */
inline void tunedDelay(uint16_t delay) {
	uint8_t tmp = 0;

	asm volatile("sbiw    %0, 0x01 \n\t"
 6ec:	20 e0       	ldi	r18, 0x00	; 0
 6ee:	01 97       	sbiw	r24, 0x01	; 1
 6f0:	2f ef       	ldi	r18, 0xFF	; 255
 6f2:	8f 3f       	cpi	r24, 0xFF	; 255
 6f4:	92 07       	cpc	r25, r18
 6f6:	d9 f7       	brne	.-10     	; 0x6ee <softSerialWrite+0x102>

	//sei();
	SREG = oldSREG; // turn interrupts back on
	tunedDelay(p->_tx_delay);

	return 1;
 6f8:	21 e0       	ldi	r18, 0x01	; 1
 6fa:	30 e0       	ldi	r19, 0x00	; 0
}
 6fc:	c9 01       	movw	r24, r18
 6fe:	df 91       	pop	r29
 700:	cf 91       	pop	r28
 702:	1f 91       	pop	r17
 704:	0f 91       	pop	r16
 706:	08 95       	ret

00000708 <_exit>:
 708:	f8 94       	cli

0000070a <__stop_program>:
 70a:	ff cf       	rjmp	.-2      	; 0x70a <__stop_program>
