
TinySoftSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000658  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000006cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  00800060  00800060  000006cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000738  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013af  00000000  00000000  00000830  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000097d  00000000  00000000  00001bdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a17  00000000  00000000  0000255c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000248  00000000  00000000  00002f74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000633  00000000  00000000  000031bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a69  00000000  00000000  000037ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00004258  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	5e c0       	rjmp	.+188    	; 0xbe <__ctors_end>
   2:	78 c0       	rjmp	.+240    	; 0xf4 <__bad_interrupt>
   4:	ea c1       	rjmp	.+980    	; 0x3da <__vector_2>
   6:	76 c0       	rjmp	.+236    	; 0xf4 <__bad_interrupt>
   8:	75 c0       	rjmp	.+234    	; 0xf4 <__bad_interrupt>
   a:	74 c0       	rjmp	.+232    	; 0xf4 <__bad_interrupt>
   c:	73 c0       	rjmp	.+230    	; 0xf4 <__bad_interrupt>
   e:	72 c0       	rjmp	.+228    	; 0xf4 <__bad_interrupt>
  10:	71 c0       	rjmp	.+226    	; 0xf4 <__bad_interrupt>
  12:	70 c0       	rjmp	.+224    	; 0xf4 <__bad_interrupt>
  14:	6f c0       	rjmp	.+222    	; 0xf4 <__bad_interrupt>
  16:	6e c0       	rjmp	.+220    	; 0xf4 <__bad_interrupt>
  18:	6d c0       	rjmp	.+218    	; 0xf4 <__bad_interrupt>
  1a:	6c c0       	rjmp	.+216    	; 0xf4 <__bad_interrupt>
  1c:	6b c0       	rjmp	.+214    	; 0xf4 <__bad_interrupt>
  1e:	6a c0       	rjmp	.+212    	; 0xf4 <__bad_interrupt>
  20:	69 c0       	rjmp	.+210    	; 0xf4 <__bad_interrupt>

00000022 <__trampolines_end>:
  22:	00 c2       	rjmp	.+1024   	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
  24:	01 00       	.word	0x0001	; ????
  26:	01 00       	.word	0x0001	; ????
  28:	05 00       	.word	0x0005	; ????
  2a:	05 00       	.word	0x0005	; ????
  2c:	03 00       	.word	0x0003	; ????
  2e:	00 e1       	ldi	r16, 0x10	; 16
  30:	00 00       	nop
  32:	01 00       	.word	0x0001	; ????
  34:	0f 00       	.word	0x000f	; ????
  36:	0f 00       	.word	0x000f	; ????
  38:	0d 00       	.word	0x000d	; ????
  3a:	00 96       	adiw	r24, 0x00	; 0
  3c:	00 00       	nop
  3e:	02 00       	.word	0x0002	; ????
  40:	19 00       	.word	0x0019	; ????
  42:	1a 00       	.word	0x001a	; ????
  44:	17 00       	.word	0x0017	; ????
  46:	12 7a       	andi	r17, 0xA2	; 162
  48:	00 00       	nop
  4a:	07 00       	.word	0x0007	; ????
  4c:	20 00       	.word	0x0020	; ????
  4e:	21 00       	.word	0x0021	; ????
  50:	1d 00       	.word	0x001d	; ????
  52:	80 70       	andi	r24, 0x00	; 0
  54:	00 00       	nop
  56:	0b 00       	.word	0x000b	; ????
  58:	23 00       	.word	0x0023	; ????
  5a:	23 00       	.word	0x0023	; ????
  5c:	20 00       	.word	0x0020	; ????
  5e:	00 4b       	sbci	r16, 0xB0	; 176
  60:	00 00       	nop
  62:	14 00       	.word	0x0014	; ????
  64:	37 00       	.word	0x0037	; ????
  66:	37 00       	.word	0x0037	; ????
  68:	34 00       	.word	0x0034	; ????
  6a:	40 38       	cpi	r20, 0x80	; 128
  6c:	00 00       	nop
  6e:	1e 00       	.word	0x001e	; ????
  70:	4b 00       	.word	0x004b	; ????
  72:	4b 00       	.word	0x004b	; ????
  74:	48 00       	.word	0x0048	; ????
  76:	80 25       	eor	r24, r0
  78:	00 00       	nop
  7a:	32 00       	.word	0x0032	; ????
  7c:	72 00       	.word	0x0072	; ????
  7e:	72 00       	.word	0x0072	; ????
  80:	70 00       	.word	0x0070	; ????
  82:	c0 12       	cpse	r12, r16
  84:	00 00       	nop
  86:	6e 00       	.word	0x006e	; ????
  88:	e9 00       	.word	0x00e9	; ????
  8a:	e9 00       	.word	0x00e9	; ????
  8c:	e6 00       	.word	0x00e6	; ????
  8e:	60 09       	sbc	r22, r0
  90:	00 00       	nop
  92:	e5 00       	.word	0x00e5	; ????
  94:	d8 01       	movw	r26, r16
  96:	d8 01       	movw	r26, r16
  98:	d5 01       	movw	r26, r10
  9a:	b0 04       	cpc	r11, r0
  9c:	00 00       	nop
  9e:	d3 01       	movw	r26, r6
  a0:	b4 03       	fmuls	r19, r20
  a2:	b4 03       	fmuls	r19, r20
  a4:	b1 03       	fmuls	r19, r17
  a6:	58 02       	muls	r21, r24
  a8:	00 00       	nop
  aa:	b4 03       	fmuls	r19, r20
  ac:	67 07       	cpc	r22, r23
  ae:	67 07       	cpc	r22, r23
  b0:	62 07       	cpc	r22, r18
  b2:	2c 01       	movw	r4, r24
  b4:	00 00       	nop
  b6:	67 07       	cpc	r22, r23
  b8:	dd 0e       	add	r13, r29
  ba:	dd 0e       	add	r13, r29
  bc:	da 0e       	add	r13, r26

000000be <__ctors_end>:
  be:	11 24       	eor	r1, r1
  c0:	1f be       	out	0x3f, r1	; 63
  c2:	cf e5       	ldi	r28, 0x5F	; 95
  c4:	d2 e0       	ldi	r29, 0x02	; 2
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	cd bf       	out	0x3d, r28	; 61

000000ca <__do_copy_data>:
  ca:	10 e0       	ldi	r17, 0x00	; 0
  cc:	a0 e6       	ldi	r26, 0x60	; 96
  ce:	b0 e0       	ldi	r27, 0x00	; 0
  d0:	e8 e5       	ldi	r30, 0x58	; 88
  d2:	f6 e0       	ldi	r31, 0x06	; 6
  d4:	02 c0       	rjmp	.+4      	; 0xda <__do_copy_data+0x10>
  d6:	05 90       	lpm	r0, Z+
  d8:	0d 92       	st	X+, r0
  da:	a0 36       	cpi	r26, 0x60	; 96
  dc:	b1 07       	cpc	r27, r17
  de:	d9 f7       	brne	.-10     	; 0xd6 <__do_copy_data+0xc>

000000e0 <__do_clear_bss>:
  e0:	20 e0       	ldi	r18, 0x00	; 0
  e2:	a0 e6       	ldi	r26, 0x60	; 96
  e4:	b0 e0       	ldi	r27, 0x00	; 0
  e6:	01 c0       	rjmp	.+2      	; 0xea <.do_clear_bss_start>

000000e8 <.do_clear_bss_loop>:
  e8:	1d 92       	st	X+, r1

000000ea <.do_clear_bss_start>:
  ea:	a2 38       	cpi	r26, 0x82	; 130
  ec:	b2 07       	cpc	r27, r18
  ee:	e1 f7       	brne	.-8      	; 0xe8 <.do_clear_bss_loop>
  f0:	6b d0       	rcall	.+214    	; 0x1c8 <main>
  f2:	b0 c2       	rjmp	.+1376   	; 0x654 <_exit>

000000f4 <__bad_interrupt>:
  f4:	85 cf       	rjmp	.-246    	; 0x0 <__vectors>

000000f6 <DS18B20_init>:
  f6:	d7 9a       	sbi	0x1a, 7	; 26
  f8:	df 98       	cbi	0x1b, 7	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	83 ed       	ldi	r24, 0xD3	; 211
  fc:	93 e0       	ldi	r25, 0x03	; 3
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <DS18B20_init+0x8>
 102:	00 c0       	rjmp	.+0      	; 0x104 <DS18B20_init+0xe>
 104:	00 00       	nop
 106:	d7 98       	cbi	0x1a, 7	; 26
 108:	95 eb       	ldi	r25, 0xB5	; 181
 10a:	9a 95       	dec	r25
 10c:	f1 f7       	brne	.-4      	; 0x10a <DS18B20_init+0x14>
 10e:	00 00       	nop
 110:	89 b3       	in	r24, 0x19	; 25
 112:	80 78       	andi	r24, 0x80	; 128
 114:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <OK_Flag>
 118:	8b e4       	ldi	r24, 0x4B	; 75
 11a:	93 e0       	ldi	r25, 0x03	; 3
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <DS18B20_init+0x26>
 120:	00 c0       	rjmp	.+0      	; 0x122 <DS18B20_init+0x2c>
 122:	00 00       	nop
 124:	08 95       	ret

00000126 <read_18b20>:
 126:	98 e0       	ldi	r25, 0x08	; 8
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	d7 9a       	sbi	0x1a, 7	; 26
 12c:	25 e0       	ldi	r18, 0x05	; 5
 12e:	2a 95       	dec	r18
 130:	f1 f7       	brne	.-4      	; 0x12e <read_18b20+0x8>
 132:	00 00       	nop
 134:	d7 98       	cbi	0x1a, 7	; 26
 136:	2a e0       	ldi	r18, 0x0A	; 10
 138:	2a 95       	dec	r18
 13a:	f1 f7       	brne	.-4      	; 0x138 <read_18b20+0x12>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <read_18b20+0x18>
 13e:	86 95       	lsr	r24
 140:	cf 99       	sbic	0x19, 7	; 25
 142:	80 68       	ori	r24, 0x80	; 128
 144:	25 ea       	ldi	r18, 0xA5	; 165
 146:	2a 95       	dec	r18
 148:	f1 f7       	brne	.-4      	; 0x146 <read_18b20+0x20>
 14a:	00 00       	nop
 14c:	91 50       	subi	r25, 0x01	; 1
 14e:	69 f7       	brne	.-38     	; 0x12a <read_18b20+0x4>
 150:	08 95       	ret

00000152 <write_18b20>:
 152:	98 e0       	ldi	r25, 0x08	; 8
 154:	d7 9a       	sbi	0x1a, 7	; 26
 156:	25 e0       	ldi	r18, 0x05	; 5
 158:	2a 95       	dec	r18
 15a:	f1 f7       	brne	.-4      	; 0x158 <write_18b20+0x6>
 15c:	00 00       	nop
 15e:	80 ff       	sbrs	r24, 0
 160:	02 c0       	rjmp	.+4      	; 0x166 <write_18b20+0x14>
 162:	d7 98       	cbi	0x1a, 7	; 26
 164:	01 c0       	rjmp	.+2      	; 0x168 <write_18b20+0x16>
 166:	d7 9a       	sbi	0x1a, 7	; 26
 168:	86 95       	lsr	r24
 16a:	25 ea       	ldi	r18, 0xA5	; 165
 16c:	2a 95       	dec	r18
 16e:	f1 f7       	brne	.-4      	; 0x16c <write_18b20+0x1a>
 170:	00 00       	nop
 172:	d7 98       	cbi	0x1a, 7	; 26
 174:	25 e0       	ldi	r18, 0x05	; 5
 176:	2a 95       	dec	r18
 178:	f1 f7       	brne	.-4      	; 0x176 <write_18b20+0x24>
 17a:	00 00       	nop
 17c:	91 50       	subi	r25, 0x01	; 1
 17e:	51 f7       	brne	.-44     	; 0x154 <write_18b20+0x2>
 180:	08 95       	ret

00000182 <DS18b20_readRam>:
 182:	0f 93       	push	r16
 184:	1f 93       	push	r17
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	b5 df       	rcall	.-150    	; 0xf6 <DS18B20_init>
 18c:	8c ec       	ldi	r24, 0xCC	; 204
 18e:	e1 df       	rcall	.-62     	; 0x152 <write_18b20>
 190:	8e eb       	ldi	r24, 0xBE	; 190
 192:	df df       	rcall	.-66     	; 0x152 <write_18b20>
 194:	c1 e6       	ldi	r28, 0x61	; 97
 196:	d0 e0       	ldi	r29, 0x00	; 0
 198:	0a e6       	ldi	r16, 0x6A	; 106
 19a:	10 e0       	ldi	r17, 0x00	; 0
 19c:	c4 df       	rcall	.-120    	; 0x126 <read_18b20>
 19e:	89 93       	st	Y+, r24
 1a0:	c0 17       	cp	r28, r16
 1a2:	d1 07       	cpc	r29, r17
 1a4:	d9 f7       	brne	.-10     	; 0x19c <DS18b20_readRam+0x1a>
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	1f 91       	pop	r17
 1ac:	0f 91       	pop	r16
 1ae:	08 95       	ret

000001b0 <initTimer>:
	// Timer Period: 8,192 ms
	// Timer1 Overflow Interrupt: Off
	// Input Capture Interrupt: Off
	// Compare A Match Interrupt: Off
	// Compare B Match Interrupt: Off
	TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
 1b0:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	8e bd       	out	0x2e, r24	; 46
	TCNT1H=0x00;
 1b6:	1d bc       	out	0x2d, r1	; 45
	TCNT1L=0x00;
 1b8:	1c bc       	out	0x2c, r1	; 44
	ICR1H=0x00;
 1ba:	15 bc       	out	0x25, r1	; 37
	ICR1L=0x00;
 1bc:	14 bc       	out	0x24, r1	; 36
	OCR1AH=0x00;
 1be:	1b bc       	out	0x2b, r1	; 43
	OCR1AL=0x00;
 1c0:	1a bc       	out	0x2a, r1	; 42
	OCR1BH=0x00;
 1c2:	19 bc       	out	0x29, r1	; 41
	OCR1BL=0x00;
 1c4:	18 bc       	out	0x28, r1	; 40
 1c6:	08 95       	ret

000001c8 <main>:
}


int main()
{
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	cd b7       	in	r28, 0x3d	; 61
 1ce:	de b7       	in	r29, 0x3e	; 62
 1d0:	c0 5a       	subi	r28, 0xA0	; 160
 1d2:	d1 09       	sbc	r29, r1
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	f8 94       	cli
 1d8:	de bf       	out	0x3e, r29	; 62
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	cd bf       	out	0x3d, r28	; 61
	initTimer();
 1de:	e8 df       	rcall	.-48     	; 0x1b0 <initTimer>

	Uart serial0 = {9600,&DDRA,&PORTA,&PINA,PA5,PA1};
 1e0:	fe 01       	movw	r30, r28
 1e2:	e7 58       	subi	r30, 0x87	; 135
 1e4:	ff 4f       	sbci	r31, 0xFF	; 255
 1e6:	18 e2       	ldi	r17, 0x28	; 40
 1e8:	df 01       	movw	r26, r30
 1ea:	21 2f       	mov	r18, r17
 1ec:	1d 92       	st	X+, r1
 1ee:	2a 95       	dec	r18
 1f0:	e9 f7       	brne	.-6      	; 0x1ec <main+0x24>
 1f2:	0f 2e       	mov	r0, r31
 1f4:	f0 e8       	ldi	r31, 0x80	; 128
 1f6:	cf 2e       	mov	r12, r31
 1f8:	f5 e2       	ldi	r31, 0x25	; 37
 1fa:	df 2e       	mov	r13, r31
 1fc:	e1 2c       	mov	r14, r1
 1fe:	f1 2c       	mov	r15, r1
 200:	f0 2d       	mov	r31, r0
 202:	c0 82       	st	Z, r12
 204:	d1 82       	std	Z+1, r13	; 0x01
 206:	e2 82       	std	Z+2, r14	; 0x02
 208:	f3 82       	std	Z+3, r15	; 0x03
 20a:	6a e3       	ldi	r22, 0x3A	; 58
 20c:	70 e0       	ldi	r23, 0x00	; 0
 20e:	75 83       	std	Z+5, r23	; 0x05
 210:	64 83       	std	Z+4, r22	; 0x04
 212:	4b e3       	ldi	r20, 0x3B	; 59
 214:	50 e0       	ldi	r21, 0x00	; 0
 216:	57 83       	std	Z+7, r21	; 0x07
 218:	46 83       	std	Z+6, r20	; 0x06
 21a:	29 e3       	ldi	r18, 0x39	; 57
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	31 87       	std	Z+9, r19	; 0x09
 220:	20 87       	std	Z+8, r18	; 0x08
 222:	85 e0       	ldi	r24, 0x05	; 5
 224:	82 87       	std	Z+10, r24	; 0x0a
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	83 87       	std	Z+11, r24	; 0x0b
 22a:	08 e2       	ldi	r16, 0x28	; 40
 22c:	ce 01       	movw	r24, r28
 22e:	01 96       	adiw	r24, 0x01	; 1
 230:	dc 01       	movw	r26, r24
 232:	01 90       	ld	r0, Z+
 234:	0d 92       	st	X+, r0
 236:	0a 95       	dec	r16
 238:	e1 f7       	brne	.-8      	; 0x232 <main+0x6a>
	Uart serial1 = {9600,&DDRA,&PORTA,&PINA,PA4,PA0};
 23a:	fe 01       	movw	r30, r28
 23c:	ef 5a       	subi	r30, 0xAF	; 175
 23e:	ff 4f       	sbci	r31, 0xFF	; 255
 240:	df 01       	movw	r26, r30
 242:	1d 92       	st	X+, r1
 244:	1a 95       	dec	r17
 246:	e9 f7       	brne	.-6      	; 0x242 <main+0x7a>
 248:	c0 82       	st	Z, r12
 24a:	d1 82       	std	Z+1, r13	; 0x01
 24c:	e2 82       	std	Z+2, r14	; 0x02
 24e:	f3 82       	std	Z+3, r15	; 0x03
 250:	75 83       	std	Z+5, r23	; 0x05
 252:	64 83       	std	Z+4, r22	; 0x04
 254:	57 83       	std	Z+7, r21	; 0x07
 256:	46 83       	std	Z+6, r20	; 0x06
 258:	31 87       	std	Z+9, r19	; 0x09
 25a:	20 87       	std	Z+8, r18	; 0x08
 25c:	24 e0       	ldi	r18, 0x04	; 4
 25e:	22 87       	std	Z+10, r18	; 0x0a
 260:	28 e2       	ldi	r18, 0x28	; 40
 262:	de 01       	movw	r26, r28
 264:	99 96       	adiw	r26, 0x29	; 41
 266:	01 90       	ld	r0, Z+
 268:	0d 92       	st	X+, r0
 26a:	2a 95       	dec	r18
 26c:	e1 f7       	brne	.-8      	; 0x266 <__stack+0x7>
	seial_0 = &serial0;
 26e:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <seial_0+0x1>
 272:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <seial_0>
	seial_1 = &serial1;
 276:	88 96       	adiw	r24, 0x28	; 40
 278:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <seial_1+0x1>
 27c:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <seial_1>
	softSerialBegin(seial_1);
 280:	03 d1       	rcall	.+518    	; 0x488 <softSerialBegin>
	softSerialBegin(seial_0);
 282:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <seial_0>
 286:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <seial_0+0x1>
 28a:	fe d0       	rcall	.+508    	; 0x488 <softSerialBegin>
	DDRB=0xff;
 28c:	8f ef       	ldi	r24, 0xFF	; 255
 28e:	87 bb       	out	0x17, r24	; 23
	while (1) {
		DS18b20_readRam();
 290:	78 df       	rcall	.-272    	; 0x182 <DS18b20_readRam>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 292:	bf e7       	ldi	r27, 0x7F	; 127
 294:	2a e1       	ldi	r18, 0x1A	; 26
 296:	86 e0       	ldi	r24, 0x06	; 6
 298:	b1 50       	subi	r27, 0x01	; 1
 29a:	20 40       	sbci	r18, 0x00	; 0
 29c:	80 40       	sbci	r24, 0x00	; 0
 29e:	e1 f7       	brne	.-8      	; 0x298 <__stack+0x39>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <__stack+0x43>
 2a2:	00 00       	nop
 2a4:	9f e7       	ldi	r25, 0x7F	; 127
 2a6:	aa e1       	ldi	r26, 0x1A	; 26
 2a8:	b6 e0       	ldi	r27, 0x06	; 6
 2aa:	91 50       	subi	r25, 0x01	; 1
 2ac:	a0 40       	sbci	r26, 0x00	; 0
 2ae:	b0 40       	sbci	r27, 0x00	; 0
 2b0:	e1 f7       	brne	.-8      	; 0x2aa <__stack+0x4b>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <__stack+0x55>
 2b4:	00 00       	nop
 2b6:	ec cf       	rjmp	.-40     	; 0x290 <__stack+0x31>

000002b8 <handler>:
			: "+w" (delay), "+a" (tmp)
			: "0" (delay)
	);
}

void handler(Uart *p){
 2b8:	dc 01       	movw	r26, r24
	pWidth=interruptTime;
 2ba:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <interruptTime>
 2be:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <interruptTime+0x1>
 2c2:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <pWidth+0x1>
 2c6:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <pWidth>
	PORTB^=1;
 2ca:	98 b3       	in	r25, 0x18	; 24
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	89 27       	eor	r24, r25
 2d0:	88 bb       	out	0x18, r24	; 24
	uint8_t d = 0;
	// If RX line is high, then we don't see any start bit
	// so interrupt is probably not for us
	if ( !(*p->_PIN&(1<<p->_RX_PIN_NUM)) ) {
 2d2:	18 96       	adiw	r26, 0x08	; 8
 2d4:	ed 91       	ld	r30, X+
 2d6:	fc 91       	ld	r31, X
 2d8:	19 97       	sbiw	r26, 0x09	; 9
 2da:	1a 96       	adiw	r26, 0x0a	; 10
 2dc:	2c 91       	ld	r18, X
 2de:	1a 97       	sbiw	r26, 0x0a	; 10
 2e0:	80 81       	ld	r24, Z
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <handler+0x32>
 2e6:	95 95       	asr	r25
 2e8:	87 95       	ror	r24
 2ea:	2a 95       	dec	r18
 2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <handler+0x2e>
 2ee:	80 fd       	sbrc	r24, 0
 2f0:	73 c0       	rjmp	.+230    	; 0x3d8 <handler+0x120>
		// Wait approximately 1/2 of a bit width to "center" the sample
		tunedDelay(p->_rx_delay_centering);
 2f2:	92 96       	adiw	r26, 0x22	; 34
 2f4:	8d 91       	ld	r24, X+
 2f6:	9c 91       	ld	r25, X
 2f8:	93 97       	sbiw	r26, 0x23	; 35


inline void tunedDelay(uint16_t delay) {
	uint8_t tmp = 0;

	asm volatile("sbiw    %0, 0x01 \n\t"
 2fa:	20 e0       	ldi	r18, 0x00	; 0
 2fc:	01 97       	sbiw	r24, 0x01	; 1
 2fe:	2f ef       	ldi	r18, 0xFF	; 255
 300:	8f 3f       	cpi	r24, 0xFF	; 255
 302:	92 07       	cpc	r25, r18
 304:	d9 f7       	brne	.-10     	; 0x2fc <handler+0x44>
 306:	88 e0       	ldi	r24, 0x08	; 8
 308:	90 e0       	ldi	r25, 0x00	; 0
	if ( !(*p->_PIN&(1<<p->_RX_PIN_NUM)) ) {
		// Wait approximately 1/2 of a bit width to "center" the sample
		tunedDelay(p->_rx_delay_centering);

		// Read each of the 8 bits
		for (uint8_t i = 0x1; i; i <<= 1) {
 30a:	41 e0       	ldi	r20, 0x01	; 1
}

void handler(Uart *p){
	pWidth=interruptTime;
	PORTB^=1;
	uint8_t d = 0;
 30c:	50 e0       	ldi	r21, 0x00	; 0


inline void tunedDelay(uint16_t delay) {
	uint8_t tmp = 0;

	asm volatile("sbiw    %0, 0x01 \n\t"
 30e:	70 e0       	ldi	r23, 0x00	; 0
		// Wait approximately 1/2 of a bit width to "center" the sample
		tunedDelay(p->_rx_delay_centering);

		// Read each of the 8 bits
		for (uint8_t i = 0x1; i; i <<= 1) {
			tunedDelay(p->_rx_delay_intrabit-1);
 310:	90 96       	adiw	r26, 0x20	; 32
 312:	ed 91       	ld	r30, X+
 314:	fc 91       	ld	r31, X
 316:	91 97       	sbiw	r26, 0x21	; 33
 318:	31 97       	sbiw	r30, 0x01	; 1


inline void tunedDelay(uint16_t delay) {
	uint8_t tmp = 0;

	asm volatile("sbiw    %0, 0x01 \n\t"
 31a:	27 2f       	mov	r18, r23
 31c:	31 97       	sbiw	r30, 0x01	; 1
 31e:	2f ef       	ldi	r18, 0xFF	; 255
 320:	ef 3f       	cpi	r30, 0xFF	; 255
 322:	f2 07       	cpc	r31, r18
 324:	d9 f7       	brne	.-10     	; 0x31c <handler+0x64>

		// Read each of the 8 bits
		for (uint8_t i = 0x1; i; i <<= 1) {
			tunedDelay(p->_rx_delay_intrabit-1);
			uint8_t noti = ~i;
			if ((*p->_PIN&(1<<p->_RX_PIN_NUM)))
 326:	18 96       	adiw	r26, 0x08	; 8
 328:	ed 91       	ld	r30, X+
 32a:	fc 91       	ld	r31, X
 32c:	19 97       	sbiw	r26, 0x09	; 9
 32e:	1a 96       	adiw	r26, 0x0a	; 10
 330:	6c 91       	ld	r22, X
 332:	1a 97       	sbiw	r26, 0x0a	; 10
 334:	20 81       	ld	r18, Z
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	02 c0       	rjmp	.+4      	; 0x33e <handler+0x86>
 33a:	35 95       	asr	r19
 33c:	27 95       	ror	r18
 33e:	6a 95       	dec	r22
 340:	e2 f7       	brpl	.-8      	; 0x33a <handler+0x82>
 342:	20 ff       	sbrs	r18, 0
 344:	02 c0       	rjmp	.+4      	; 0x34a <handler+0x92>
			d |= i;
 346:	54 2b       	or	r21, r20
 348:	03 c0       	rjmp	.+6      	; 0x350 <handler+0x98>
			else // else clause added to ensure function timing is ~balanced
			d &= noti;
 34a:	24 2f       	mov	r18, r20
 34c:	20 95       	com	r18
 34e:	52 23       	and	r21, r18
	if ( !(*p->_PIN&(1<<p->_RX_PIN_NUM)) ) {
		// Wait approximately 1/2 of a bit width to "center" the sample
		tunedDelay(p->_rx_delay_centering);

		// Read each of the 8 bits
		for (uint8_t i = 0x1; i; i <<= 1) {
 350:	44 0f       	add	r20, r20
 352:	01 97       	sbiw	r24, 0x01	; 1
 354:	e9 f6       	brne	.-70     	; 0x310 <handler+0x58>
			if ((*p->_PIN&(1<<p->_RX_PIN_NUM)))
			d |= i;
			else // else clause added to ensure function timing is ~balanced
			d &= noti;
		};
		tunedDelay(p->_rx_delay_stopbit-5);
 356:	94 96       	adiw	r26, 0x24	; 36
 358:	8d 91       	ld	r24, X+
 35a:	9c 91       	ld	r25, X
 35c:	95 97       	sbiw	r26, 0x25	; 37
 35e:	05 97       	sbiw	r24, 0x05	; 5


inline void tunedDelay(uint16_t delay) {
	uint8_t tmp = 0;

	asm volatile("sbiw    %0, 0x01 \n\t"
 360:	20 e0       	ldi	r18, 0x00	; 0
 362:	01 97       	sbiw	r24, 0x01	; 1
 364:	2f ef       	ldi	r18, 0xFF	; 255
 366:	8f 3f       	cpi	r24, 0xFF	; 255
 368:	92 07       	cpc	r25, r18
 36a:	d9 f7       	brne	.-10     	; 0x362 <handler+0xaa>
			else // else clause added to ensure function timing is ~balanced
			d &= noti;
		};
		tunedDelay(p->_rx_delay_stopbit-5);
		
		if(!(*p->_PIN&(1<<p->_RX_PIN_NUM))){ //If no stop bit - run timer and measure calibration  impulse width.
 36c:	18 96       	adiw	r26, 0x08	; 8
 36e:	ed 91       	ld	r30, X+
 370:	fc 91       	ld	r31, X
 372:	19 97       	sbiw	r26, 0x09	; 9
 374:	1a 96       	adiw	r26, 0x0a	; 10
 376:	2c 91       	ld	r18, X
 378:	1a 97       	sbiw	r26, 0x0a	; 10
 37a:	80 81       	ld	r24, Z
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	02 c0       	rjmp	.+4      	; 0x384 <handler+0xcc>
 380:	95 95       	asr	r25
 382:	87 95       	ror	r24
 384:	2a 95       	dec	r18
 386:	e2 f7       	brpl	.-8      	; 0x380 <handler+0xc8>
 388:	80 fd       	sbrc	r24, 0
 38a:	03 c0       	rjmp	.+6      	; 0x392 <handler+0xda>
			FLAG=1;	
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <FLAG>
		};
		
		// if buffer full, set the overflow flag and return
		if (((p->_receive_buffer_tail + 1) & _SS_RX_BUFF_MASK) != p->_receive_buffer_head) {  // circular buffer
 392:	5c 96       	adiw	r26, 0x1c	; 28
 394:	8c 91       	ld	r24, X
 396:	5c 97       	sbiw	r26, 0x1c	; 28
 398:	5d 96       	adiw	r26, 0x1d	; 29
 39a:	2c 91       	ld	r18, X
 39c:	5d 97       	sbiw	r26, 0x1d	; 29
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	01 96       	adiw	r24, 0x01	; 1
 3a2:	8f 70       	andi	r24, 0x0F	; 15
 3a4:	99 27       	eor	r25, r25
 3a6:	30 e0       	ldi	r19, 0x00	; 0
 3a8:	82 17       	cp	r24, r18
 3aa:	93 07       	cpc	r25, r19
 3ac:	79 f0       	breq	.+30     	; 0x3cc <handler+0x114>
			// save new data in buffer: tail points to where byte goes
			p->_receive_buffer[p->_receive_buffer_tail] = d; // save new byte
 3ae:	5c 96       	adiw	r26, 0x1c	; 28
 3b0:	8c 91       	ld	r24, X
 3b2:	5c 97       	sbiw	r26, 0x1c	; 28
 3b4:	fd 01       	movw	r30, r26
 3b6:	e8 0f       	add	r30, r24
 3b8:	f1 1d       	adc	r31, r1
 3ba:	54 87       	std	Z+12, r21	; 0x0c
			p->_receive_buffer_tail = (p->_receive_buffer_tail + 1) & _SS_RX_BUFF_MASK;  // circular buffer
 3bc:	5c 96       	adiw	r26, 0x1c	; 28
 3be:	8c 91       	ld	r24, X
 3c0:	5c 97       	sbiw	r26, 0x1c	; 28
 3c2:	8f 5f       	subi	r24, 0xFF	; 255
 3c4:	8f 70       	andi	r24, 0x0F	; 15
 3c6:	5c 96       	adiw	r26, 0x1c	; 28
 3c8:	8c 93       	st	X, r24
 3ca:	08 95       	ret
			} else {
			p->_buffer_overflow = true;
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	5f 96       	adiw	r26, 0x1f	; 31
 3d2:	9c 93       	st	X, r25
 3d4:	8e 93       	st	-X, r24
 3d6:	5e 97       	sbiw	r26, 0x1e	; 30
 3d8:	08 95       	ret

000003da <__vector_2>:
		}
	}
}


ISR(PCINT0_vect) {
 3da:	1f 92       	push	r1
 3dc:	0f 92       	push	r0
 3de:	0f b6       	in	r0, 0x3f	; 63
 3e0:	0f 92       	push	r0
 3e2:	11 24       	eor	r1, r1
 3e4:	2f 93       	push	r18
 3e6:	3f 93       	push	r19
 3e8:	4f 93       	push	r20
 3ea:	5f 93       	push	r21
 3ec:	6f 93       	push	r22
 3ee:	7f 93       	push	r23
 3f0:	8f 93       	push	r24
 3f2:	9f 93       	push	r25
 3f4:	af 93       	push	r26
 3f6:	bf 93       	push	r27
 3f8:	ef 93       	push	r30
 3fa:	ff 93       	push	r31
	interruptTime = TCNT1;
 3fc:	8c b5       	in	r24, 0x2c	; 44
 3fe:	9d b5       	in	r25, 0x2d	; 45
 400:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <interruptTime+0x1>
 404:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <interruptTime>
	if(FLAG){														 //if flag of measurement present - wait for front to end of measuerment. 
 408:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <FLAG>
 40c:	88 23       	and	r24, r24
 40e:	e9 f0       	breq	.+58     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
		if(PINA&(1<<PA4)){
 410:	cc 9b       	sbis	0x19, 4	; 25
 412:	1b c0       	rjmp	.+54     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
			FLAG=0;
 414:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <FLAG>
			if(!calibTimeReading){
 418:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <calibTimeReading>
 41c:	81 11       	cpse	r24, r1
 41e:	12 c0       	rjmp	.+36     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
				PORTB^=1;
 420:	98 b3       	in	r25, 0x18	; 24
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	89 27       	eor	r24, r25
 426:	88 bb       	out	0x18, r24	; 24
				pWidth=(interruptTime - pWidth);
 428:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <interruptTime>
 42c:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <interruptTime+0x1>
 430:	20 91 7d 00 	lds	r18, 0x007D	; 0x80007d <pWidth>
 434:	30 91 7e 00 	lds	r19, 0x007E	; 0x80007e <pWidth+0x1>
 438:	82 1b       	sub	r24, r18
 43a:	93 0b       	sbc	r25, r19
 43c:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <pWidth+0x1>
 440:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <pWidth>
			}
			calibTimeReady=1;
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <calibTimeReady>
			
		}
	}
	
	if(!(PINA&(1<<PA5))){ 
 44a:	cd 99       	sbic	0x19, 5	; 25
 44c:	05 c0       	rjmp	.+10     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
		handler(seial_0);
 44e:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <seial_0>
 452:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <seial_0+0x1>
 456:	30 df       	rcall	.-416    	; 0x2b8 <handler>
	}
	if(!(PINA&(1<<PA4))){												 //If low level on UART RX channel detected - call handler function with uart port as argument.
 458:	cc 99       	sbic	0x19, 4	; 25
 45a:	05 c0       	rjmp	.+10     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
		handler(seial_1);
 45c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <seial_1>
 460:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <seial_1+0x1>
 464:	29 df       	rcall	.-430    	; 0x2b8 <handler>
	}
	
}
 466:	ff 91       	pop	r31
 468:	ef 91       	pop	r30
 46a:	bf 91       	pop	r27
 46c:	af 91       	pop	r26
 46e:	9f 91       	pop	r25
 470:	8f 91       	pop	r24
 472:	7f 91       	pop	r23
 474:	6f 91       	pop	r22
 476:	5f 91       	pop	r21
 478:	4f 91       	pop	r20
 47a:	3f 91       	pop	r19
 47c:	2f 91       	pop	r18
 47e:	0f 90       	pop	r0
 480:	0f be       	out	0x3f, r0	; 63
 482:	0f 90       	pop	r0
 484:	1f 90       	pop	r1
 486:	18 95       	reti

00000488 <softSerialBegin>:



void softSerialBegin(Uart *p) {
 488:	8f 92       	push	r8
 48a:	9f 92       	push	r9
 48c:	af 92       	push	r10
 48e:	bf 92       	push	r11
 490:	cf 92       	push	r12
 492:	df 92       	push	r13
 494:	ef 92       	push	r14
 496:	ff 92       	push	r15
 498:	dc 01       	movw	r26, r24
	
	unsigned i;
	p->_receive_buffer_head = p->_receive_buffer_tail = 0;
 49a:	5c 96       	adiw	r26, 0x1c	; 28
 49c:	1c 92       	st	X, r1
 49e:	5c 97       	sbiw	r26, 0x1c	; 28
 4a0:	5d 96       	adiw	r26, 0x1d	; 29
 4a2:	1c 92       	st	X, r1
 4a4:	5d 97       	sbiw	r26, 0x1d	; 29
	p->_buffer_overflow = false;
 4a6:	5f 96       	adiw	r26, 0x1f	; 31
 4a8:	1c 92       	st	X, r1
 4aa:	1e 92       	st	-X, r1
 4ac:	5e 97       	sbiw	r26, 0x1e	; 30
	*p->_DDR |= (1<<p->_TX_PIN_NUM); // set TX for output
 4ae:	1b 96       	adiw	r26, 0x0b	; 11
 4b0:	2c 91       	ld	r18, X
 4b2:	1b 97       	sbiw	r26, 0x0b	; 11
 4b4:	14 96       	adiw	r26, 0x04	; 4
 4b6:	ed 91       	ld	r30, X+
 4b8:	fc 91       	ld	r31, X
 4ba:	15 97       	sbiw	r26, 0x05	; 5
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	ac 01       	movw	r20, r24
 4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <softSerialBegin+0x40>
 4c4:	44 0f       	add	r20, r20
 4c6:	55 1f       	adc	r21, r21
 4c8:	2a 95       	dec	r18
 4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <softSerialBegin+0x3c>
 4cc:	9a 01       	movw	r18, r20
 4ce:	30 81       	ld	r19, Z
 4d0:	23 2b       	or	r18, r19
 4d2:	20 83       	st	Z, r18
	*p->_DDR &= ~(1<<p->_RX_PIN_NUM); // set RX for input
 4d4:	1a 96       	adiw	r26, 0x0a	; 10
 4d6:	2c 91       	ld	r18, X
 4d8:	1a 97       	sbiw	r26, 0x0a	; 10
 4da:	14 96       	adiw	r26, 0x04	; 4
 4dc:	ed 91       	ld	r30, X+
 4de:	fc 91       	ld	r31, X
 4e0:	15 97       	sbiw	r26, 0x05	; 5
 4e2:	bc 01       	movw	r22, r24
 4e4:	02 c0       	rjmp	.+4      	; 0x4ea <softSerialBegin+0x62>
 4e6:	66 0f       	add	r22, r22
 4e8:	77 1f       	adc	r23, r23
 4ea:	2a 95       	dec	r18
 4ec:	e2 f7       	brpl	.-8      	; 0x4e6 <softSerialBegin+0x5e>
 4ee:	9b 01       	movw	r18, r22
 4f0:	20 95       	com	r18
 4f2:	30 95       	com	r19
 4f4:	30 81       	ld	r19, Z
 4f6:	23 23       	and	r18, r19
 4f8:	20 83       	st	Z, r18
	*p->_PORT |= (1<<p->_RX_PIN_NUM)|(1<<p->_TX_PIN_NUM); // assumes no inverse logic
 4fa:	1a 96       	adiw	r26, 0x0a	; 10
 4fc:	2c 91       	ld	r18, X
 4fe:	1a 97       	sbiw	r26, 0x0a	; 10
 500:	1b 96       	adiw	r26, 0x0b	; 11
 502:	4c 91       	ld	r20, X
 504:	1b 97       	sbiw	r26, 0x0b	; 11
 506:	16 96       	adiw	r26, 0x06	; 6
 508:	ed 91       	ld	r30, X+
 50a:	fc 91       	ld	r31, X
 50c:	17 97       	sbiw	r26, 0x07	; 7
 50e:	bc 01       	movw	r22, r24
 510:	02 c0       	rjmp	.+4      	; 0x516 <softSerialBegin+0x8e>
 512:	66 0f       	add	r22, r22
 514:	77 1f       	adc	r23, r23
 516:	2a 95       	dec	r18
 518:	e2 f7       	brpl	.-8      	; 0x512 <softSerialBegin+0x8a>
 51a:	02 c0       	rjmp	.+4      	; 0x520 <softSerialBegin+0x98>
 51c:	88 0f       	add	r24, r24
 51e:	99 1f       	adc	r25, r25
 520:	4a 95       	dec	r20
 522:	e2 f7       	brpl	.-8      	; 0x51c <softSerialBegin+0x94>
 524:	86 2b       	or	r24, r22
 526:	97 2b       	or	r25, r23
 528:	90 81       	ld	r25, Z
 52a:	89 2b       	or	r24, r25
 52c:	80 83       	st	Z, r24
	

	for (i = 0; i < sizeof(table) / sizeof(table[0]); ++i) {
		
		long baud = pgm_read_dword(&table[i].baud);
 52e:	e2 e2       	ldi	r30, 0x22	; 34
 530:	f0 e0       	ldi	r31, 0x00	; 0
 532:	c5 90       	lpm	r12, Z+
 534:	d5 90       	lpm	r13, Z+
 536:	e5 90       	lpm	r14, Z+
 538:	f4 90       	lpm	r15, Z
		if (baud == p->_SPEED) {
 53a:	4d 91       	ld	r20, X+
 53c:	5d 91       	ld	r21, X+
 53e:	6d 91       	ld	r22, X+
 540:	7c 91       	ld	r23, X
 542:	13 97       	sbiw	r26, 0x03	; 3
 544:	c4 16       	cp	r12, r20
 546:	d5 06       	cpc	r13, r21
 548:	e6 06       	cpc	r14, r22
 54a:	f7 06       	cpc	r15, r23
 54c:	a9 f0       	breq	.+42     	; 0x578 <softSerialBegin+0xf0>
 54e:	4e e2       	ldi	r20, 0x2E	; 46
 550:	50 e0       	ldi	r21, 0x00	; 0
	*p->_DDR |= (1<<p->_TX_PIN_NUM); // set TX for output
	*p->_DDR &= ~(1<<p->_RX_PIN_NUM); // set RX for input
	*p->_PORT |= (1<<p->_RX_PIN_NUM)|(1<<p->_TX_PIN_NUM); // assumes no inverse logic
	

	for (i = 0; i < sizeof(table) / sizeof(table[0]); ++i) {
 552:	21 e0       	ldi	r18, 0x01	; 1
 554:	30 e0       	ldi	r19, 0x00	; 0
		
		long baud = pgm_read_dword(&table[i].baud);
 556:	fa 01       	movw	r30, r20
 558:	85 90       	lpm	r8, Z+
 55a:	95 90       	lpm	r9, Z+
 55c:	a5 90       	lpm	r10, Z+
 55e:	b4 90       	lpm	r11, Z
		if (baud == p->_SPEED) {
 560:	cd 90       	ld	r12, X+
 562:	dd 90       	ld	r13, X+
 564:	ed 90       	ld	r14, X+
 566:	fc 90       	ld	r15, X
 568:	13 97       	sbiw	r26, 0x03	; 3
 56a:	8c 14       	cp	r8, r12
 56c:	9d 04       	cpc	r9, r13
 56e:	ae 04       	cpc	r10, r14
 570:	bf 04       	cpc	r11, r15
 572:	09 f0       	breq	.+2      	; 0x576 <softSerialBegin+0xee>
 574:	5e c0       	rjmp	.+188    	; 0x632 <softSerialBegin+0x1aa>
 576:	02 c0       	rjmp	.+4      	; 0x57c <softSerialBegin+0xf4>
	*p->_DDR |= (1<<p->_TX_PIN_NUM); // set TX for output
	*p->_DDR &= ~(1<<p->_RX_PIN_NUM); // set RX for input
	*p->_PORT |= (1<<p->_RX_PIN_NUM)|(1<<p->_TX_PIN_NUM); // assumes no inverse logic
	

	for (i = 0; i < sizeof(table) / sizeof(table[0]); ++i) {
 578:	20 e0       	ldi	r18, 0x00	; 0
 57a:	30 e0       	ldi	r19, 0x00	; 0
		
		long baud = pgm_read_dword(&table[i].baud);
		if (baud == p->_SPEED) {
			p->_rx_delay_centering = pgm_read_word(&table[i].rx_delay_centering);
 57c:	c9 01       	movw	r24, r18
 57e:	88 0f       	add	r24, r24
 580:	99 1f       	adc	r25, r25
 582:	fc 01       	movw	r30, r24
 584:	e2 0f       	add	r30, r18
 586:	f3 1f       	adc	r31, r19
 588:	ee 0f       	add	r30, r30
 58a:	ff 1f       	adc	r31, r31
 58c:	ee 0f       	add	r30, r30
 58e:	ff 1f       	adc	r31, r31
 590:	ea 5d       	subi	r30, 0xDA	; 218
 592:	ff 4f       	sbci	r31, 0xFF	; 255
 594:	45 91       	lpm	r20, Z+
 596:	54 91       	lpm	r21, Z
 598:	93 96       	adiw	r26, 0x23	; 35
 59a:	5c 93       	st	X, r21
 59c:	4e 93       	st	-X, r20
 59e:	92 97       	sbiw	r26, 0x22	; 34
			p->_rx_delay_intrabit = pgm_read_word(&table[i].rx_delay_intrabit);
 5a0:	fc 01       	movw	r30, r24
 5a2:	e2 0f       	add	r30, r18
 5a4:	f3 1f       	adc	r31, r19
 5a6:	ee 0f       	add	r30, r30
 5a8:	ff 1f       	adc	r31, r31
 5aa:	ee 0f       	add	r30, r30
 5ac:	ff 1f       	adc	r31, r31
 5ae:	e8 5d       	subi	r30, 0xD8	; 216
 5b0:	ff 4f       	sbci	r31, 0xFF	; 255
 5b2:	45 91       	lpm	r20, Z+
 5b4:	54 91       	lpm	r21, Z
 5b6:	91 96       	adiw	r26, 0x21	; 33
 5b8:	5c 93       	st	X, r21
 5ba:	4e 93       	st	-X, r20
 5bc:	90 97       	sbiw	r26, 0x20	; 32
			p->_rx_delay_stopbit = pgm_read_word(&table[i].rx_delay_stopbit);
 5be:	fc 01       	movw	r30, r24
 5c0:	e2 0f       	add	r30, r18
 5c2:	f3 1f       	adc	r31, r19
 5c4:	ee 0f       	add	r30, r30
 5c6:	ff 1f       	adc	r31, r31
 5c8:	ee 0f       	add	r30, r30
 5ca:	ff 1f       	adc	r31, r31
 5cc:	e6 5d       	subi	r30, 0xD6	; 214
 5ce:	ff 4f       	sbci	r31, 0xFF	; 255
 5d0:	45 91       	lpm	r20, Z+
 5d2:	54 91       	lpm	r21, Z
 5d4:	95 96       	adiw	r26, 0x25	; 37
 5d6:	5c 93       	st	X, r21
 5d8:	4e 93       	st	-X, r20
 5da:	94 97       	sbiw	r26, 0x24	; 36
			p->_tx_delay = pgm_read_word(&table[i].tx_delay);
 5dc:	fc 01       	movw	r30, r24
 5de:	e2 0f       	add	r30, r18
 5e0:	f3 1f       	adc	r31, r19
 5e2:	ee 0f       	add	r30, r30
 5e4:	ff 1f       	adc	r31, r31
 5e6:	ee 0f       	add	r30, r30
 5e8:	ff 1f       	adc	r31, r31
 5ea:	e4 5d       	subi	r30, 0xD4	; 212
 5ec:	ff 4f       	sbci	r31, 0xFF	; 255
 5ee:	85 91       	lpm	r24, Z+
 5f0:	94 91       	lpm	r25, Z
 5f2:	97 96       	adiw	r26, 0x27	; 39
 5f4:	9c 93       	st	X, r25
 5f6:	8e 93       	st	-X, r24
 5f8:	96 97       	sbiw	r26, 0x26	; 38
			// Set up RX interrupts, but only if we have a valid RX baud rate
			GIMSK |= (1<<PCIE0);
 5fa:	8b b7       	in	r24, 0x3b	; 59
 5fc:	80 61       	ori	r24, 0x10	; 16
 5fe:	8b bf       	out	0x3b, r24	; 59
			PCMSK0 |= (1<<p->_RX_PIN_NUM);
 600:	1a 96       	adiw	r26, 0x0a	; 10
 602:	3c 91       	ld	r19, X
 604:	1a 97       	sbiw	r26, 0x0a	; 10
 606:	22 b3       	in	r18, 0x12	; 18
 608:	81 e0       	ldi	r24, 0x01	; 1
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	02 c0       	rjmp	.+4      	; 0x612 <softSerialBegin+0x18a>
 60e:	88 0f       	add	r24, r24
 610:	99 1f       	adc	r25, r25
 612:	3a 95       	dec	r19
 614:	e2 f7       	brpl	.-8      	; 0x60e <softSerialBegin+0x186>
 616:	82 2b       	or	r24, r18
 618:	82 bb       	out	0x12, r24	; 18
			tunedDelay(p->_tx_delay);
 61a:	96 96       	adiw	r26, 0x26	; 38
 61c:	8d 91       	ld	r24, X+
 61e:	9c 91       	ld	r25, X
 620:	97 97       	sbiw	r26, 0x27	; 39


inline void tunedDelay(uint16_t delay) {
	uint8_t tmp = 0;

	asm volatile("sbiw    %0, 0x01 \n\t"
 622:	20 e0       	ldi	r18, 0x00	; 0
 624:	01 97       	sbiw	r24, 0x01	; 1
 626:	2f ef       	ldi	r18, 0xFF	; 255
 628:	8f 3f       	cpi	r24, 0xFF	; 255
 62a:	92 07       	cpc	r25, r18
 62c:	d9 f7       	brne	.-10     	; 0x624 <softSerialBegin+0x19c>
			// Set up RX interrupts, but only if we have a valid RX baud rate
			GIMSK |= (1<<PCIE0);
			PCMSK0 |= (1<<p->_RX_PIN_NUM);
			tunedDelay(p->_tx_delay);
			
			sei();
 62e:	78 94       	sei
			
			return;
 630:	08 c0       	rjmp	.+16     	; 0x642 <softSerialBegin+0x1ba>
	*p->_DDR |= (1<<p->_TX_PIN_NUM); // set TX for output
	*p->_DDR &= ~(1<<p->_RX_PIN_NUM); // set RX for input
	*p->_PORT |= (1<<p->_RX_PIN_NUM)|(1<<p->_TX_PIN_NUM); // assumes no inverse logic
	

	for (i = 0; i < sizeof(table) / sizeof(table[0]); ++i) {
 632:	2f 5f       	subi	r18, 0xFF	; 255
 634:	3f 4f       	sbci	r19, 0xFF	; 255
 636:	44 5f       	subi	r20, 0xF4	; 244
 638:	5f 4f       	sbci	r21, 0xFF	; 255
 63a:	2d 30       	cpi	r18, 0x0D	; 13
 63c:	31 05       	cpc	r19, r1
 63e:	09 f0       	breq	.+2      	; 0x642 <softSerialBegin+0x1ba>
 640:	8a cf       	rjmp	.-236    	; 0x556 <softSerialBegin+0xce>
		}
	}

	// No valid rate found
	// Indicate an error
}
 642:	ff 90       	pop	r15
 644:	ef 90       	pop	r14
 646:	df 90       	pop	r13
 648:	cf 90       	pop	r12
 64a:	bf 90       	pop	r11
 64c:	af 90       	pop	r10
 64e:	9f 90       	pop	r9
 650:	8f 90       	pop	r8
 652:	08 95       	ret

00000654 <_exit>:
 654:	f8 94       	cli

00000656 <__stop_program>:
 656:	ff cf       	rjmp	.-2      	; 0x656 <__stop_program>
