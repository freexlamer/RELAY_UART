
modbus_device.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001342  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00001342  000013d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005d  00800060  00800060  000013d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013d6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000200  00000000  00000000  00001406  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002954  00000000  00000000  00001606  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000e99  00000000  00000000  00003f5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001200  00000000  00000000  00004df3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000520  00000000  00000000  00005ff4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008fc  00000000  00000000  00006514  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001aa5  00000000  00000000  00006e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000328  00000000  00000000  000088b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	5e c0       	rjmp	.+188    	; 0xbe <__ctors_end>
       2:	78 c0       	rjmp	.+240    	; 0xf4 <__bad_interrupt>
       4:	bf c5       	rjmp	.+2942   	; 0xb84 <__vector_2>
       6:	76 c0       	rjmp	.+236    	; 0xf4 <__bad_interrupt>
       8:	75 c0       	rjmp	.+234    	; 0xf4 <__bad_interrupt>
       a:	74 c0       	rjmp	.+232    	; 0xf4 <__bad_interrupt>
       c:	73 c0       	rjmp	.+230    	; 0xf4 <__bad_interrupt>
       e:	72 c0       	rjmp	.+228    	; 0xf4 <__bad_interrupt>
      10:	71 c0       	rjmp	.+226    	; 0xf4 <__bad_interrupt>
      12:	70 c0       	rjmp	.+224    	; 0xf4 <__bad_interrupt>
      14:	6f c0       	rjmp	.+222    	; 0xf4 <__bad_interrupt>
      16:	b8 c3       	rjmp	.+1904   	; 0x788 <__vector_11>
      18:	6d c0       	rjmp	.+218    	; 0xf4 <__bad_interrupt>
      1a:	6c c0       	rjmp	.+216    	; 0xf4 <__bad_interrupt>
      1c:	6b c0       	rjmp	.+214    	; 0xf4 <__bad_interrupt>
      1e:	6a c0       	rjmp	.+212    	; 0xf4 <__bad_interrupt>
      20:	69 c0       	rjmp	.+210    	; 0xf4 <__bad_interrupt>

00000022 <__trampolines_end>:
      22:	00 c2       	rjmp	.+1024   	; 0x424 <read_reg+0x2>
      24:	01 00       	.word	0x0001	; ????
      26:	01 00       	.word	0x0001	; ????
      28:	05 00       	.word	0x0005	; ????
      2a:	05 00       	.word	0x0005	; ????
      2c:	03 00       	.word	0x0003	; ????
      2e:	00 e1       	ldi	r16, 0x10	; 16
      30:	00 00       	nop
      32:	01 00       	.word	0x0001	; ????
      34:	0f 00       	.word	0x000f	; ????
      36:	0f 00       	.word	0x000f	; ????
      38:	0d 00       	.word	0x000d	; ????
      3a:	00 96       	adiw	r24, 0x00	; 0
      3c:	00 00       	nop
      3e:	02 00       	.word	0x0002	; ????
      40:	19 00       	.word	0x0019	; ????
      42:	1a 00       	.word	0x001a	; ????
      44:	17 00       	.word	0x0017	; ????
      46:	12 7a       	andi	r17, 0xA2	; 162
      48:	00 00       	nop
      4a:	07 00       	.word	0x0007	; ????
      4c:	20 00       	.word	0x0020	; ????
      4e:	21 00       	.word	0x0021	; ????
      50:	1d 00       	.word	0x001d	; ????
      52:	80 70       	andi	r24, 0x00	; 0
      54:	00 00       	nop
      56:	0b 00       	.word	0x000b	; ????
      58:	23 00       	.word	0x0023	; ????
      5a:	23 00       	.word	0x0023	; ????
      5c:	20 00       	.word	0x0020	; ????
      5e:	00 4b       	sbci	r16, 0xB0	; 176
      60:	00 00       	nop
      62:	14 00       	.word	0x0014	; ????
      64:	37 00       	.word	0x0037	; ????
      66:	37 00       	.word	0x0037	; ????
      68:	34 00       	.word	0x0034	; ????
      6a:	40 38       	cpi	r20, 0x80	; 128
      6c:	00 00       	nop
      6e:	1e 00       	.word	0x001e	; ????
      70:	4b 00       	.word	0x004b	; ????
      72:	4b 00       	.word	0x004b	; ????
      74:	48 00       	.word	0x0048	; ????
      76:	80 25       	eor	r24, r0
      78:	00 00       	nop
      7a:	32 00       	.word	0x0032	; ????
      7c:	72 00       	.word	0x0072	; ????
      7e:	72 00       	.word	0x0072	; ????
      80:	70 00       	.word	0x0070	; ????
      82:	c0 12       	cpse	r12, r16
      84:	00 00       	nop
      86:	6e 00       	.word	0x006e	; ????
      88:	e9 00       	.word	0x00e9	; ????
      8a:	e9 00       	.word	0x00e9	; ????
      8c:	e6 00       	.word	0x00e6	; ????
      8e:	60 09       	sbc	r22, r0
      90:	00 00       	nop
      92:	e5 00       	.word	0x00e5	; ????
      94:	d8 01       	movw	r26, r16
      96:	d8 01       	movw	r26, r16
      98:	d5 01       	movw	r26, r10
      9a:	b0 04       	cpc	r11, r0
      9c:	00 00       	nop
      9e:	d3 01       	movw	r26, r6
      a0:	b4 03       	fmuls	r19, r20
      a2:	b4 03       	fmuls	r19, r20
      a4:	b1 03       	fmuls	r19, r17
      a6:	58 02       	muls	r21, r24
      a8:	00 00       	nop
      aa:	b4 03       	fmuls	r19, r20
      ac:	67 07       	cpc	r22, r23
      ae:	67 07       	cpc	r22, r23
      b0:	62 07       	cpc	r22, r18
      b2:	2c 01       	movw	r4, r24
      b4:	00 00       	nop
      b6:	67 07       	cpc	r22, r23
      b8:	dd 0e       	add	r13, r29
      ba:	dd 0e       	add	r13, r29
      bc:	da 0e       	add	r13, r26

000000be <__ctors_end>:
      be:	11 24       	eor	r1, r1
      c0:	1f be       	out	0x3f, r1	; 63
      c2:	cf e5       	ldi	r28, 0x5F	; 95
      c4:	d2 e0       	ldi	r29, 0x02	; 2
      c6:	de bf       	out	0x3e, r29	; 62
      c8:	cd bf       	out	0x3d, r28	; 61

000000ca <__do_copy_data>:
      ca:	10 e0       	ldi	r17, 0x00	; 0
      cc:	a0 e6       	ldi	r26, 0x60	; 96
      ce:	b0 e0       	ldi	r27, 0x00	; 0
      d0:	e2 e4       	ldi	r30, 0x42	; 66
      d2:	f3 e1       	ldi	r31, 0x13	; 19
      d4:	02 c0       	rjmp	.+4      	; 0xda <__do_copy_data+0x10>
      d6:	05 90       	lpm	r0, Z+
      d8:	0d 92       	st	X+, r0
      da:	a0 36       	cpi	r26, 0x60	; 96
      dc:	b1 07       	cpc	r27, r17
      de:	d9 f7       	brne	.-10     	; 0xd6 <__do_copy_data+0xc>

000000e0 <__do_clear_bss>:
      e0:	20 e0       	ldi	r18, 0x00	; 0
      e2:	a0 e6       	ldi	r26, 0x60	; 96
      e4:	b0 e0       	ldi	r27, 0x00	; 0
      e6:	01 c0       	rjmp	.+2      	; 0xea <.do_clear_bss_start>

000000e8 <.do_clear_bss_loop>:
      e8:	1d 92       	st	X+, r1

000000ea <.do_clear_bss_start>:
      ea:	ad 3b       	cpi	r26, 0xBD	; 189
      ec:	b2 07       	cpc	r27, r18
      ee:	e1 f7       	brne	.-8      	; 0xe8 <.do_clear_bss_loop>
      f0:	08 d2       	rcall	.+1040   	; 0x502 <main>
      f2:	25 c9       	rjmp	.-3510   	; 0xfffff33e <__eeprom_end+0xff7ef33e>

000000f4 <__bad_interrupt>:
      f4:	85 cf       	rjmp	.-246    	; 0x0 <__vectors>

000000f6 <m90e26_init>:
unsigned char m90e26_calculate_chksum(unsigned char buffer_start, unsigned char buffer_end);
void m90e26_send_packet(unsigned char bufferSize);
void wdt_int_enable(unsigned char timeout);

void m90e26_init() {
    m90e26_read_errors = 0;
      f6:	10 92 7f 00 	sts	0x007F, r1
      fa:	10 92 7e 00 	sts	0x007E, r1
    m90e26_write_errors = 0;
      fe:	10 92 71 00 	sts	0x0071, r1
     102:	10 92 70 00 	sts	0x0070, r1
     106:	08 95       	ret

00000108 <m90e26_calculate_chksum>:

}

unsigned char m90e26_calculate_chksum(unsigned char buffer_start, unsigned char buffer_end) {
	unsigned char temp=0;
	for (unsigned char i = buffer_start; i < buffer_end; i++) {
     108:	86 17       	cp	r24, r22
     10a:	58 f4       	brcc	.+22     	; 0x122 <m90e26_calculate_chksum+0x1a>
	

}

unsigned char m90e26_calculate_chksum(unsigned char buffer_start, unsigned char buffer_end) {
	unsigned char temp=0;
     10c:	90 e0       	ldi	r25, 0x00	; 0
	for (unsigned char i = buffer_start; i < buffer_end; i++) {
		temp += m90e26_frame[i];
     10e:	e8 2f       	mov	r30, r24
     110:	f0 e0       	ldi	r31, 0x00	; 0
     112:	e0 58       	subi	r30, 0x80	; 128
     114:	ff 4f       	sbci	r31, 0xFF	; 255
     116:	20 81       	ld	r18, Z
     118:	92 0f       	add	r25, r18

}

unsigned char m90e26_calculate_chksum(unsigned char buffer_start, unsigned char buffer_end) {
	unsigned char temp=0;
	for (unsigned char i = buffer_start; i < buffer_end; i++) {
     11a:	8f 5f       	subi	r24, 0xFF	; 255
     11c:	86 13       	cpse	r24, r22
     11e:	f7 cf       	rjmp	.-18     	; 0x10e <m90e26_calculate_chksum+0x6>
     120:	01 c0       	rjmp	.+2      	; 0x124 <m90e26_calculate_chksum+0x1c>
	

}

unsigned char m90e26_calculate_chksum(unsigned char buffer_start, unsigned char buffer_end) {
	unsigned char temp=0;
     122:	90 e0       	ldi	r25, 0x00	; 0
	for (unsigned char i = buffer_start; i < buffer_end; i++) {
		temp += m90e26_frame[i];
	}
	return temp;
}
     124:	89 2f       	mov	r24, r25
     126:	08 95       	ret

00000128 <m90e26_send_packet>:

void m90e26_send_packet(unsigned char bufferSize)
{
     128:	0f 93       	push	r16
     12a:	1f 93       	push	r17
     12c:	cf 93       	push	r28
     12e:	df 93       	push	r29
     130:	08 2f       	mov	r16, r24

  for (unsigned char i = 0; i < bufferSize; i++) {
     132:	88 23       	and	r24, r24
     134:	81 f0       	breq	.+32     	; 0x156 <m90e26_send_packet+0x2e>
     136:	c0 e8       	ldi	r28, 0x80	; 128
     138:	d0 e0       	ldi	r29, 0x00	; 0
     13a:	10 e0       	ldi	r17, 0x00	; 0
    (*m90e26_SerialWrite)(m90e26_frame[i], m90e26_serial_port);
     13c:	60 91 6e 00 	lds	r22, 0x006E
     140:	70 91 6f 00 	lds	r23, 0x006F
     144:	e0 91 72 00 	lds	r30, 0x0072
     148:	f0 91 73 00 	lds	r31, 0x0073
     14c:	89 91       	ld	r24, Y+
     14e:	09 95       	icall
}

void m90e26_send_packet(unsigned char bufferSize)
{

  for (unsigned char i = 0; i < bufferSize; i++) {
     150:	1f 5f       	subi	r17, 0xFF	; 255
     152:	10 13       	cpse	r17, r16
     154:	f3 cf       	rjmp	.-26     	; 0x13c <m90e26_send_packet+0x14>
    (*m90e26_SerialWrite)(m90e26_frame[i], m90e26_serial_port);
  }

     156:	df 91       	pop	r29
     158:	cf 91       	pop	r28
     15a:	1f 91       	pop	r17
     15c:	0f 91       	pop	r16
     15e:	08 95       	ret

00000160 <m90e26_write_reg>:
void m90e26_init() {
    m90e26_read_errors = 0;
    m90e26_write_errors = 0;
}

bool m90e26_write_reg(unsigned char address, unsigned int data) {
     160:	af 92       	push	r10
     162:	bf 92       	push	r11
     164:	cf 92       	push	r12
     166:	df 92       	push	r13
     168:	ef 92       	push	r14
     16a:	ff 92       	push	r15
     16c:	0f 93       	push	r16
     16e:	1f 93       	push	r17
	//int rx_data;

	m90e26_frame[0] = M90E26_START_MARKER;
     170:	9e ef       	ldi	r25, 0xFE	; 254
     172:	90 93 80 00 	sts	0x0080, r25
	m90e26_frame[1] = address & 0x7F; // address and read
     176:	8f 77       	andi	r24, 0x7F	; 127
     178:	80 93 81 00 	sts	0x0081, r24
	m90e26_frame[2] = data >> 8; // DATA_MSB
     17c:	70 93 82 00 	sts	0x0082, r23
	m90e26_frame[3] = data & 0x00FF; // DATA_LSB
     180:	60 93 83 00 	sts	0x0083, r22
	m90e26_frame[4] = m90e26_calculate_chksum(1, 4);
     184:	64 e0       	ldi	r22, 0x04	; 4
     186:	81 e0       	ldi	r24, 0x01	; 1
     188:	bf df       	rcall	.-130    	; 0x108 <m90e26_calculate_chksum>
     18a:	80 93 84 00 	sts	0x0084, r24

	m90e26_send_packet(5);
     18e:	85 e0       	ldi	r24, 0x05	; 5
     190:	cb df       	rcall	.-106    	; 0x128 <m90e26_send_packet>

	start_time = millis();
     192:	49 d3       	rcall	.+1682   	; 0x826 <millis>
     194:	20 93 76 00 	sts	0x0076, r18
     198:	30 93 77 00 	sts	0x0077, r19
     19c:	40 93 78 00 	sts	0x0078, r20
     1a0:	50 93 79 00 	sts	0x0079, r21
     1a4:	60 93 7a 00 	sts	0x007A, r22
     1a8:	70 93 7b 00 	sts	0x007B, r23
     1ac:	80 93 7c 00 	sts	0x007C, r24
     1b0:	90 93 7d 00 	sts	0x007D, r25
	while (!softSerialAvailable(m90e26_serial_port)) {
     1b4:	27 c0       	rjmp	.+78     	; 0x204 <m90e26_write_reg+0xa4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1b6:	89 ef       	ldi	r24, 0xF9	; 249
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	01 97       	sbiw	r24, 0x01	; 1
     1bc:	f1 f7       	brne	.-4      	; 0x1ba <m90e26_write_reg+0x5a>
     1be:	00 c0       	rjmp	.+0      	; 0x1c0 <m90e26_write_reg+0x60>
     1c0:	00 00       	nop
		_delay_ms(ANSWER_DELAY_MS);
		if ((millis() - start_time) > TIMEOUT_READ_WRITE_MS) {
     1c2:	31 d3       	rcall	.+1634   	; 0x826 <millis>
     1c4:	a0 90 76 00 	lds	r10, 0x0076
     1c8:	b0 90 77 00 	lds	r11, 0x0077
     1cc:	c0 90 78 00 	lds	r12, 0x0078
     1d0:	d0 90 79 00 	lds	r13, 0x0079
     1d4:	e0 90 7a 00 	lds	r14, 0x007A
     1d8:	f0 90 7b 00 	lds	r15, 0x007B
     1dc:	00 91 7c 00 	lds	r16, 0x007C
     1e0:	10 91 7d 00 	lds	r17, 0x007D
     1e4:	81 d8       	rcall	.-3838   	; 0xfffff2e8 <__eeprom_end+0xff7ef2e8>
     1e6:	aa e0       	ldi	r26, 0x0A	; 10
     1e8:	88 d8       	rcall	.-3824   	; 0xfffff2fa <__eeprom_end+0xff7ef2fa>
     1ea:	61 f0       	breq	.+24     	; 0x204 <m90e26_write_reg+0xa4>
     1ec:	58 f0       	brcs	.+22     	; 0x204 <m90e26_write_reg+0xa4>
			m90e26_write_errors++;
     1ee:	80 91 70 00 	lds	r24, 0x0070
     1f2:	90 91 71 00 	lds	r25, 0x0071
     1f6:	01 96       	adiw	r24, 0x01	; 1
     1f8:	90 93 71 00 	sts	0x0071, r25
     1fc:	80 93 70 00 	sts	0x0070, r24
			return false;
     200:	80 e0       	ldi	r24, 0x00	; 0
     202:	20 c0       	rjmp	.+64     	; 0x244 <m90e26_write_reg+0xe4>
	m90e26_frame[4] = m90e26_calculate_chksum(1, 4);

	m90e26_send_packet(5);

	start_time = millis();
	while (!softSerialAvailable(m90e26_serial_port)) {
     204:	80 91 6e 00 	lds	r24, 0x006E
     208:	90 91 6f 00 	lds	r25, 0x006F
     20c:	2e d6       	rcall	.+3164   	; 0xe6a <softSerialAvailable>
     20e:	89 2b       	or	r24, r25
     210:	91 f2       	breq	.-92     	; 0x1b6 <m90e26_write_reg+0x56>
			m90e26_write_errors++;
			return false;
		}
	}

	unsigned char ack = (unsigned char)(*m90e26_SerialRead)(m90e26_serial_port);
     212:	e0 91 6c 00 	lds	r30, 0x006C
     216:	f0 91 6d 00 	lds	r31, 0x006D
     21a:	80 91 6e 00 	lds	r24, 0x006E
     21e:	90 91 6f 00 	lds	r25, 0x006F
     222:	09 95       	icall
	if (m90e26_frame[4] == ack) {
     224:	90 91 84 00 	lds	r25, 0x0084
     228:	98 17       	cp	r25, r24
     22a:	59 f0       	breq	.+22     	; 0x242 <m90e26_write_reg+0xe2>
		return true;
	}
	else {
		m90e26_write_errors++;
     22c:	80 91 70 00 	lds	r24, 0x0070
     230:	90 91 71 00 	lds	r25, 0x0071
     234:	01 96       	adiw	r24, 0x01	; 1
     236:	90 93 71 00 	sts	0x0071, r25
     23a:	80 93 70 00 	sts	0x0070, r24
		return false;
     23e:	80 e0       	ldi	r24, 0x00	; 0
     240:	01 c0       	rjmp	.+2      	; 0x244 <m90e26_write_reg+0xe4>
		}
	}

	unsigned char ack = (unsigned char)(*m90e26_SerialRead)(m90e26_serial_port);
	if (m90e26_frame[4] == ack) {
		return true;
     242:	81 e0       	ldi	r24, 0x01	; 1
	else {
		m90e26_write_errors++;
		return false;
	}

}
     244:	1f 91       	pop	r17
     246:	0f 91       	pop	r16
     248:	ff 90       	pop	r15
     24a:	ef 90       	pop	r14
     24c:	df 90       	pop	r13
     24e:	cf 90       	pop	r12
     250:	bf 90       	pop	r11
     252:	af 90       	pop	r10
     254:	08 95       	ret

00000256 <m90e26_read_reg>:

bool m90e26_read_reg(unsigned char address, unsigned int *data) {
     256:	6f 92       	push	r6
     258:	7f 92       	push	r7
     25a:	8f 92       	push	r8
     25c:	9f 92       	push	r9
     25e:	af 92       	push	r10
     260:	bf 92       	push	r11
     262:	cf 92       	push	r12
     264:	df 92       	push	r13
     266:	ef 92       	push	r14
     268:	ff 92       	push	r15
     26a:	0f 93       	push	r16
     26c:	1f 93       	push	r17
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
     272:	3b 01       	movw	r6, r22
	int rx_data;
	char i;

	m90e26_frame[0] = M90E26_START_MARKER;
     274:	9e ef       	ldi	r25, 0xFE	; 254
     276:	90 93 80 00 	sts	0x0080, r25
	m90e26_frame[1] = address | 0x80; // address and write
     27a:	80 68       	ori	r24, 0x80	; 128
     27c:	80 93 81 00 	sts	0x0081, r24
	m90e26_frame[2] = m90e26_frame[1];
     280:	80 93 82 00 	sts	0x0082, r24

	m90e26_send_packet(3);
     284:	83 e0       	ldi	r24, 0x03	; 3
     286:	50 df       	rcall	.-352    	; 0x128 <m90e26_send_packet>
     288:	c0 e8       	ldi	r28, 0x80	; 128
     28a:	d0 e0       	ldi	r29, 0x00	; 0
     28c:	0f 2e       	mov	r0, r31
     28e:	f3 e8       	ldi	r31, 0x83	; 131
     290:	8f 2e       	mov	r8, r31
     292:	f0 e0       	ldi	r31, 0x00	; 0
     294:	9f 2e       	mov	r9, r31
     296:	f0 2d       	mov	r31, r0

	//wdt_int_enable(TIMEOUT_READ_WDTO);
	for (unsigned char i = 0; i < 3; i++) {
		start_time = millis();
     298:	c6 d2       	rcall	.+1420   	; 0x826 <millis>
     29a:	20 93 76 00 	sts	0x0076, r18
     29e:	30 93 77 00 	sts	0x0077, r19
     2a2:	40 93 78 00 	sts	0x0078, r20
     2a6:	50 93 79 00 	sts	0x0079, r21
     2aa:	60 93 7a 00 	sts	0x007A, r22
     2ae:	70 93 7b 00 	sts	0x007B, r23
     2b2:	80 93 7c 00 	sts	0x007C, r24
     2b6:	90 93 7d 00 	sts	0x007D, r25
		while (!softSerialAvailable(m90e26_serial_port)) {
     2ba:	27 c0       	rjmp	.+78     	; 0x30a <__stack+0xab>
     2bc:	89 ef       	ldi	r24, 0xF9	; 249
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	01 97       	sbiw	r24, 0x01	; 1
     2c2:	f1 f7       	brne	.-4      	; 0x2c0 <__stack+0x61>
     2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <__stack+0x67>
     2c6:	00 00       	nop
			_delay_ms(ANSWER_DELAY_MS);
			if (millis() - start_time > TIMEOUT_READ_WRITE_MS) {
     2c8:	ae d2       	rcall	.+1372   	; 0x826 <millis>
     2ca:	a0 90 76 00 	lds	r10, 0x0076
     2ce:	b0 90 77 00 	lds	r11, 0x0077
     2d2:	c0 90 78 00 	lds	r12, 0x0078
     2d6:	d0 90 79 00 	lds	r13, 0x0079
     2da:	e0 90 7a 00 	lds	r14, 0x007A
     2de:	f0 90 7b 00 	lds	r15, 0x007B
     2e2:	00 91 7c 00 	lds	r16, 0x007C
     2e6:	10 91 7d 00 	lds	r17, 0x007D
     2ea:	fe d7       	rcall	.+4092   	; 0x12e8 <__subdi3>
     2ec:	aa e0       	ldi	r26, 0x0A	; 10
     2ee:	05 d8       	rcall	.-4086   	; 0xfffff2fa <__eeprom_end+0xff7ef2fa>
     2f0:	61 f0       	breq	.+24     	; 0x30a <__stack+0xab>
     2f2:	58 f0       	brcs	.+22     	; 0x30a <__stack+0xab>
				m90e26_read_errors++;
     2f4:	80 91 7e 00 	lds	r24, 0x007E
     2f8:	90 91 7f 00 	lds	r25, 0x007F
     2fc:	01 96       	adiw	r24, 0x01	; 1
     2fe:	90 93 7f 00 	sts	0x007F, r25
     302:	80 93 7e 00 	sts	0x007E, r24
				return false;
     306:	80 e0       	ldi	r24, 0x00	; 0
     308:	33 c0       	rjmp	.+102    	; 0x370 <__stack+0x111>
	m90e26_send_packet(3);

	//wdt_int_enable(TIMEOUT_READ_WDTO);
	for (unsigned char i = 0; i < 3; i++) {
		start_time = millis();
		while (!softSerialAvailable(m90e26_serial_port)) {
     30a:	80 91 6e 00 	lds	r24, 0x006E
     30e:	90 91 6f 00 	lds	r25, 0x006F
     312:	ab d5       	rcall	.+2902   	; 0xe6a <softSerialAvailable>
     314:	89 2b       	or	r24, r25
     316:	91 f2       	breq	.-92     	; 0x2bc <__stack+0x5d>
				m90e26_read_errors++;
				return false;
			}
		}

		m90e26_frame[i] = (unsigned char)(*m90e26_SerialRead)(m90e26_serial_port);
     318:	e0 91 6c 00 	lds	r30, 0x006C
     31c:	f0 91 6d 00 	lds	r31, 0x006D
     320:	80 91 6e 00 	lds	r24, 0x006E
     324:	90 91 6f 00 	lds	r25, 0x006F
     328:	09 95       	icall
     32a:	89 93       	st	Y+, r24
	m90e26_frame[2] = m90e26_frame[1];

	m90e26_send_packet(3);

	//wdt_int_enable(TIMEOUT_READ_WDTO);
	for (unsigned char i = 0; i < 3; i++) {
     32c:	c8 15       	cp	r28, r8
     32e:	d9 05       	cpc	r29, r9
     330:	09 f0       	breq	.+2      	; 0x334 <__stack+0xd5>
     332:	b2 cf       	rjmp	.-156    	; 0x298 <__stack+0x39>
		m90e26_frame[i] = (unsigned char)(*m90e26_SerialRead)(m90e26_serial_port);

	}


	if (m90e26_frame[2] == m90e26_calculate_chksum(0,2)) {
     334:	c0 91 82 00 	lds	r28, 0x0082
     338:	62 e0       	ldi	r22, 0x02	; 2
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	e5 de       	rcall	.-566    	; 0x108 <m90e26_calculate_chksum>
     33e:	c8 13       	cpse	r28, r24
     340:	0d c0       	rjmp	.+26     	; 0x35c <__stack+0xfd>
		*data = m90e26_frame[1] | (m90e26_frame[0] << 8);
     342:	80 91 80 00 	lds	r24, 0x0080
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	98 2f       	mov	r25, r24
     34a:	88 27       	eor	r24, r24
     34c:	20 91 81 00 	lds	r18, 0x0081
     350:	82 2b       	or	r24, r18
     352:	f3 01       	movw	r30, r6
     354:	91 83       	std	Z+1, r25	; 0x01
     356:	80 83       	st	Z, r24
		return true;
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	0a c0       	rjmp	.+20     	; 0x370 <__stack+0x111>
	}
	else {
		m90e26_read_errors++;
     35c:	80 91 7e 00 	lds	r24, 0x007E
     360:	90 91 7f 00 	lds	r25, 0x007F
     364:	01 96       	adiw	r24, 0x01	; 1
     366:	90 93 7f 00 	sts	0x007F, r25
     36a:	80 93 7e 00 	sts	0x007E, r24
		return false;
     36e:	80 e0       	ldi	r24, 0x00	; 0
	}
	

}
     370:	df 91       	pop	r29
     372:	cf 91       	pop	r28
     374:	1f 91       	pop	r17
     376:	0f 91       	pop	r16
     378:	ff 90       	pop	r15
     37a:	ef 90       	pop	r14
     37c:	df 90       	pop	r13
     37e:	cf 90       	pop	r12
     380:	bf 90       	pop	r11
     382:	af 90       	pop	r10
     384:	9f 90       	pop	r9
     386:	8f 90       	pop	r8
     388:	7f 90       	pop	r7
     38a:	6f 90       	pop	r6
     38c:	08 95       	ret

0000038e <led_set>:
        return false;
}


void led_set(bool stat) {
    if (stat) {
     38e:	88 23       	and	r24, r24
     390:	11 f0       	breq	.+4      	; 0x396 <led_set+0x8>
        STATUS_LED_PORT |= (1 << STATUS_LED_PIN);
     392:	c2 9a       	sbi	0x18, 2	; 24
     394:	08 95       	ret
    }
    else {
        STATUS_LED_PORT &= ~(1 << STATUS_LED_PIN);
     396:	c2 98       	cbi	0x18, 2	; 24
     398:	08 95       	ret

0000039a <led_toggle>:
    }
}

void led_toggle() {
    // reverse state of STATUS led
    STATUS_LED_PORT ^= (1 << STATUS_LED_PIN);
     39a:	98 b3       	in	r25, 0x18	; 24
     39c:	84 e0       	ldi	r24, 0x04	; 4
     39e:	89 27       	eor	r24, r25
     3a0:	88 bb       	out	0x18, r24	; 24
     3a2:	08 95       	ret

000003a4 <update_relay_r1>:

void led_toggle();

bool update_relay_r1(unsigned int data){
    // update state of Relay 1
    relay_r1_reg = data;
     3a4:	80 93 9c 00 	sts	0x009C, r24
     3a8:	90 93 9d 00 	sts	0x009D, r25
    if ((relay_r1_reg & RELAY_REG_R1)>0) {
     3ac:	80 ff       	sbrs	r24, 0
     3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <update_relay_r1+0x10>
        RELAY_R1_PORT |= (1 << RELAY_R1);
     3b0:	da 9a       	sbi	0x1b, 2	; 27
     3b2:	01 c0       	rjmp	.+2      	; 0x3b6 <update_relay_r1+0x12>
    }
    else {
        RELAY_R1_PORT &= ~(1 << RELAY_R1);
     3b4:	da 98       	cbi	0x1b, 2	; 27
    }

    return true;
}
     3b6:	81 e0       	ldi	r24, 0x01	; 1
     3b8:	08 95       	ret

000003ba <update_relay_r2>:

bool update_relay_r2(unsigned int data){
    // update state of Relay 2
    relay_r2_reg = data;
     3ba:	80 93 96 00 	sts	0x0096, r24
     3be:	90 93 97 00 	sts	0x0097, r25
    if ((relay_r2_reg & RELAY_REG_R2)>0) {
     3c2:	80 ff       	sbrs	r24, 0
     3c4:	02 c0       	rjmp	.+4      	; 0x3ca <update_relay_r2+0x10>
        RELAY_R2_PORT |= (1 << RELAY_R2);
     3c6:	db 9a       	sbi	0x1b, 3	; 27
     3c8:	01 c0       	rjmp	.+2      	; 0x3cc <update_relay_r2+0x12>
    }
    else {
        RELAY_R2_PORT &= ~(1 << RELAY_R2);
     3ca:	db 98       	cbi	0x1b, 3	; 27
    }
    return true;
}
     3cc:	81 e0       	ldi	r24, 0x01	; 1
     3ce:	08 95       	ret

000003d0 <write_reg>:
bool write_reg(unsigned int address, unsigned int data){
    /*
        Write for read access to devices and data.
    */

    if ((address>=M90E26_START_ADDRESS) && (address<=M90E26_END_ADDRESS)) {
     3d0:	80 37       	cpi	r24, 0x70	; 112
     3d2:	91 05       	cpc	r25, r1
     3d4:	10 f4       	brcc	.+4      	; 0x3da <write_reg+0xa>
        return m90e26_write_reg(address, data);;
     3d6:	c4 de       	rcall	.-632    	; 0x160 <m90e26_write_reg>
     3d8:	08 95       	ret
    } 
    else if (address == RELAY_REG_START_ADDRESS) {
     3da:	80 38       	cpi	r24, 0x80	; 128
     3dc:	91 05       	cpc	r25, r1
     3de:	19 f4       	brne	.+6      	; 0x3e6 <write_reg+0x16>
        return update_relay_r1(data);
     3e0:	cb 01       	movw	r24, r22
     3e2:	e0 df       	rcall	.-64     	; 0x3a4 <update_relay_r1>
     3e4:	08 95       	ret
    }
    else if (address == RELAY_REG_END_ADDRESS) {
     3e6:	81 38       	cpi	r24, 0x81	; 129
     3e8:	91 05       	cpc	r25, r1
     3ea:	19 f4       	brne	.+6      	; 0x3f2 <write_reg+0x22>
        return update_relay_r2(data);
     3ec:	cb 01       	movw	r24, r22
     3ee:	e5 df       	rcall	.-54     	; 0x3ba <update_relay_r2>
     3f0:	08 95       	ret
    }
    else if ((address>=DS18B20_START_ADDRESS) && (address<=DS18B20_END_ADDRESS)) {
        return false;
     3f2:	80 e0       	ldi	r24, 0x00	; 0
        eeprom_write_byte(OSCCAL_EEADDR, data);
        return true;
    }
    else 
        return false;
}
     3f4:	08 95       	ret

000003f6 <get_temperature_sensor>:
        RELAY_R2_PORT &= ~(1 << RELAY_R2);
    }
    return true;
}

bool get_temperature_sensor(unsigned int address, unsigned int *data) {
     3f6:	fb 01       	movw	r30, r22
    if (address == DS18B20_START_ADDRESS) {
     3f8:	84 38       	cpi	r24, 0x84	; 132
     3fa:	91 05       	cpc	r25, r1
     3fc:	29 f4       	brne	.+10     	; 0x408 <get_temperature_sensor+0x12>
        return DS18B20_get(data, &ds18b20_cfg);
     3fe:	6e e8       	ldi	r22, 0x8E	; 142
     400:	70 e0       	ldi	r23, 0x00	; 0
     402:	cf 01       	movw	r24, r30
     404:	6b d2       	rcall	.+1238   	; 0x8dc <DS18B20_get>
     406:	08 95       	ret
    }
    else if (address == DS18B20_END_ADDRESS) {
     408:	85 38       	cpi	r24, 0x85	; 133
     40a:	91 05       	cpc	r25, r1
     40c:	41 f4       	brne	.+16     	; 0x41e <get_temperature_sensor+0x28>
        *data = ds18b20_cfg;
     40e:	80 91 8e 00 	lds	r24, 0x008E
     412:	90 91 8f 00 	lds	r25, 0x008F
     416:	91 83       	std	Z+1, r25	; 0x01
     418:	80 83       	st	Z, r24
        return true;
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	08 95       	ret
    }
    else
        return false;
     41e:	80 e0       	ldi	r24, 0x00	; 0
}
     420:	08 95       	ret

00000422 <read_reg>:

bool read_reg(unsigned int address, unsigned int *data){
     422:	cf 93       	push	r28
     424:	df 93       	push	r29
     426:	eb 01       	movw	r28, r22
    /*
        Proxy for read access to devices and data.
    */

    if ((address>=M90E26_START_ADDRESS) && (address<=M90E26_END_ADDRESS)) {
     428:	80 37       	cpi	r24, 0x70	; 112
     42a:	91 05       	cpc	r25, r1
     42c:	10 f4       	brcc	.+4      	; 0x432 <read_reg+0x10>
        return m90e26_read_reg(address, data);
     42e:	13 df       	rcall	.-474    	; 0x256 <m90e26_read_reg>
     430:	5c c0       	rjmp	.+184    	; 0x4ea <read_reg+0xc8>
    } 
    else if (address == RELAY_REG_START_ADDRESS) {
     432:	80 38       	cpi	r24, 0x80	; 128
     434:	91 05       	cpc	r25, r1
     436:	41 f4       	brne	.+16     	; 0x448 <read_reg+0x26>
        *data = relay_r1_reg;
     438:	80 91 9c 00 	lds	r24, 0x009C
     43c:	90 91 9d 00 	lds	r25, 0x009D
     440:	99 83       	std	Y+1, r25	; 0x01
     442:	88 83       	st	Y, r24
        return true;
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	51 c0       	rjmp	.+162    	; 0x4ea <read_reg+0xc8>
    }
    else if (address == RELAY_REG_END_ADDRESS) {
     448:	81 38       	cpi	r24, 0x81	; 129
     44a:	91 05       	cpc	r25, r1
     44c:	41 f4       	brne	.+16     	; 0x45e <read_reg+0x3c>
        *data = relay_r2_reg;
     44e:	80 91 96 00 	lds	r24, 0x0096
     452:	90 91 97 00 	lds	r25, 0x0097
     456:	99 83       	std	Y+1, r25	; 0x01
     458:	88 83       	st	Y, r24
        return true;
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	46 c0       	rjmp	.+140    	; 0x4ea <read_reg+0xc8>
    }
    else if ((address>=DS18B20_START_ADDRESS) && (address<=DS18B20_END_ADDRESS)) {
     45e:	9c 01       	movw	r18, r24
     460:	24 58       	subi	r18, 0x84	; 132
     462:	31 09       	sbc	r19, r1
     464:	22 30       	cpi	r18, 0x02	; 2
     466:	31 05       	cpc	r19, r1
     468:	10 f4       	brcc	.+4      	; 0x46e <read_reg+0x4c>
        return get_temperature_sensor(address, data);
     46a:	c5 df       	rcall	.-118    	; 0x3f6 <get_temperature_sensor>
     46c:	3e c0       	rjmp	.+124    	; 0x4ea <read_reg+0xc8>
    }
    else if (address==ERRORS_M90E26_READ) {
     46e:	88 38       	cpi	r24, 0x88	; 136
     470:	91 05       	cpc	r25, r1
     472:	41 f4       	brne	.+16     	; 0x484 <read_reg+0x62>
        *data = m90e26_read_errors;
     474:	80 91 7e 00 	lds	r24, 0x007E
     478:	90 91 7f 00 	lds	r25, 0x007F
     47c:	99 83       	std	Y+1, r25	; 0x01
     47e:	88 83       	st	Y, r24
        return true;
     480:	81 e0       	ldi	r24, 0x01	; 1
     482:	33 c0       	rjmp	.+102    	; 0x4ea <read_reg+0xc8>
    }
    else if (address==ERRORS_M90E26_WRITE) {
     484:	89 38       	cpi	r24, 0x89	; 137
     486:	91 05       	cpc	r25, r1
     488:	41 f4       	brne	.+16     	; 0x49a <read_reg+0x78>
        *data = m90e26_write_errors;
     48a:	80 91 70 00 	lds	r24, 0x0070
     48e:	90 91 71 00 	lds	r25, 0x0071
     492:	99 83       	std	Y+1, r25	; 0x01
     494:	88 83       	st	Y, r24
        return true;
     496:	81 e0       	ldi	r24, 0x01	; 1
     498:	28 c0       	rjmp	.+80     	; 0x4ea <read_reg+0xc8>
    }
    else if (address==ERRORS_MODBUS_CRC) {
     49a:	8b 38       	cpi	r24, 0x8B	; 139
     49c:	91 05       	cpc	r25, r1
     49e:	41 f4       	brne	.+16     	; 0x4b0 <read_reg+0x8e>
        *data = modbus_crc_errors;
     4a0:	80 91 a1 00 	lds	r24, 0x00A1
     4a4:	90 91 a2 00 	lds	r25, 0x00A2
     4a8:	99 83       	std	Y+1, r25	; 0x01
     4aa:	88 83       	st	Y, r24
        return true;
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	1d c0       	rjmp	.+58     	; 0x4ea <read_reg+0xc8>
    }
    else if (address==ERRORS_MODBUS_ALL) {
     4b0:	8a 38       	cpi	r24, 0x8A	; 138
     4b2:	91 05       	cpc	r25, r1
     4b4:	39 f4       	brne	.+14     	; 0x4c4 <read_reg+0xa2>
        *data = modbus_error_count;
     4b6:	80 91 8d 00 	lds	r24, 0x008D
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	99 83       	std	Y+1, r25	; 0x01
     4be:	88 83       	st	Y, r24
        return true;
     4c0:	81 e0       	ldi	r24, 0x01	; 1
     4c2:	13 c0       	rjmp	.+38     	; 0x4ea <read_reg+0xc8>
    }
    else if (address == DEBUG_REGS_START_ADDRESS) {
     4c4:	80 39       	cpi	r24, 0x90	; 144
     4c6:	91 05       	cpc	r25, r1
     4c8:	29 f4       	brne	.+10     	; 0x4d4 <read_reg+0xb2>
        *data = OSCCAL;
     4ca:	81 b7       	in	r24, 0x31	; 49
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	99 83       	std	Y+1, r25	; 0x01
     4d0:	88 83       	st	Y, r24
     4d2:	09 c0       	rjmp	.+18     	; 0x4e6 <read_reg+0xc4>
    }
    else if (address == DEBUG_REGS_START_ADDRESS+1) {
     4d4:	81 39       	cpi	r24, 0x91	; 145
     4d6:	91 05       	cpc	r25, r1
     4d8:	39 f4       	brne	.+14     	; 0x4e8 <read_reg+0xc6>
        *data = eeprom_read_byte(OSCCAL_EEADDR);
     4da:	8f ef       	ldi	r24, 0xFF	; 255
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	19 d7       	rcall	.+3634   	; 0x1312 <__eerd_byte_tn84a>
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	99 83       	std	Y+1, r25	; 0x01
     4e4:	88 83       	st	Y, r24
     4e6:	01 c0       	rjmp	.+2      	; 0x4ea <read_reg+0xc8>
    }
    else 
        return false;
     4e8:	80 e0       	ldi	r24, 0x00	; 0
}
     4ea:	df 91       	pop	r29
     4ec:	cf 91       	pop	r28
     4ee:	08 95       	ret

000004f0 <relay_init>:
    /* 
    Output LOW to relay pins.
    Than setup pin to output mode.
    */

    update_relay_r1(0);
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	57 df       	rcall	.-338    	; 0x3a4 <update_relay_r1>
    update_relay_r2(0);
     4f6:	80 e0       	ldi	r24, 0x00	; 0
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	5f df       	rcall	.-322    	; 0x3ba <update_relay_r2>
    RELAY_R1_DDR |= (1 << RELAY_R1);
     4fc:	d2 9a       	sbi	0x1a, 2	; 26
    RELAY_R2_DDR |= (1 << RELAY_R2);
     4fe:	d3 9a       	sbi	0x1a, 3	; 26
     500:	08 95       	ret

00000502 <main>:
}


int main(void)
{
     502:	cf 93       	push	r28
     504:	df 93       	push	r29
     506:	cd b7       	in	r28, 0x3d	; 61
     508:	de b7       	in	r29, 0x3e	; 62
     50a:	c4 5a       	subi	r28, 0xA4	; 164
     50c:	d1 09       	sbc	r29, r1
     50e:	0f b6       	in	r0, 0x3f	; 63
     510:	f8 94       	cli
     512:	de bf       	out	0x3e, r29	; 62
     514:	0f be       	out	0x3f, r0	; 63
     516:	cd bf       	out	0x3d, r28	; 61
    uint8_t tmp;

    // Ports initialization
    // Status led pin
    STATUS_LED_DDR = (1 << STATUS_LED_PIN);
     518:	84 e0       	ldi	r24, 0x04	; 4
     51a:	87 bb       	out	0x17, r24	; 23

    // internal chronometer initialization
    millis_setup();
     51c:	73 d1       	rcall	.+742    	; 0x804 <millis_setup>

    while(1) {
        perform_main_loop_exit = false;

        Uart serial0 = {9600, &DDRA, &PORTA, &PINA, PA5, PA6};
     51e:	9e 01       	movw	r18, r28
     520:	27 5d       	subi	r18, 0xD7	; 215
     522:	3f 4f       	sbci	r19, 0xFF	; 255
     524:	cf 55       	subi	r28, 0x5F	; 95
     526:	df 4f       	sbci	r29, 0xFF	; 255
     528:	39 83       	std	Y+1, r19	; 0x01
     52a:	28 83       	st	Y, r18
     52c:	c1 5a       	subi	r28, 0xA1	; 161
     52e:	d0 40       	sbci	r29, 0x00	; 0
     530:	0f 2e       	mov	r0, r31
     532:	f0 e8       	ldi	r31, 0x80	; 128
     534:	cf 2e       	mov	r12, r31
     536:	f5 e2       	ldi	r31, 0x25	; 37
     538:	df 2e       	mov	r13, r31
     53a:	e1 2c       	mov	r14, r1
     53c:	f1 2c       	mov	r15, r1
     53e:	f0 2d       	mov	r31, r0
     540:	0f 2e       	mov	r0, r31
     542:	fa e3       	ldi	r31, 0x3A	; 58
     544:	2f 2e       	mov	r2, r31
     546:	31 2c       	mov	r3, r1
     548:	f0 2d       	mov	r31, r0
     54a:	0f 2e       	mov	r0, r31
     54c:	f9 e3       	ldi	r31, 0x39	; 57
     54e:	4f 2e       	mov	r4, r31
     550:	51 2c       	mov	r5, r1
     552:	f0 2d       	mov	r31, r0
     554:	5e 01       	movw	r10, r28
     556:	39 e7       	ldi	r19, 0x79	; 121
     558:	a3 0e       	add	r10, r19
     55a:	b1 1c       	adc	r11, r1
        Uart serial1 = {9600, &DDRA, &PORTA, &PINA, PA0, PA1};
     55c:	ce 01       	movw	r24, r28
     55e:	01 96       	adiw	r24, 0x01	; 1
     560:	cd 55       	subi	r28, 0x5D	; 93
     562:	df 4f       	sbci	r29, 0xFF	; 255
     564:	99 83       	std	Y+1, r25	; 0x01
     566:	88 83       	st	Y, r24
     568:	c3 5a       	subi	r28, 0xA3	; 163
     56a:	d0 40       	sbci	r29, 0x00	; 0
     56c:	3e 01       	movw	r6, r28
     56e:	91 e5       	ldi	r25, 0x51	; 81
     570:	69 0e       	add	r6, r25
     572:	71 1c       	adc	r7, r1
                _delay_ms(250);
            }

            osc_calibration_toggle_led = &led_toggle;
            osc_calibration_serial_port = serial_0;
            osc_calibration_SerialWrite =  &softSerialWrite;
     574:	0f e3       	ldi	r16, 0x3F	; 63
     576:	17 e0       	ldi	r17, 0x07	; 7

    // internal chronometer initialization
    millis_setup();

    while(1) {
        perform_main_loop_exit = false;
     578:	10 92 61 00 	sts	0x0061, r1

        Uart serial0 = {9600, &DDRA, &PORTA, &PINA, PA5, PA6};
     57c:	88 e2       	ldi	r24, 0x28	; 40
     57e:	cf 55       	subi	r28, 0x5F	; 95
     580:	df 4f       	sbci	r29, 0xFF	; 255
     582:	e8 81       	ld	r30, Y
     584:	f9 81       	ldd	r31, Y+1	; 0x01
     586:	c1 5a       	subi	r28, 0xA1	; 161
     588:	d0 40       	sbci	r29, 0x00	; 0
     58a:	28 2f       	mov	r18, r24
     58c:	11 92       	st	Z+, r1
     58e:	2a 95       	dec	r18
     590:	e9 f7       	brne	.-6      	; 0x58c <main+0x8a>
     592:	c9 a6       	std	Y+41, r12	; 0x29
     594:	da a6       	std	Y+42, r13	; 0x2a
     596:	eb a6       	std	Y+43, r14	; 0x2b
     598:	fc a6       	std	Y+44, r15	; 0x2c
     59a:	3e a6       	std	Y+46, r3	; 0x2e
     59c:	2d a6       	std	Y+45, r2	; 0x2d
     59e:	eb e3       	ldi	r30, 0x3B	; 59
     5a0:	f0 e0       	ldi	r31, 0x00	; 0
     5a2:	f8 ab       	std	Y+48, r31	; 0x30
     5a4:	ef a7       	std	Y+47, r30	; 0x2f
     5a6:	5a aa       	std	Y+50, r5	; 0x32
     5a8:	49 aa       	std	Y+49, r4	; 0x31
     5aa:	95 e0       	ldi	r25, 0x05	; 5
     5ac:	9b ab       	std	Y+51, r25	; 0x33
     5ae:	96 e0       	ldi	r25, 0x06	; 6
     5b0:	9c ab       	std	Y+52, r25	; 0x34
     5b2:	98 e2       	ldi	r25, 0x28	; 40
     5b4:	fe 01       	movw	r30, r28
     5b6:	b9 96       	adiw	r30, 0x29	; 41
     5b8:	d5 01       	movw	r26, r10
     5ba:	01 90       	ld	r0, Z+
     5bc:	0d 92       	st	X+, r0
     5be:	9a 95       	dec	r25
     5c0:	e1 f7       	brne	.-8      	; 0x5ba <main+0xb8>
        Uart serial1 = {9600, &DDRA, &PORTA, &PINA, PA0, PA1};
     5c2:	cd 55       	subi	r28, 0x5D	; 93
     5c4:	df 4f       	sbci	r29, 0xFF	; 255
     5c6:	e8 81       	ld	r30, Y
     5c8:	f9 81       	ldd	r31, Y+1	; 0x01
     5ca:	c3 5a       	subi	r28, 0xA3	; 163
     5cc:	d0 40       	sbci	r29, 0x00	; 0
     5ce:	11 92       	st	Z+, r1
     5d0:	8a 95       	dec	r24
     5d2:	e9 f7       	brne	.-6      	; 0x5ce <main+0xcc>
     5d4:	c9 82       	std	Y+1, r12	; 0x01
     5d6:	da 82       	std	Y+2, r13	; 0x02
     5d8:	eb 82       	std	Y+3, r14	; 0x03
     5da:	fc 82       	std	Y+4, r15	; 0x04
     5dc:	3e 82       	std	Y+6, r3	; 0x06
     5de:	2d 82       	std	Y+5, r2	; 0x05
     5e0:	2b e3       	ldi	r18, 0x3B	; 59
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	38 87       	std	Y+8, r19	; 0x08
     5e6:	2f 83       	std	Y+7, r18	; 0x07
     5e8:	5a 86       	std	Y+10, r5	; 0x0a
     5ea:	49 86       	std	Y+9, r4	; 0x09
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	8c 87       	std	Y+12, r24	; 0x0c
     5f0:	88 e2       	ldi	r24, 0x28	; 40
     5f2:	fe 01       	movw	r30, r28
     5f4:	31 96       	adiw	r30, 0x01	; 1
     5f6:	d3 01       	movw	r26, r6
     5f8:	01 90       	ld	r0, Z+
     5fa:	0d 92       	st	X+, r0
     5fc:	8a 95       	dec	r24
     5fe:	e1 f7       	brne	.-8      	; 0x5f8 <main+0xf6>

        serial_0 = &serial0;
     600:	b0 92 75 00 	sts	0x0075, r11
     604:	a0 92 74 00 	sts	0x0074, r10
        serial_1 = &serial1;
     608:	70 92 87 00 	sts	0x0087, r7
     60c:	60 92 86 00 	sts	0x0086, r6

        #ifdef OSCCAL_CALIBRATION
        // OSCCAL calibration
        if (perform_forced_calibration || !update_osccal_from_eeprom()) {
     610:	80 91 60 00 	lds	r24, 0x0060
     614:	81 11       	cpse	r24, r1
     616:	b2 c0       	rjmp	.+356    	; 0x77c <main+0x27a>
     618:	a3 d1       	rcall	.+838    	; 0x960 <update_osccal_from_eeprom>
     61a:	81 11       	cpse	r24, r1
     61c:	3a c0       	rjmp	.+116    	; 0x692 <main+0x190>
     61e:	ae c0       	rjmp	.+348    	; 0x77c <main+0x27a>
            for (int i=0; i<10; i++) {
                led_toggle();
     620:	bc de       	rcall	.-648    	; 0x39a <led_toggle>
     622:	87 ea       	ldi	r24, 0xA7	; 167
     624:	91 e6       	ldi	r25, 0x61	; 97
     626:	01 97       	sbiw	r24, 0x01	; 1
     628:	f1 f7       	brne	.-4      	; 0x626 <main+0x124>
     62a:	00 c0       	rjmp	.+0      	; 0x62c <main+0x12a>
     62c:	00 00       	nop
                _delay_ms(100);
                led_toggle();
     62e:	b5 de       	rcall	.-662    	; 0x39a <led_toggle>
     630:	e3 e2       	ldi	r30, 0x23	; 35
     632:	f4 ef       	ldi	r31, 0xF4	; 244
     634:	31 97       	sbiw	r30, 0x01	; 1
     636:	f1 f7       	brne	.-4      	; 0x634 <main+0x132>
     638:	00 c0       	rjmp	.+0      	; 0x63a <main+0x138>
     63a:	00 00       	nop
     63c:	f1 e0       	ldi	r31, 0x01	; 1
     63e:	8f 1a       	sub	r8, r31
     640:	91 08       	sbc	r9, r1
        serial_1 = &serial1;

        #ifdef OSCCAL_CALIBRATION
        // OSCCAL calibration
        if (perform_forced_calibration || !update_osccal_from_eeprom()) {
            for (int i=0; i<10; i++) {
     642:	81 14       	cp	r8, r1
     644:	91 04       	cpc	r9, r1
     646:	61 f7       	brne	.-40     	; 0x620 <main+0x11e>
                _delay_ms(100);
                led_toggle();
                _delay_ms(250);
            }

            osc_calibration_toggle_led = &led_toggle;
     648:	2d ec       	ldi	r18, 0xCD	; 205
     64a:	31 e0       	ldi	r19, 0x01	; 1
     64c:	30 93 a0 00 	sts	0x00A0, r19
     650:	20 93 9f 00 	sts	0x009F, r18
            osc_calibration_serial_port = serial_0;
     654:	80 91 74 00 	lds	r24, 0x0074
     658:	90 91 75 00 	lds	r25, 0x0075
     65c:	90 93 95 00 	sts	0x0095, r25
     660:	80 93 94 00 	sts	0x0094, r24
            osc_calibration_SerialWrite =  &softSerialWrite;
     664:	10 93 9b 00 	sts	0x009B, r17
     668:	00 93 9a 00 	sts	0x009A, r16
            softSerialBegin(serial_0);
     66c:	06 d3       	rcall	.+1548   	; 0xc7a <softSerialBegin>

            tmp = perform_calibration();
     66e:	a4 d1       	rcall	.+840    	; 0x9b8 <perform_calibration>
     670:	98 2e       	mov	r9, r24

            //softSerialBegin(serial_0);
            softSerialWrite(0xFF, serial_0);
     672:	60 91 74 00 	lds	r22, 0x0074
     676:	70 91 75 00 	lds	r23, 0x0075
     67a:	8f ef       	ldi	r24, 0xFF	; 255
     67c:	00 d4       	rcall	.+2048   	; 0xe7e <softSerialWrite>
            softSerialWrite(tmp, serial_0);
     67e:	60 91 74 00 	lds	r22, 0x0074
     682:	70 91 75 00 	lds	r23, 0x0075
     686:	89 2d       	mov	r24, r9
     688:	fa d3       	rcall	.+2036   	; 0xe7e <softSerialWrite>

            write_from_osccal_to_eeprom();
     68a:	91 d1       	rcall	.+802    	; 0x9ae <write_from_osccal_to_eeprom>

            softSerialEnd();
     68c:	d8 d3       	rcall	.+1968   	; 0xe3e <softSerialEnd>
            perform_forced_calibration = false;
     68e:	10 92 60 00 	sts	0x0060, r1
		#else
		update_osccal_from_eeprom();
        #endif

        // Relays pins
        relay_init();
     692:	2e df       	rcall	.-420    	; 0x4f0 <relay_init>

        // UARTs initialization

        softSerialBegin(serial_0);
     694:	80 91 74 00 	lds	r24, 0x0074
     698:	90 91 75 00 	lds	r25, 0x0075
     69c:	ee d2       	rcall	.+1500   	; 0xc7a <softSerialBegin>
        softSerialBegin(serial_1);
     69e:	80 91 86 00 	lds	r24, 0x0086
     6a2:	90 91 87 00 	lds	r25, 0x0087
     6a6:	e9 d2       	rcall	.+1490   	; 0xc7a <softSerialBegin>

        // MODBUS initialization
        slaveID = MODBUS_SELF_ADDRESS;
     6a8:	80 e1       	ldi	r24, 0x10	; 16
     6aa:	80 93 9e 00 	sts	0x009E, r24

        modbus_serial_port = serial_0;
     6ae:	80 91 74 00 	lds	r24, 0x0074
     6b2:	90 91 75 00 	lds	r25, 0x0075
     6b6:	90 93 99 00 	sts	0x0099, r25
     6ba:	80 93 98 00 	sts	0x0098, r24
        modbus_SerialWrite = &softSerialWrite;
     6be:	10 93 91 00 	sts	0x0091, r17
     6c2:	00 93 90 00 	sts	0x0090, r16
        modbus_read_reg = &read_reg;
     6c6:	81 e1       	ldi	r24, 0x11	; 17
     6c8:	92 e0       	ldi	r25, 0x02	; 2
     6ca:	90 93 8c 00 	sts	0x008C, r25
     6ce:	80 93 8b 00 	sts	0x008B, r24
        modbus_write_reg = &write_reg;
     6d2:	e8 ee       	ldi	r30, 0xE8	; 232
     6d4:	f1 e0       	ldi	r31, 0x01	; 1
     6d6:	f0 93 8a 00 	sts	0x008A, r31
     6da:	e0 93 89 00 	sts	0x0089, r30
        modbus_led = &led_set;
     6de:	87 ec       	ldi	r24, 0xC7	; 199
     6e0:	91 e0       	ldi	r25, 0x01	; 1
     6e2:	90 93 93 00 	sts	0x0093, r25
     6e6:	80 93 92 00 	sts	0x0092, r24
        modbus_init();
     6ea:	57 d4       	rcall	.+2222   	; 0xf9a <modbus_init>

        // M90E26 initialization
        m90e26_serial_port = serial_1;
     6ec:	80 91 86 00 	lds	r24, 0x0086
     6f0:	90 91 87 00 	lds	r25, 0x0087
     6f4:	90 93 6f 00 	sts	0x006F, r25
     6f8:	80 93 6e 00 	sts	0x006E, r24
        m90e26_SerialWrite = &softSerialWrite;
     6fc:	10 93 73 00 	sts	0x0073, r17
     700:	00 93 72 00 	sts	0x0072, r16
        m90e26_SerialRead = &softSerialRead;
     704:	81 e2       	ldi	r24, 0x21	; 33
     706:	97 e0       	ldi	r25, 0x07	; 7
     708:	90 93 6d 00 	sts	0x006D, r25
     70c:	80 93 6c 00 	sts	0x006C, r24
        m90e26_init();
     710:	f2 dc       	rcall	.-1564   	; 0xf6 <m90e26_init>

        led_toggle();
     712:	43 de       	rcall	.-890    	; 0x39a <led_toggle>

        sei();
     714:	78 94       	sei
                pull_port(softSerialRead(serial_0));
            }

            #ifdef OSCCAL_FORCE_CALIBRATION
            if (FLAG) {
                perform_main_loop_exit = true;
     716:	99 24       	eor	r9, r9
     718:	93 94       	inc	r9
        sei();

        /* loop */
        while (1) {
            #ifdef OSCCAL_FORCE_CALIBRATION
            if (perform_main_loop_exit) 
     71a:	80 91 61 00 	lds	r24, 0x0061
     71e:	81 11       	cpse	r24, r1
     720:	18 c0       	rjmp	.+48     	; 0x752 <main+0x250>
                break;
            #endif
          
            if (softSerialAvailable(serial_0)) {
     722:	80 91 74 00 	lds	r24, 0x0074
     726:	90 91 75 00 	lds	r25, 0x0075
     72a:	9f d3       	rcall	.+1854   	; 0xe6a <softSerialAvailable>
     72c:	89 2b       	or	r24, r25
     72e:	31 f0       	breq	.+12     	; 0x73c <main+0x23a>
                pull_port(softSerialRead(serial_0));
     730:	80 91 74 00 	lds	r24, 0x0074
     734:	90 91 75 00 	lds	r25, 0x0075
     738:	84 d3       	rcall	.+1800   	; 0xe42 <softSerialRead>
     73a:	cc d4       	rcall	.+2456   	; 0x10d4 <pull_port>
            }

            #ifdef OSCCAL_FORCE_CALIBRATION
            if (FLAG) {
     73c:	80 91 88 00 	lds	r24, 0x0088
     740:	88 23       	and	r24, r24
     742:	59 f3       	breq	.-42     	; 0x71a <main+0x218>
                perform_main_loop_exit = true;
     744:	90 92 61 00 	sts	0x0061, r9
                perform_forced_calibration = true;
     748:	90 92 60 00 	sts	0x0060, r9
                FLAG = 0;
     74c:	10 92 88 00 	sts	0x0088, r1
     750:	e4 cf       	rjmp	.-56     	; 0x71a <main+0x218>
        sei();

        /* loop */
        while (1) {
            #ifdef OSCCAL_FORCE_CALIBRATION
            if (perform_main_loop_exit) 
     752:	0f 2e       	mov	r0, r31
     754:	fa e0       	ldi	r31, 0x0A	; 10
     756:	8f 2e       	mov	r8, r31
     758:	f0 2d       	mov	r31, r0
     75a:	91 2c       	mov	r9, r1
            #endif

        }

        for (int i=0; i<10; i++) {
            led_toggle();
     75c:	1e de       	rcall	.-964    	; 0x39a <led_toggle>
     75e:	8b e7       	ldi	r24, 0x7B	; 123
     760:	92 e9       	ldi	r25, 0x92	; 146
     762:	01 97       	sbiw	r24, 0x01	; 1
     764:	f1 f7       	brne	.-4      	; 0x762 <main+0x260>
     766:	00 c0       	rjmp	.+0      	; 0x768 <main+0x266>
     768:	00 00       	nop
     76a:	91 e0       	ldi	r25, 0x01	; 1
     76c:	89 1a       	sub	r8, r25
     76e:	91 08       	sbc	r9, r1
            }
            #endif

        }

        for (int i=0; i<10; i++) {
     770:	81 14       	cp	r8, r1
     772:	91 04       	cpc	r9, r1
     774:	99 f7       	brne	.-26     	; 0x75c <main+0x25a>
            led_toggle();
            _delay_ms(150);
        }
        
        softSerialEnd();
     776:	63 d3       	rcall	.+1734   	; 0xe3e <softSerialEnd>
        millis_end();
     778:	4f d0       	rcall	.+158    	; 0x818 <millis_end>
    }
     77a:	fe ce       	rjmp	.-516    	; 0x578 <main+0x76>
    RELAY_R2_DDR |= (1 << RELAY_R2);
}


int main(void)
{
     77c:	0f 2e       	mov	r0, r31
     77e:	fa e0       	ldi	r31, 0x0A	; 10
     780:	8f 2e       	mov	r8, r31
     782:	f0 2d       	mov	r31, r0
     784:	91 2c       	mov	r9, r1
     786:	4c cf       	rjmp	.-360    	; 0x620 <main+0x11e>

00000788 <__vector_11>:

#include "millis.h"

uint64_t _millis = 0;

ISR(TIM0_OVF_vect) {
     788:	1f 92       	push	r1
     78a:	0f 92       	push	r0
     78c:	0f b6       	in	r0, 0x3f	; 63
     78e:	0f 92       	push	r0
     790:	11 24       	eor	r1, r1
     792:	2f 93       	push	r18
     794:	3f 93       	push	r19
     796:	4f 93       	push	r20
     798:	5f 93       	push	r21
     79a:	6f 93       	push	r22
     79c:	7f 93       	push	r23
     79e:	8f 93       	push	r24
     7a0:	9f 93       	push	r25
     7a2:	af 93       	push	r26
  _millis++;
     7a4:	20 91 62 00 	lds	r18, 0x0062
     7a8:	30 91 63 00 	lds	r19, 0x0063
     7ac:	40 91 64 00 	lds	r20, 0x0064
     7b0:	50 91 65 00 	lds	r21, 0x0065
     7b4:	60 91 66 00 	lds	r22, 0x0066
     7b8:	70 91 67 00 	lds	r23, 0x0067
     7bc:	80 91 68 00 	lds	r24, 0x0068
     7c0:	90 91 69 00 	lds	r25, 0x0069
     7c4:	a1 e0       	ldi	r26, 0x01	; 1
     7c6:	84 d5       	rcall	.+2824   	; 0x12d0 <__adddi3_s8>
     7c8:	20 93 62 00 	sts	0x0062, r18
     7cc:	30 93 63 00 	sts	0x0063, r19
     7d0:	40 93 64 00 	sts	0x0064, r20
     7d4:	50 93 65 00 	sts	0x0065, r21
     7d8:	60 93 66 00 	sts	0x0066, r22
     7dc:	70 93 67 00 	sts	0x0067, r23
     7e0:	80 93 68 00 	sts	0x0068, r24
     7e4:	90 93 69 00 	sts	0x0069, r25
}
     7e8:	af 91       	pop	r26
     7ea:	9f 91       	pop	r25
     7ec:	8f 91       	pop	r24
     7ee:	7f 91       	pop	r23
     7f0:	6f 91       	pop	r22
     7f2:	5f 91       	pop	r21
     7f4:	4f 91       	pop	r20
     7f6:	3f 91       	pop	r19
     7f8:	2f 91       	pop	r18
     7fa:	0f 90       	pop	r0
     7fc:	0f be       	out	0x3f, r0	; 63
     7fe:	0f 90       	pop	r0
     800:	1f 90       	pop	r1
     802:	18 95       	reti

00000804 <millis_setup>:

void millis_setup() {
  /* interrup setup */
  OCR0A = TIMER0_TOP;
     804:	8d e7       	ldi	r24, 0x7D	; 125
     806:	86 bf       	out	0x36, r24	; 54
  // (F_CPU/TIMER_PRESCALE)/1000

  TCCR0A = (1<<WGM01)|(1<<WGM00);
     808:	83 e0       	ldi	r24, 0x03	; 3
     80a:	80 bf       	out	0x30, r24	; 48
  TCCR0B = TIMER0_PRESCALER|(1<<WGM02);
     80c:	8b e0       	ldi	r24, 0x0B	; 11
     80e:	83 bf       	out	0x33, r24	; 51
  // enable timer overflow interrupt
  TIMSK0  |= 1<<TOIE0;
     810:	89 b7       	in	r24, 0x39	; 57
     812:	81 60       	ori	r24, 0x01	; 1
     814:	89 bf       	out	0x39, r24	; 57
     816:	08 95       	ret

00000818 <millis_end>:
}

void millis_end() {
  TIMSK0  &= ~(1<<TOIE0);
     818:	89 b7       	in	r24, 0x39	; 57
     81a:	8e 7f       	andi	r24, 0xFE	; 254
     81c:	89 bf       	out	0x39, r24	; 57

  OCR0A = 0;
     81e:	16 be       	out	0x36, r1	; 54
  TCCR0A = 0;
     820:	10 be       	out	0x30, r1	; 48
  TCCR0B = 0;
     822:	13 be       	out	0x33, r1	; 51
     824:	08 95       	ret

00000826 <millis>:
}

uint64_t millis() {
  uint64_t m;

  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     826:	ef b7       	in	r30, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     828:	f8 94       	cli
    m = _millis;
     82a:	20 91 62 00 	lds	r18, 0x0062
     82e:	30 91 63 00 	lds	r19, 0x0063
     832:	40 91 64 00 	lds	r20, 0x0064
     836:	50 91 65 00 	lds	r21, 0x0065
     83a:	60 91 66 00 	lds	r22, 0x0066
     83e:	70 91 67 00 	lds	r23, 0x0067
     842:	80 91 68 00 	lds	r24, 0x0068
     846:	90 91 69 00 	lds	r25, 0x0069
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     84a:	ef bf       	out	0x3f, r30	; 63
  }
  return m;
     84c:	08 95       	ret

0000084e <DS18B20_init>:
// Инициализация DS18B20
bool DS18B20_init(void)
{
	unsigned char OK_Flag;

	DS18B20_DDR |= (1 << DS18B20_DQ); // PIN mode output
     84e:	d7 9a       	sbi	0x1a, 7	; 26
	DS18B20_PORT &= ~(1 << DS18B20_DQ); // Set LOW
     850:	df 98       	cbi	0x1b, 7	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     852:	83 ed       	ldi	r24, 0xD3	; 211
     854:	93 e0       	ldi	r25, 0x03	; 3
     856:	01 97       	sbiw	r24, 0x01	; 1
     858:	f1 f7       	brne	.-4      	; 0x856 <DS18B20_init+0x8>
     85a:	00 c0       	rjmp	.+0      	; 0x85c <DS18B20_init+0xe>
     85c:	00 00       	nop
	_delay_us(490);
	DS18B20_DDR &= ~(1 << DS18B20_DQ); // PIN mode input
     85e:	d7 98       	cbi	0x1a, 7	; 26
     860:	95 eb       	ldi	r25, 0xB5	; 181
     862:	9a 95       	dec	r25
     864:	f1 f7       	brne	.-4      	; 0x862 <DS18B20_init+0x14>
     866:	00 00       	nop
	_delay_us(68);
	OK_Flag = (DS18B20_PIN & (1 << DS18B20_DQ)); // read presence pulse
     868:	89 b3       	in	r24, 0x19	; 25
     86a:	eb e4       	ldi	r30, 0x4B	; 75
     86c:	f3 e0       	ldi	r31, 0x03	; 3
     86e:	31 97       	sbiw	r30, 0x01	; 1
     870:	f1 f7       	brne	.-4      	; 0x86e <DS18B20_init+0x20>
     872:	00 c0       	rjmp	.+0      	; 0x874 <DS18B20_init+0x26>
     874:	00 00       	nop
	_delay_us(422);

	// OK_Flag = 0 sensor connected
	// OK_Flag = 1 sensor disconnected
	return OK_Flag==0;
     876:	80 95       	com	r24
}
     878:	88 1f       	adc	r24, r24
     87a:	88 27       	eor	r24, r24
     87c:	88 1f       	adc	r24, r24
     87e:	08 95       	ret

00000880 <DS18B20_read>:

// Функция чтения байта из DS18B20
unsigned char DS18B20_read(void)
{
     880:	98 e0       	ldi	r25, 0x08	; 8
	unsigned char i, data = 0;
     882:	80 e0       	ldi	r24, 0x00	; 0
	for(i = 0; i < 8; i++)
	{
		DS18B20_DDR |= (1 << DS18B20_DQ); // PC0 - выход
     884:	d7 9a       	sbi	0x1a, 7	; 26
     886:	25 e0       	ldi	r18, 0x05	; 5
     888:	2a 95       	dec	r18
     88a:	f1 f7       	brne	.-4      	; 0x888 <DS18B20_read+0x8>
     88c:	00 00       	nop
		_delay_us(2);
		DS18B20_DDR &= ~(1 << DS18B20_DQ); // PC0 - вход
     88e:	d7 98       	cbi	0x1a, 7	; 26
     890:	2a e0       	ldi	r18, 0x0A	; 10
     892:	2a 95       	dec	r18
     894:	f1 f7       	brne	.-4      	; 0x892 <DS18B20_read+0x12>
     896:	00 c0       	rjmp	.+0      	; 0x898 <DS18B20_read+0x18>
		_delay_us(4);
		data = data >> 1; // Следующий бит
     898:	86 95       	lsr	r24
		if(DS18B20_PIN & (1 << DS18B20_DQ)) data |= 0x80;
     89a:	cf 99       	sbic	0x19, 7	; 25
     89c:	80 68       	ori	r24, 0x80	; 128
     89e:	25 ea       	ldi	r18, 0xA5	; 165
     8a0:	2a 95       	dec	r18
     8a2:	f1 f7       	brne	.-4      	; 0x8a0 <DS18B20_read+0x20>
     8a4:	00 00       	nop
     8a6:	91 50       	subi	r25, 0x01	; 1

// Функция чтения байта из DS18B20
unsigned char DS18B20_read(void)
{
	unsigned char i, data = 0;
	for(i = 0; i < 8; i++)
     8a8:	69 f7       	brne	.-38     	; 0x884 <DS18B20_read+0x4>
		data = data >> 1; // Следующий бит
		if(DS18B20_PIN & (1 << DS18B20_DQ)) data |= 0x80;
		_delay_us(62);
	}
	return data;
}
     8aa:	08 95       	ret

000008ac <DS18B20_write>:

// Функция записи байта в DS18B20
void DS18B20_write(unsigned char data)
{
     8ac:	98 e0       	ldi	r25, 0x08	; 8
	unsigned char i;
	for(i = 0; i < 8; i++)
	{
		DS18B20_DDR |= (1 << DS18B20_DQ); // PC0 - выход
     8ae:	d7 9a       	sbi	0x1a, 7	; 26
     8b0:	25 e0       	ldi	r18, 0x05	; 5
     8b2:	2a 95       	dec	r18
     8b4:	f1 f7       	brne	.-4      	; 0x8b2 <DS18B20_write+0x6>
     8b6:	00 00       	nop
		_delay_us(2);
		if(data & 0x01) DS18B20_DDR &= ~(1 << DS18B20_DQ);
     8b8:	80 ff       	sbrs	r24, 0
     8ba:	02 c0       	rjmp	.+4      	; 0x8c0 <DS18B20_write+0x14>
     8bc:	d7 98       	cbi	0x1a, 7	; 26
     8be:	01 c0       	rjmp	.+2      	; 0x8c2 <DS18B20_write+0x16>
		else DS18B20_DDR |= (1 << DS18B20_DQ);
     8c0:	d7 9a       	sbi	0x1a, 7	; 26
		data = data >> 1; // Следующий бит
     8c2:	86 95       	lsr	r24
     8c4:	25 ea       	ldi	r18, 0xA5	; 165
     8c6:	2a 95       	dec	r18
     8c8:	f1 f7       	brne	.-4      	; 0x8c6 <DS18B20_write+0x1a>
     8ca:	00 00       	nop
		_delay_us(62);
		DS18B20_DDR &= ~(1 << DS18B20_DQ); // PC0 - вход
     8cc:	d7 98       	cbi	0x1a, 7	; 26
     8ce:	25 e0       	ldi	r18, 0x05	; 5
     8d0:	2a 95       	dec	r18
     8d2:	f1 f7       	brne	.-4      	; 0x8d0 <DS18B20_write+0x24>
     8d4:	00 00       	nop
     8d6:	91 50       	subi	r25, 0x01	; 1

// Функция записи байта в DS18B20
void DS18B20_write(unsigned char data)
{
	unsigned char i;
	for(i = 0; i < 8; i++)
     8d8:	51 f7       	brne	.-44     	; 0x8ae <DS18B20_write+0x2>
		data = data >> 1; // Следующий бит
		_delay_us(62);
		DS18B20_DDR &= ~(1 << DS18B20_DQ); // PC0 - вход
		_delay_us(2);
	}
}                       // разрешаем прерывания
     8da:	08 95       	ret

000008dc <DS18B20_get>:

bool DS18B20_get(unsigned int *data, unsigned int *cfg) {
     8dc:	df 92       	push	r13
     8de:	ef 92       	push	r14
     8e0:	ff 92       	push	r15
     8e2:	0f 93       	push	r16
     8e4:	1f 93       	push	r17
     8e6:	cf 93       	push	r28
     8e8:	df 93       	push	r29
     8ea:	ec 01       	movw	r28, r24
     8ec:	8b 01       	movw	r16, r22

	unsigned char data_h, data_l;

	if (!DS18B20_init())
     8ee:	af df       	rcall	.-162    	; 0x84e <DS18B20_init>
     8f0:	f8 2e       	mov	r15, r24
     8f2:	88 23       	and	r24, r24
     8f4:	61 f1       	breq	.+88     	; 0x94e <DS18B20_get+0x72>
		return false;

	DS18B20_write(0xCC); // Проверка кода датчика
     8f6:	8c ec       	ldi	r24, 0xCC	; 204
     8f8:	d9 df       	rcall	.-78     	; 0x8ac <DS18B20_write>
	DS18B20_write(0x44);     // Запуск температурного преобразования
     8fa:	84 e4       	ldi	r24, 0x44	; 68
     8fc:	d7 df       	rcall	.-82     	; 0x8ac <DS18B20_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8fe:	2f e7       	ldi	r18, 0x7F	; 127
     900:	8a e1       	ldi	r24, 0x1A	; 26
     902:	96 e0       	ldi	r25, 0x06	; 6
     904:	21 50       	subi	r18, 0x01	; 1
     906:	80 40       	sbci	r24, 0x00	; 0
     908:	90 40       	sbci	r25, 0x00	; 0
     90a:	e1 f7       	brne	.-8      	; 0x904 <DS18B20_get+0x28>
     90c:	00 c0       	rjmp	.+0      	; 0x90e <DS18B20_get+0x32>
     90e:	00 00       	nop
	_delay_ms(250);

	DS18B20_init();
     910:	9e df       	rcall	.-196    	; 0x84e <DS18B20_init>
	DS18B20_write(0xCC); // Проверка кода датчика
     912:	8c ec       	ldi	r24, 0xCC	; 204
     914:	cb df       	rcall	.-106    	; 0x8ac <DS18B20_write>
	DS18B20_write(0xBE);     // Считываем содержимое ОЗУ
     916:	8e eb       	ldi	r24, 0xBE	; 190
     918:	c9 df       	rcall	.-110    	; 0x8ac <DS18B20_write>

	data_l = DS18B20_read(); // Читаем первые 2 байта блокнота
     91a:	b2 df       	rcall	.-156    	; 0x880 <DS18B20_read>
     91c:	d8 2e       	mov	r13, r24
	data_h = DS18B20_read();
     91e:	b0 df       	rcall	.-160    	; 0x880 <DS18B20_read>
     920:	e8 2e       	mov	r14, r24
	DS18B20_read();
     922:	ae df       	rcall	.-164    	; 0x880 <DS18B20_read>
	DS18B20_read();
     924:	ad df       	rcall	.-166    	; 0x880 <DS18B20_read>
	*cfg = DS18B20_read();
     926:	ac df       	rcall	.-168    	; 0x880 <DS18B20_read>
     928:	48 2f       	mov	r20, r24
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	f8 01       	movw	r30, r16
     92e:	51 83       	std	Z+1, r21	; 0x01
     930:	40 83       	st	Z, r20
     932:	ff e7       	ldi	r31, 0x7F	; 127
     934:	2a e1       	ldi	r18, 0x1A	; 26
     936:	86 e0       	ldi	r24, 0x06	; 6
     938:	f1 50       	subi	r31, 0x01	; 1
     93a:	20 40       	sbci	r18, 0x00	; 0
     93c:	80 40       	sbci	r24, 0x00	; 0
     93e:	e1 f7       	brne	.-8      	; 0x938 <DS18B20_get+0x5c>
     940:	00 c0       	rjmp	.+0      	; 0x942 <DS18B20_get+0x66>
     942:	00 00       	nop

	_delay_ms(250);

	// check CRC

	*data = (data_h << 8) | data_l;
     944:	2d 2d       	mov	r18, r13
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	3e 29       	or	r19, r14
     94a:	39 83       	std	Y+1, r19	; 0x01
     94c:	28 83       	st	Y, r18

	return true;

}
     94e:	8f 2d       	mov	r24, r15
     950:	df 91       	pop	r29
     952:	cf 91       	pop	r28
     954:	1f 91       	pop	r17
     956:	0f 91       	pop	r16
     958:	ff 90       	pop	r15
     95a:	ef 90       	pop	r14
     95c:	df 90       	pop	r13
     95e:	08 95       	ret

00000960 <update_osccal_from_eeprom>:
#include "osc_calibration.h"


bool update_osccal_from_eeprom() {
	uint8_t osccal_new = eeprom_read_byte((uint8_t*)OSCCAL_EEADDR);
     960:	8f ef       	ldi	r24, 0xFF	; 255
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	d6 d4       	rcall	.+2476   	; 0x1312 <__eerd_byte_tn84a>
	uint8_t osccal_old = OSCCAL;
     966:	91 b7       	in	r25, 0x31	; 49
	uint8_t i;

	// blank eeprom filled up by 0xFF
	if (osccal_new!=0xFF) {
     968:	8f 3f       	cpi	r24, 0xFF	; 255
     96a:	a9 f0       	breq	.+42     	; 0x996 <update_osccal_from_eeprom+0x36>
		if (osccal_new>osccal_old) {
     96c:	98 17       	cp	r25, r24
     96e:	48 f4       	brcc	.+18     	; 0x982 <update_osccal_from_eeprom+0x22>
			for(i = osccal_old+1; i <= osccal_new; i++) {
     970:	9f 5f       	subi	r25, 0xFF	; 255
     972:	89 17       	cp	r24, r25
     974:	90 f0       	brcs	.+36     	; 0x99a <update_osccal_from_eeprom+0x3a>
     976:	8f 5f       	subi	r24, 0xFF	; 255
				OSCCAL = i;
     978:	91 bf       	out	0x31, r25	; 49
	uint8_t i;

	// blank eeprom filled up by 0xFF
	if (osccal_new!=0xFF) {
		if (osccal_new>osccal_old) {
			for(i = osccal_old+1; i <= osccal_new; i++) {
     97a:	9f 5f       	subi	r25, 0xFF	; 255
     97c:	98 13       	cpse	r25, r24
     97e:	fc cf       	rjmp	.-8      	; 0x978 <update_osccal_from_eeprom+0x18>
     980:	0e c0       	rjmp	.+28     	; 0x99e <update_osccal_from_eeprom+0x3e>
				OSCCAL = i;
			}
		}
		else if (osccal_new<osccal_old) {
     982:	89 17       	cp	r24, r25
     984:	70 f4       	brcc	.+28     	; 0x9a2 <update_osccal_from_eeprom+0x42>
			for(i = osccal_old-1; i >= osccal_new; i--) {
     986:	91 50       	subi	r25, 0x01	; 1
     988:	98 17       	cp	r25, r24
     98a:	68 f0       	brcs	.+26     	; 0x9a6 <update_osccal_from_eeprom+0x46>
				OSCCAL = i;
     98c:	91 bf       	out	0x31, r25	; 49
			for(i = osccal_old+1; i <= osccal_new; i++) {
				OSCCAL = i;
			}
		}
		else if (osccal_new<osccal_old) {
			for(i = osccal_old-1; i >= osccal_new; i--) {
     98e:	91 50       	subi	r25, 0x01	; 1
     990:	98 17       	cp	r25, r24
     992:	e0 f7       	brcc	.-8      	; 0x98c <update_osccal_from_eeprom+0x2c>
     994:	0a c0       	rjmp	.+20     	; 0x9aa <update_osccal_from_eeprom+0x4a>

		}
		return true;
	}
	else
		return false;
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	08 95       	ret
			for(i = osccal_old-1; i >= osccal_new; i--) {
				OSCCAL = i;
			}

		}
		return true;
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	08 95       	ret
     99e:	81 e0       	ldi	r24, 0x01	; 1
     9a0:	08 95       	ret
     9a2:	81 e0       	ldi	r24, 0x01	; 1
     9a4:	08 95       	ret
     9a6:	81 e0       	ldi	r24, 0x01	; 1
     9a8:	08 95       	ret
     9aa:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
		return false;
}
     9ac:	08 95       	ret

000009ae <write_from_osccal_to_eeprom>:
		return false;
}
*/

void write_from_osccal_to_eeprom() {
	eeprom_write_byte((uint8_t*)OSCCAL_EEADDR, OSCCAL);
     9ae:	61 b7       	in	r22, 0x31	; 49
     9b0:	8f ef       	ldi	r24, 0xFF	; 255
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	b6 d4       	rcall	.+2412   	; 0x1322 <__eewr_byte_tn84a>
     9b6:	08 95       	ret

000009b8 <perform_calibration>:
}

int perform_calibration() {
     9b8:	ef 92       	push	r14
     9ba:	ff 92       	push	r15
     9bc:	0f 93       	push	r16
     9be:	1f 93       	push	r17
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
	uint8_t osctmp = OSCCAL;
     9c4:	11 b7       	in	r17, 0x31	; 49
	bool success = false;
	unsigned int i;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     9c6:	ef b6       	in	r14, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     9c8:	f8 94       	cli

		// setup (turn off) the timer1
		TCCR1A = 0;
     9ca:	1f bc       	out	0x2f, r1	; 47
		TCCR1B = 0;
     9cc:	1e bc       	out	0x2e, r1	; 46
				success = true;
				break;
		    }

			OSCCAL = osctmp;
			(*osc_calibration_SerialWrite)(osctmp, osc_calibration_serial_port);
     9ce:	0f 2e       	mov	r0, r31
     9d0:	f5 e0       	ldi	r31, 0x05	; 5
     9d2:	ff 2e       	mov	r15, r31
     9d4:	f0 2d       	mov	r31, r0
     9d6:	00 e0       	ldi	r16, 0x00	; 0
		// setup (turn off) the timer1
		TCCR1A = 0;
		TCCR1B = 0;

	    while (1) {
			TCNT1 = 0;
     9d8:	1d bc       	out	0x2d, r1	; 45
     9da:	1c bc       	out	0x2c, r1	; 44

000009dc <calibrationWaitStart>:

			__asm volatile(
     9dc:	cd 99       	sbic	0x19, 5	; 25
     9de:	fe cf       	rjmp	.-4      	; 0x9dc <calibrationWaitStart>
     9e0:	21 e0       	ldi	r18, 0x01	; 1
     9e2:	2e bd       	out	0x2e, r18	; 46

000009e4 <calibrationWaitStop>:
     9e4:	cd 9b       	sbis	0x19, 5	; 25
     9e6:	fe cf       	rjmp	.-4      	; 0x9e4 <calibrationWaitStop>
     9e8:	20 e0       	ldi	r18, 0x00	; 0
     9ea:	2e bd       	out	0x2e, r18	; 46
			[timer_stop] "I" (TIMER_STOP),
			[tccrb] "I" (_SFR_IO_ADDR(TCCR1B))
			: "r0","r18"
			);

			i = TCNT1;
     9ec:	2c b5       	in	r18, 0x2c	; 44
     9ee:	3d b5       	in	r19, 0x2d	; 45

			if (i > (TIMER_REFERENCE+REFERENCE_HYSTERESIS/2)) {
     9f0:	21 36       	cpi	r18, 0x61	; 97
     9f2:	8d e1       	ldi	r24, 0x1D	; 29
     9f4:	38 07       	cpc	r19, r24
     9f6:	10 f0       	brcs	.+4      	; 0x9fc <calibrationWaitStop+0x18>
				osctmp--;
     9f8:	11 50       	subi	r17, 0x01	; 1
     9fa:	04 c0       	rjmp	.+8      	; 0xa04 <calibrationWaitStop+0x20>
		    }
		    else if (i < (TIMER_REFERENCE-REFERENCE_HYSTERESIS/2)) {
     9fc:	28 33       	cpi	r18, 0x38	; 56
     9fe:	3d 41       	sbci	r19, 0x1D	; 29
     a00:	e8 f4       	brcc	.+58     	; 0xa3c <calibrationWaitStop+0x58>
				osctmp++;
     a02:	1f 5f       	subi	r17, 0xFF	; 255
			else {
				success = true;
				break;
		    }

			OSCCAL = osctmp;
     a04:	11 bf       	out	0x31, r17	; 49
			(*osc_calibration_SerialWrite)(osctmp, osc_calibration_serial_port);
     a06:	60 91 94 00 	lds	r22, 0x0094
     a0a:	70 91 95 00 	lds	r23, 0x0095
     a0e:	e0 91 9a 00 	lds	r30, 0x009A
     a12:	f0 91 9b 00 	lds	r31, 0x009B
     a16:	81 2f       	mov	r24, r17
     a18:	09 95       	icall
     a1a:	cf 2d       	mov	r28, r15
     a1c:	d0 2f       	mov	r29, r16

			for (i=0; i<5; i++) {
				(*osc_calibration_toggle_led)();
     a1e:	e0 91 9f 00 	lds	r30, 0x009F
     a22:	f0 91 a0 00 	lds	r31, 0x00A0
     a26:	09 95       	icall
     a28:	8b e7       	ldi	r24, 0x7B	; 123
     a2a:	92 e9       	ldi	r25, 0x92	; 146
     a2c:	01 97       	sbiw	r24, 0x01	; 1
     a2e:	f1 f7       	brne	.-4      	; 0xa2c <calibrationWaitStop+0x48>
     a30:	00 c0       	rjmp	.+0      	; 0xa32 <calibrationWaitStop+0x4e>
     a32:	00 00       	nop
     a34:	21 97       	sbiw	r28, 0x01	; 1
		    }

			OSCCAL = osctmp;
			(*osc_calibration_SerialWrite)(osctmp, osc_calibration_serial_port);

			for (i=0; i<5; i++) {
     a36:	20 97       	sbiw	r28, 0x00	; 0
     a38:	91 f7       	brne	.-28     	; 0xa1e <calibrationWaitStop+0x3a>
     a3a:	ce cf       	rjmp	.-100    	; 0x9d8 <perform_calibration+0x20>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a3c:	ef be       	out	0x3f, r14	; 63

	if (success)
		return osctmp;
	else
		return -1;
}
     a3e:	81 2f       	mov	r24, r17
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	df 91       	pop	r29
     a44:	cf 91       	pop	r28
     a46:	1f 91       	pop	r17
     a48:	0f 91       	pop	r16
     a4a:	ff 90       	pop	r15
     a4c:	ef 90       	pop	r14
     a4e:	08 95       	ret

00000a50 <handler>:
			: "+w" (delay), "+a" (tmp)
			: "0" (delay)
	);
}

void handler(Uart *p){
     a50:	dc 01       	movw	r26, r24
	pWidth=interruptTime;
     a52:	80 91 a3 00 	lds	r24, 0x00A3
     a56:	90 91 a4 00 	lds	r25, 0x00A4
     a5a:	90 93 a6 00 	sts	0x00A6, r25
     a5e:	80 93 a5 00 	sts	0x00A5, r24
	PORTB^=1;
     a62:	98 b3       	in	r25, 0x18	; 24
     a64:	81 e0       	ldi	r24, 0x01	; 1
     a66:	89 27       	eor	r24, r25
     a68:	88 bb       	out	0x18, r24	; 24
	uint8_t d = 0;
	// If RX line is high, then we don't see any start bit
	// so interrupt is probably not for us
	if ( !(*p->_PIN&(1<<p->_RX_PIN_NUM)) ) {
     a6a:	18 96       	adiw	r26, 0x08	; 8
     a6c:	ed 91       	ld	r30, X+
     a6e:	fc 91       	ld	r31, X
     a70:	19 97       	sbiw	r26, 0x09	; 9
     a72:	1a 96       	adiw	r26, 0x0a	; 10
     a74:	2c 91       	ld	r18, X
     a76:	1a 97       	sbiw	r26, 0x0a	; 10
     a78:	80 81       	ld	r24, Z
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	02 c0       	rjmp	.+4      	; 0xa82 <handler+0x32>
     a7e:	95 95       	asr	r25
     a80:	87 95       	ror	r24
     a82:	2a 95       	dec	r18
     a84:	e2 f7       	brpl	.-8      	; 0xa7e <handler+0x2e>
     a86:	80 fd       	sbrc	r24, 0
     a88:	7c c0       	rjmp	.+248    	; 0xb82 <handler+0x132>
		// Wait approximately 1/2 of a bit width to "center" the sample
		tunedDelay(p->_rx_delay_centering);
     a8a:	92 96       	adiw	r26, 0x22	; 34
     a8c:	8d 91       	ld	r24, X+
     a8e:	9c 91       	ld	r25, X
     a90:	93 97       	sbiw	r26, 0x23	; 35


inline void tunedDelay(uint16_t delay) {
	uint8_t tmp = 0;

	asm volatile("sbiw    %0, 0x01 \n\t"
     a92:	20 e0       	ldi	r18, 0x00	; 0
     a94:	01 97       	sbiw	r24, 0x01	; 1
     a96:	2f ef       	ldi	r18, 0xFF	; 255
     a98:	8f 3f       	cpi	r24, 0xFF	; 255
     a9a:	92 07       	cpc	r25, r18
     a9c:	d9 f7       	brne	.-10     	; 0xa94 <handler+0x44>
     a9e:	88 e0       	ldi	r24, 0x08	; 8
     aa0:	90 e0       	ldi	r25, 0x00	; 0
	if ( !(*p->_PIN&(1<<p->_RX_PIN_NUM)) ) {
		// Wait approximately 1/2 of a bit width to "center" the sample
		tunedDelay(p->_rx_delay_centering);

		// Read each of the 8 bits
		for (uint8_t i = 0x1; i; i <<= 1) {
     aa2:	51 e0       	ldi	r21, 0x01	; 1
}

void handler(Uart *p){
	pWidth=interruptTime;
	PORTB^=1;
	uint8_t d = 0;
     aa4:	40 e0       	ldi	r20, 0x00	; 0


inline void tunedDelay(uint16_t delay) {
	uint8_t tmp = 0;

	asm volatile("sbiw    %0, 0x01 \n\t"
     aa6:	70 e0       	ldi	r23, 0x00	; 0
		// Wait approximately 1/2 of a bit width to "center" the sample
		tunedDelay(p->_rx_delay_centering);

		// Read each of the 8 bits
		for (uint8_t i = 0x1; i; i <<= 1) {
			tunedDelay(p->_rx_delay_intrabit-1);
     aa8:	90 96       	adiw	r26, 0x20	; 32
     aaa:	ed 91       	ld	r30, X+
     aac:	fc 91       	ld	r31, X
     aae:	91 97       	sbiw	r26, 0x21	; 33
     ab0:	31 97       	sbiw	r30, 0x01	; 1


inline void tunedDelay(uint16_t delay) {
	uint8_t tmp = 0;

	asm volatile("sbiw    %0, 0x01 \n\t"
     ab2:	27 2f       	mov	r18, r23
     ab4:	31 97       	sbiw	r30, 0x01	; 1
     ab6:	2f ef       	ldi	r18, 0xFF	; 255
     ab8:	ef 3f       	cpi	r30, 0xFF	; 255
     aba:	f2 07       	cpc	r31, r18
     abc:	d9 f7       	brne	.-10     	; 0xab4 <handler+0x64>

		// Read each of the 8 bits
		for (uint8_t i = 0x1; i; i <<= 1) {
			tunedDelay(p->_rx_delay_intrabit-1);
			uint8_t noti = ~i;
			if ((*p->_PIN&(1<<p->_RX_PIN_NUM)))
     abe:	18 96       	adiw	r26, 0x08	; 8
     ac0:	ed 91       	ld	r30, X+
     ac2:	fc 91       	ld	r31, X
     ac4:	19 97       	sbiw	r26, 0x09	; 9
     ac6:	1a 96       	adiw	r26, 0x0a	; 10
     ac8:	6c 91       	ld	r22, X
     aca:	1a 97       	sbiw	r26, 0x0a	; 10
     acc:	20 81       	ld	r18, Z
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	02 c0       	rjmp	.+4      	; 0xad6 <handler+0x86>
     ad2:	35 95       	asr	r19
     ad4:	27 95       	ror	r18
     ad6:	6a 95       	dec	r22
     ad8:	e2 f7       	brpl	.-8      	; 0xad2 <handler+0x82>
     ada:	20 ff       	sbrs	r18, 0
     adc:	02 c0       	rjmp	.+4      	; 0xae2 <handler+0x92>
			d |= i;
     ade:	45 2b       	or	r20, r21
     ae0:	03 c0       	rjmp	.+6      	; 0xae8 <handler+0x98>
		tunedDelay(p->_rx_delay_centering);

		// Read each of the 8 bits
		for (uint8_t i = 0x1; i; i <<= 1) {
			tunedDelay(p->_rx_delay_intrabit-1);
			uint8_t noti = ~i;
     ae2:	25 2f       	mov	r18, r21
     ae4:	20 95       	com	r18
			if ((*p->_PIN&(1<<p->_RX_PIN_NUM)))
			d |= i;
			else // else clause added to ensure function timing is ~balanced
			d &= noti;
     ae6:	42 23       	and	r20, r18
	if ( !(*p->_PIN&(1<<p->_RX_PIN_NUM)) ) {
		// Wait approximately 1/2 of a bit width to "center" the sample
		tunedDelay(p->_rx_delay_centering);

		// Read each of the 8 bits
		for (uint8_t i = 0x1; i; i <<= 1) {
     ae8:	55 0f       	add	r21, r21
     aea:	01 97       	sbiw	r24, 0x01	; 1
     aec:	00 97       	sbiw	r24, 0x00	; 0
     aee:	e1 f6       	brne	.-72     	; 0xaa8 <handler+0x58>
			if ((*p->_PIN&(1<<p->_RX_PIN_NUM)))
			d |= i;
			else // else clause added to ensure function timing is ~balanced
			d &= noti;
		};
		tunedDelay(p->_rx_delay_stopbit-5);
     af0:	94 96       	adiw	r26, 0x24	; 36
     af2:	8d 91       	ld	r24, X+
     af4:	9c 91       	ld	r25, X
     af6:	95 97       	sbiw	r26, 0x25	; 37
     af8:	05 97       	sbiw	r24, 0x05	; 5


inline void tunedDelay(uint16_t delay) {
	uint8_t tmp = 0;

	asm volatile("sbiw    %0, 0x01 \n\t"
     afa:	20 e0       	ldi	r18, 0x00	; 0
     afc:	01 97       	sbiw	r24, 0x01	; 1
     afe:	2f ef       	ldi	r18, 0xFF	; 255
     b00:	8f 3f       	cpi	r24, 0xFF	; 255
     b02:	92 07       	cpc	r25, r18
     b04:	d9 f7       	brne	.-10     	; 0xafc <handler+0xac>
			d &= noti;
		};
		tunedDelay(p->_rx_delay_stopbit-5);
		
		#ifdef OSCCAL_FORCE_CALIBRATION
		if(!(*p->_PIN&(1<<p->_RX_PIN_NUM))){ //If no stop bit - run timer and measure calibration  impulse width.
     b06:	18 96       	adiw	r26, 0x08	; 8
     b08:	ed 91       	ld	r30, X+
     b0a:	fc 91       	ld	r31, X
     b0c:	19 97       	sbiw	r26, 0x09	; 9
     b0e:	1a 96       	adiw	r26, 0x0a	; 10
     b10:	2c 91       	ld	r18, X
     b12:	1a 97       	sbiw	r26, 0x0a	; 10
     b14:	80 81       	ld	r24, Z
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	02 c0       	rjmp	.+4      	; 0xb1e <handler+0xce>
     b1a:	95 95       	asr	r25
     b1c:	87 95       	ror	r24
     b1e:	2a 95       	dec	r18
     b20:	e2 f7       	brpl	.-8      	; 0xb1a <handler+0xca>
     b22:	80 fd       	sbrc	r24, 0
     b24:	0a c0       	rjmp	.+20     	; 0xb3a <handler+0xea>
			if (p==serial_0)
     b26:	80 91 74 00 	lds	r24, 0x0074
     b2a:	90 91 75 00 	lds	r25, 0x0075
     b2e:	a8 17       	cp	r26, r24
     b30:	b9 07       	cpc	r27, r25
     b32:	19 f4       	brne	.+6      	; 0xb3a <handler+0xea>
				FLAG=1;
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	80 93 88 00 	sts	0x0088, r24
		};
		#endif
		
		// if buffer full, set the overflow flag and return
		if (((p->_receive_buffer_tail + 1) & _SS_RX_BUFF_MASK) != p->_receive_buffer_head) {  // circular buffer
     b3a:	5c 96       	adiw	r26, 0x1c	; 28
     b3c:	2c 91       	ld	r18, X
     b3e:	5c 97       	sbiw	r26, 0x1c	; 28
     b40:	5d 96       	adiw	r26, 0x1d	; 29
     b42:	8c 91       	ld	r24, X
     b44:	5d 97       	sbiw	r26, 0x1d	; 29
     b46:	30 e0       	ldi	r19, 0x00	; 0
     b48:	2f 5f       	subi	r18, 0xFF	; 255
     b4a:	3f 4f       	sbci	r19, 0xFF	; 255
     b4c:	2f 70       	andi	r18, 0x0F	; 15
     b4e:	33 27       	eor	r19, r19
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	28 17       	cp	r18, r24
     b54:	39 07       	cpc	r19, r25
     b56:	79 f0       	breq	.+30     	; 0xb76 <handler+0x126>
			// save new data in buffer: tail points to where byte goes
			p->_receive_buffer[p->_receive_buffer_tail] = d; // save new byte
     b58:	5c 96       	adiw	r26, 0x1c	; 28
     b5a:	8c 91       	ld	r24, X
     b5c:	5c 97       	sbiw	r26, 0x1c	; 28
     b5e:	fd 01       	movw	r30, r26
     b60:	e8 0f       	add	r30, r24
     b62:	f1 1d       	adc	r31, r1
     b64:	44 87       	std	Z+12, r20	; 0x0c
			p->_receive_buffer_tail = (p->_receive_buffer_tail + 1) & _SS_RX_BUFF_MASK;  // circular buffer
     b66:	5c 96       	adiw	r26, 0x1c	; 28
     b68:	8c 91       	ld	r24, X
     b6a:	5c 97       	sbiw	r26, 0x1c	; 28
     b6c:	8f 5f       	subi	r24, 0xFF	; 255
     b6e:	8f 70       	andi	r24, 0x0F	; 15
     b70:	5c 96       	adiw	r26, 0x1c	; 28
     b72:	8c 93       	st	X, r24
     b74:	08 95       	ret
			} else {
			p->_buffer_overflow = true;
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	5f 96       	adiw	r26, 0x1f	; 31
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	5e 97       	sbiw	r26, 0x1e	; 30
     b82:	08 95       	ret

00000b84 <__vector_2>:
		}
	}
}


ISR(PCINT0_vect) {
     b84:	1f 92       	push	r1
     b86:	0f 92       	push	r0
     b88:	0f b6       	in	r0, 0x3f	; 63
     b8a:	0f 92       	push	r0
     b8c:	11 24       	eor	r1, r1
     b8e:	2f 93       	push	r18
     b90:	3f 93       	push	r19
     b92:	4f 93       	push	r20
     b94:	5f 93       	push	r21
     b96:	6f 93       	push	r22
     b98:	7f 93       	push	r23
     b9a:	8f 93       	push	r24
     b9c:	9f 93       	push	r25
     b9e:	af 93       	push	r26
     ba0:	bf 93       	push	r27
     ba2:	ef 93       	push	r30
     ba4:	ff 93       	push	r31

	#ifdef OSCCAL_FORCE_CALIBRATION
	interruptTime = TCNT1;
     ba6:	8c b5       	in	r24, 0x2c	; 44
     ba8:	9d b5       	in	r25, 0x2d	; 45
     baa:	90 93 a4 00 	sts	0x00A4, r25
     bae:	80 93 a3 00 	sts	0x00A3, r24
	if(FLAG){														 //if flag of measurement present - wait for front to end of measuerment. 
     bb2:	80 91 88 00 	lds	r24, 0x0088
     bb6:	88 23       	and	r24, r24
     bb8:	59 f1       	breq	.+86     	; 0xc10 <__vector_2+0x8c>
		if(*serial_0->_PIN&(1<<serial_0->_RX_PIN_NUM)){
     bba:	e0 91 74 00 	lds	r30, 0x0074
     bbe:	f0 91 75 00 	lds	r31, 0x0075
     bc2:	a0 85       	ldd	r26, Z+8	; 0x08
     bc4:	b1 85       	ldd	r27, Z+9	; 0x09
     bc6:	22 85       	ldd	r18, Z+10	; 0x0a
     bc8:	8c 91       	ld	r24, X
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <__vector_2+0x4e>
     bce:	95 95       	asr	r25
     bd0:	87 95       	ror	r24
     bd2:	2a 95       	dec	r18
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <__vector_2+0x4a>
     bd6:	80 ff       	sbrs	r24, 0
     bd8:	1b c0       	rjmp	.+54     	; 0xc10 <__vector_2+0x8c>
			FLAG=0;
     bda:	10 92 88 00 	sts	0x0088, r1
			if(!calibTimeReading){
     bde:	80 91 a7 00 	lds	r24, 0x00A7
     be2:	81 11       	cpse	r24, r1
     be4:	12 c0       	rjmp	.+36     	; 0xc0a <__vector_2+0x86>
				PORTB^=1;
     be6:	98 b3       	in	r25, 0x18	; 24
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	89 27       	eor	r24, r25
     bec:	88 bb       	out	0x18, r24	; 24
				pWidth=(interruptTime - pWidth);
     bee:	80 91 a3 00 	lds	r24, 0x00A3
     bf2:	90 91 a4 00 	lds	r25, 0x00A4
     bf6:	20 91 a5 00 	lds	r18, 0x00A5
     bfa:	30 91 a6 00 	lds	r19, 0x00A6
     bfe:	82 1b       	sub	r24, r18
     c00:	93 0b       	sbc	r25, r19
     c02:	90 93 a6 00 	sts	0x00A6, r25
     c06:	80 93 a5 00 	sts	0x00A5, r24
			}
			calibTimeReady=1;
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	80 93 a8 00 	sts	0x00A8, r24
			
		}
	}
	#endif
	
	if(!(*serial_0->_PIN&(1<<serial_0->_RX_PIN_NUM))){ 
     c10:	e0 91 74 00 	lds	r30, 0x0074
     c14:	f0 91 75 00 	lds	r31, 0x0075
     c18:	a0 85       	ldd	r26, Z+8	; 0x08
     c1a:	b1 85       	ldd	r27, Z+9	; 0x09
     c1c:	22 85       	ldd	r18, Z+10	; 0x0a
     c1e:	8c 91       	ld	r24, X
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 c0       	rjmp	.+4      	; 0xc28 <__vector_2+0xa4>
     c24:	95 95       	asr	r25
     c26:	87 95       	ror	r24
     c28:	2a 95       	dec	r18
     c2a:	e2 f7       	brpl	.-8      	; 0xc24 <__vector_2+0xa0>
     c2c:	80 fd       	sbrc	r24, 0
     c2e:	02 c0       	rjmp	.+4      	; 0xc34 <__vector_2+0xb0>
		handler(serial_0);
     c30:	cf 01       	movw	r24, r30
     c32:	0e df       	rcall	.-484    	; 0xa50 <handler>
	}
	if(!(*serial_1->_PIN&(1<<serial_1->_RX_PIN_NUM))){												 //If low level on UART RX channel detected - call handler function with uart port as argument.
     c34:	e0 91 86 00 	lds	r30, 0x0086
     c38:	f0 91 87 00 	lds	r31, 0x0087
     c3c:	a0 85       	ldd	r26, Z+8	; 0x08
     c3e:	b1 85       	ldd	r27, Z+9	; 0x09
     c40:	22 85       	ldd	r18, Z+10	; 0x0a
     c42:	8c 91       	ld	r24, X
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	02 c0       	rjmp	.+4      	; 0xc4c <__vector_2+0xc8>
     c48:	95 95       	asr	r25
     c4a:	87 95       	ror	r24
     c4c:	2a 95       	dec	r18
     c4e:	e2 f7       	brpl	.-8      	; 0xc48 <__vector_2+0xc4>
     c50:	80 fd       	sbrc	r24, 0
     c52:	02 c0       	rjmp	.+4      	; 0xc58 <__vector_2+0xd4>
		handler(serial_1);
     c54:	cf 01       	movw	r24, r30
     c56:	fc de       	rcall	.-520    	; 0xa50 <handler>
	}
	
}
     c58:	ff 91       	pop	r31
     c5a:	ef 91       	pop	r30
     c5c:	bf 91       	pop	r27
     c5e:	af 91       	pop	r26
     c60:	9f 91       	pop	r25
     c62:	8f 91       	pop	r24
     c64:	7f 91       	pop	r23
     c66:	6f 91       	pop	r22
     c68:	5f 91       	pop	r21
     c6a:	4f 91       	pop	r20
     c6c:	3f 91       	pop	r19
     c6e:	2f 91       	pop	r18
     c70:	0f 90       	pop	r0
     c72:	0f be       	out	0x3f, r0	; 63
     c74:	0f 90       	pop	r0
     c76:	1f 90       	pop	r1
     c78:	18 95       	reti

00000c7a <softSerialBegin>:



void softSerialBegin(Uart *p) {
     c7a:	0f 93       	push	r16
     c7c:	1f 93       	push	r17
     c7e:	cf 93       	push	r28
     c80:	df 93       	push	r29
     c82:	dc 01       	movw	r26, r24
	
	unsigned i;
	p->_receive_buffer_head = p->_receive_buffer_tail = 0;
     c84:	5c 96       	adiw	r26, 0x1c	; 28
     c86:	1c 92       	st	X, r1
     c88:	5c 97       	sbiw	r26, 0x1c	; 28
     c8a:	5d 96       	adiw	r26, 0x1d	; 29
     c8c:	1c 92       	st	X, r1
     c8e:	5d 97       	sbiw	r26, 0x1d	; 29
	p->_buffer_overflow = false;
     c90:	5f 96       	adiw	r26, 0x1f	; 31
     c92:	1c 92       	st	X, r1
     c94:	1e 92       	st	-X, r1
     c96:	5e 97       	sbiw	r26, 0x1e	; 30
	*p->_DDR |= (1<<p->_TX_PIN_NUM); // set TX for output
     c98:	14 96       	adiw	r26, 0x04	; 4
     c9a:	ed 91       	ld	r30, X+
     c9c:	fc 91       	ld	r31, X
     c9e:	15 97       	sbiw	r26, 0x05	; 5
     ca0:	1b 96       	adiw	r26, 0x0b	; 11
     ca2:	2c 91       	ld	r18, X
     ca4:	1b 97       	sbiw	r26, 0x0b	; 11
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	ac 01       	movw	r20, r24
     cac:	02 c0       	rjmp	.+4      	; 0xcb2 <softSerialBegin+0x38>
     cae:	44 0f       	add	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	2a 95       	dec	r18
     cb4:	e2 f7       	brpl	.-8      	; 0xcae <softSerialBegin+0x34>
     cb6:	9a 01       	movw	r18, r20
     cb8:	30 81       	ld	r19, Z
     cba:	23 2b       	or	r18, r19
     cbc:	20 83       	st	Z, r18
	*p->_DDR &= ~(1<<p->_RX_PIN_NUM); // set RX for input
     cbe:	14 96       	adiw	r26, 0x04	; 4
     cc0:	ed 91       	ld	r30, X+
     cc2:	fc 91       	ld	r31, X
     cc4:	15 97       	sbiw	r26, 0x05	; 5
     cc6:	1a 96       	adiw	r26, 0x0a	; 10
     cc8:	2c 91       	ld	r18, X
     cca:	1a 97       	sbiw	r26, 0x0a	; 10
     ccc:	bc 01       	movw	r22, r24
     cce:	02 c0       	rjmp	.+4      	; 0xcd4 <softSerialBegin+0x5a>
     cd0:	66 0f       	add	r22, r22
     cd2:	77 1f       	adc	r23, r23
     cd4:	2a 95       	dec	r18
     cd6:	e2 f7       	brpl	.-8      	; 0xcd0 <softSerialBegin+0x56>
     cd8:	9b 01       	movw	r18, r22
     cda:	20 95       	com	r18
     cdc:	30 81       	ld	r19, Z
     cde:	23 23       	and	r18, r19
     ce0:	20 83       	st	Z, r18
	*p->_PORT |= (1<<p->_RX_PIN_NUM)|(1<<p->_TX_PIN_NUM); // assumes no inverse logic
     ce2:	16 96       	adiw	r26, 0x06	; 6
     ce4:	ed 91       	ld	r30, X+
     ce6:	fc 91       	ld	r31, X
     ce8:	17 97       	sbiw	r26, 0x07	; 7
     cea:	1a 96       	adiw	r26, 0x0a	; 10
     cec:	2c 91       	ld	r18, X
     cee:	1a 97       	sbiw	r26, 0x0a	; 10
     cf0:	1b 96       	adiw	r26, 0x0b	; 11
     cf2:	4c 91       	ld	r20, X
     cf4:	1b 97       	sbiw	r26, 0x0b	; 11
     cf6:	bc 01       	movw	r22, r24
     cf8:	02 c0       	rjmp	.+4      	; 0xcfe <softSerialBegin+0x84>
     cfa:	66 0f       	add	r22, r22
     cfc:	77 1f       	adc	r23, r23
     cfe:	2a 95       	dec	r18
     d00:	e2 f7       	brpl	.-8      	; 0xcfa <softSerialBegin+0x80>
     d02:	02 c0       	rjmp	.+4      	; 0xd08 <softSerialBegin+0x8e>
     d04:	88 0f       	add	r24, r24
     d06:	99 1f       	adc	r25, r25
     d08:	4a 95       	dec	r20
     d0a:	e2 f7       	brpl	.-8      	; 0xd04 <softSerialBegin+0x8a>
     d0c:	86 2b       	or	r24, r22
     d0e:	20 81       	ld	r18, Z
     d10:	82 2b       	or	r24, r18
     d12:	80 83       	st	Z, r24
	

	for (i = 0; i < sizeof(table) / sizeof(table[0]); ++i) {
		
		long baud = pgm_read_dword(&table[i].baud);
     d14:	e2 e2       	ldi	r30, 0x22	; 34
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	45 91       	lpm	r20, Z+
     d1a:	55 91       	lpm	r21, Z+
     d1c:	65 91       	lpm	r22, Z+
     d1e:	74 91       	lpm	r23, Z
		if (baud == p->_SPEED) {
     d20:	0d 91       	ld	r16, X+
     d22:	1d 91       	ld	r17, X+
     d24:	2d 91       	ld	r18, X+
     d26:	3c 91       	ld	r19, X
     d28:	13 97       	sbiw	r26, 0x03	; 3
     d2a:	04 17       	cp	r16, r20
     d2c:	15 07       	cpc	r17, r21
     d2e:	26 07       	cpc	r18, r22
     d30:	37 07       	cpc	r19, r23
     d32:	a9 f0       	breq	.+42     	; 0xd5e <softSerialBegin+0xe4>
     d34:	ce e2       	ldi	r28, 0x2E	; 46
     d36:	d0 e0       	ldi	r29, 0x00	; 0
	*p->_DDR |= (1<<p->_TX_PIN_NUM); // set TX for output
	*p->_DDR &= ~(1<<p->_RX_PIN_NUM); // set RX for input
	*p->_PORT |= (1<<p->_RX_PIN_NUM)|(1<<p->_TX_PIN_NUM); // assumes no inverse logic
	

	for (i = 0; i < sizeof(table) / sizeof(table[0]); ++i) {
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	90 e0       	ldi	r25, 0x00	; 0
		
		long baud = pgm_read_dword(&table[i].baud);
     d3c:	fe 01       	movw	r30, r28
     d3e:	45 91       	lpm	r20, Z+
     d40:	55 91       	lpm	r21, Z+
     d42:	65 91       	lpm	r22, Z+
     d44:	74 91       	lpm	r23, Z
		if (baud == p->_SPEED) {
     d46:	0d 91       	ld	r16, X+
     d48:	1d 91       	ld	r17, X+
     d4a:	2d 91       	ld	r18, X+
     d4c:	3c 91       	ld	r19, X
     d4e:	13 97       	sbiw	r26, 0x03	; 3
     d50:	04 17       	cp	r16, r20
     d52:	15 07       	cpc	r17, r21
     d54:	26 07       	cpc	r18, r22
     d56:	37 07       	cpc	r19, r23
     d58:	09 f0       	breq	.+2      	; 0xd5c <softSerialBegin+0xe2>
     d5a:	66 c0       	rjmp	.+204    	; 0xe28 <softSerialBegin+0x1ae>
     d5c:	02 c0       	rjmp	.+4      	; 0xd62 <softSerialBegin+0xe8>
	*p->_DDR |= (1<<p->_TX_PIN_NUM); // set TX for output
	*p->_DDR &= ~(1<<p->_RX_PIN_NUM); // set RX for input
	*p->_PORT |= (1<<p->_RX_PIN_NUM)|(1<<p->_TX_PIN_NUM); // assumes no inverse logic
	

	for (i = 0; i < sizeof(table) / sizeof(table[0]); ++i) {
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	90 e0       	ldi	r25, 0x00	; 0
		
		long baud = pgm_read_dword(&table[i].baud);
		if (baud == p->_SPEED) {
			p->_rx_delay_centering = pgm_read_word(&table[i].rx_delay_centering);
     d62:	fc 01       	movw	r30, r24
     d64:	ee 0f       	add	r30, r30
     d66:	ff 1f       	adc	r31, r31
     d68:	e8 0f       	add	r30, r24
     d6a:	f9 1f       	adc	r31, r25
     d6c:	ee 0f       	add	r30, r30
     d6e:	ff 1f       	adc	r31, r31
     d70:	ee 0f       	add	r30, r30
     d72:	ff 1f       	adc	r31, r31
     d74:	ea 5d       	subi	r30, 0xDA	; 218
     d76:	ff 4f       	sbci	r31, 0xFF	; 255
     d78:	25 91       	lpm	r18, Z+
     d7a:	34 91       	lpm	r19, Z
     d7c:	93 96       	adiw	r26, 0x23	; 35
     d7e:	3c 93       	st	X, r19
     d80:	2e 93       	st	-X, r18
     d82:	92 97       	sbiw	r26, 0x22	; 34
			p->_rx_delay_intrabit = pgm_read_word(&table[i].rx_delay_intrabit);
     d84:	fc 01       	movw	r30, r24
     d86:	ee 0f       	add	r30, r30
     d88:	ff 1f       	adc	r31, r31
     d8a:	e8 0f       	add	r30, r24
     d8c:	f9 1f       	adc	r31, r25
     d8e:	ee 0f       	add	r30, r30
     d90:	ff 1f       	adc	r31, r31
     d92:	ee 0f       	add	r30, r30
     d94:	ff 1f       	adc	r31, r31
     d96:	e8 5d       	subi	r30, 0xD8	; 216
     d98:	ff 4f       	sbci	r31, 0xFF	; 255
     d9a:	25 91       	lpm	r18, Z+
     d9c:	34 91       	lpm	r19, Z
     d9e:	91 96       	adiw	r26, 0x21	; 33
     da0:	3c 93       	st	X, r19
     da2:	2e 93       	st	-X, r18
     da4:	90 97       	sbiw	r26, 0x20	; 32
			p->_rx_delay_stopbit = pgm_read_word(&table[i].rx_delay_stopbit);
     da6:	fc 01       	movw	r30, r24
     da8:	ee 0f       	add	r30, r30
     daa:	ff 1f       	adc	r31, r31
     dac:	e8 0f       	add	r30, r24
     dae:	f9 1f       	adc	r31, r25
     db0:	ee 0f       	add	r30, r30
     db2:	ff 1f       	adc	r31, r31
     db4:	ee 0f       	add	r30, r30
     db6:	ff 1f       	adc	r31, r31
     db8:	e6 5d       	subi	r30, 0xD6	; 214
     dba:	ff 4f       	sbci	r31, 0xFF	; 255
     dbc:	25 91       	lpm	r18, Z+
     dbe:	34 91       	lpm	r19, Z
     dc0:	95 96       	adiw	r26, 0x25	; 37
     dc2:	3c 93       	st	X, r19
     dc4:	2e 93       	st	-X, r18
     dc6:	94 97       	sbiw	r26, 0x24	; 36
			p->_tx_delay = pgm_read_word(&table[i].tx_delay);
     dc8:	fc 01       	movw	r30, r24
     dca:	ee 0f       	add	r30, r30
     dcc:	ff 1f       	adc	r31, r31
     dce:	8e 0f       	add	r24, r30
     dd0:	9f 1f       	adc	r25, r31
     dd2:	fc 01       	movw	r30, r24
     dd4:	ee 0f       	add	r30, r30
     dd6:	ff 1f       	adc	r31, r31
     dd8:	ee 0f       	add	r30, r30
     dda:	ff 1f       	adc	r31, r31
     ddc:	e4 5d       	subi	r30, 0xD4	; 212
     dde:	ff 4f       	sbci	r31, 0xFF	; 255
     de0:	85 91       	lpm	r24, Z+
     de2:	94 91       	lpm	r25, Z
     de4:	97 96       	adiw	r26, 0x27	; 39
     de6:	9c 93       	st	X, r25
     de8:	8e 93       	st	-X, r24
     dea:	96 97       	sbiw	r26, 0x26	; 38
			// Set up RX interrupts, but only if we have a valid RX baud rate
			GIMSK |= (1<<PCIE0);
     dec:	8b b7       	in	r24, 0x3b	; 59
     dee:	80 61       	ori	r24, 0x10	; 16
     df0:	8b bf       	out	0x3b, r24	; 59
			PCMSK0 |= (1<<p->_RX_PIN_NUM);
     df2:	42 b3       	in	r20, 0x12	; 18
     df4:	1a 96       	adiw	r26, 0x0a	; 10
     df6:	8c 91       	ld	r24, X
     df8:	1a 97       	sbiw	r26, 0x0a	; 10
     dfa:	21 e0       	ldi	r18, 0x01	; 1
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	b9 01       	movw	r22, r18
     e00:	02 c0       	rjmp	.+4      	; 0xe06 <softSerialBegin+0x18c>
     e02:	66 0f       	add	r22, r22
     e04:	77 1f       	adc	r23, r23
     e06:	8a 95       	dec	r24
     e08:	e2 f7       	brpl	.-8      	; 0xe02 <softSerialBegin+0x188>
     e0a:	cb 01       	movw	r24, r22
     e0c:	84 2b       	or	r24, r20
     e0e:	82 bb       	out	0x12, r24	; 18
			tunedDelay(p->_tx_delay);
     e10:	96 96       	adiw	r26, 0x26	; 38
     e12:	8d 91       	ld	r24, X+
     e14:	9c 91       	ld	r25, X
     e16:	97 97       	sbiw	r26, 0x27	; 39


inline void tunedDelay(uint16_t delay) {
	uint8_t tmp = 0;

	asm volatile("sbiw    %0, 0x01 \n\t"
     e18:	20 e0       	ldi	r18, 0x00	; 0
     e1a:	01 97       	sbiw	r24, 0x01	; 1
     e1c:	2f ef       	ldi	r18, 0xFF	; 255
     e1e:	8f 3f       	cpi	r24, 0xFF	; 255
     e20:	92 07       	cpc	r25, r18
     e22:	d9 f7       	brne	.-10     	; 0xe1a <softSerialBegin+0x1a0>
			// Set up RX interrupts, but only if we have a valid RX baud rate
			GIMSK |= (1<<PCIE0);
			PCMSK0 |= (1<<p->_RX_PIN_NUM);
			tunedDelay(p->_tx_delay);
			
			sei();
     e24:	78 94       	sei
			
			return;
     e26:	06 c0       	rjmp	.+12     	; 0xe34 <softSerialBegin+0x1ba>
	*p->_DDR |= (1<<p->_TX_PIN_NUM); // set TX for output
	*p->_DDR &= ~(1<<p->_RX_PIN_NUM); // set RX for input
	*p->_PORT |= (1<<p->_RX_PIN_NUM)|(1<<p->_TX_PIN_NUM); // assumes no inverse logic
	

	for (i = 0; i < sizeof(table) / sizeof(table[0]); ++i) {
     e28:	01 96       	adiw	r24, 0x01	; 1
     e2a:	2c 96       	adiw	r28, 0x0c	; 12
     e2c:	8d 30       	cpi	r24, 0x0D	; 13
     e2e:	91 05       	cpc	r25, r1
     e30:	09 f0       	breq	.+2      	; 0xe34 <softSerialBegin+0x1ba>
     e32:	84 cf       	rjmp	.-248    	; 0xd3c <softSerialBegin+0xc2>
		}
	}

	// No valid rate found
	// Indicate an error
}
     e34:	df 91       	pop	r29
     e36:	cf 91       	pop	r28
     e38:	1f 91       	pop	r17
     e3a:	0f 91       	pop	r16
     e3c:	08 95       	ret

00000e3e <softSerialEnd>:

void softSerialEnd() {
	PCMSK0 = 0;
     e3e:	12 ba       	out	0x12, r1	; 18
     e40:	08 95       	ret

00000e42 <softSerialRead>:
}

// Read data from buffer
int softSerialRead(Uart *p) {
     e42:	fc 01       	movw	r30, r24
	// Empty buffer?
	if (p->_receive_buffer_head == p->_receive_buffer_tail)
     e44:	95 8d       	ldd	r25, Z+29	; 0x1d
     e46:	84 8d       	ldd	r24, Z+28	; 0x1c
     e48:	98 17       	cp	r25, r24
     e4a:	61 f0       	breq	.+24     	; 0xe64 <softSerialRead+0x22>
		return -1;

	// Read from "head"
	uint8_t d = p->_receive_buffer[p->_receive_buffer_head]; // grab next byte
     e4c:	85 8d       	ldd	r24, Z+29	; 0x1d
     e4e:	df 01       	movw	r26, r30
     e50:	a8 0f       	add	r26, r24
     e52:	b1 1d       	adc	r27, r1
     e54:	1c 96       	adiw	r26, 0x0c	; 12
     e56:	8c 91       	ld	r24, X
	p->_receive_buffer_head = (p->_receive_buffer_head + 1) & _SS_RX_BUFF_MASK; // circular buffer
     e58:	95 8d       	ldd	r25, Z+29	; 0x1d
     e5a:	9f 5f       	subi	r25, 0xFF	; 255
     e5c:	9f 70       	andi	r25, 0x0F	; 15
     e5e:	95 8f       	std	Z+29, r25	; 0x1d
	return d;
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	08 95       	ret

// Read data from buffer
int softSerialRead(Uart *p) {
	// Empty buffer?
	if (p->_receive_buffer_head == p->_receive_buffer_tail)
		return -1;
     e64:	8f ef       	ldi	r24, 0xFF	; 255
     e66:	9f ef       	ldi	r25, 0xFF	; 255

	// Read from "head"
	uint8_t d = p->_receive_buffer[p->_receive_buffer_head]; // grab next byte
	p->_receive_buffer_head = (p->_receive_buffer_head + 1) & _SS_RX_BUFF_MASK; // circular buffer
	return d;
}
     e68:	08 95       	ret

00000e6a <softSerialAvailable>:

int softSerialAvailable(Uart *p) {
     e6a:	fc 01       	movw	r30, r24
	return (p->_receive_buffer_tail + _SS_MAX_RX_BUFF - p->_receive_buffer_head) & _SS_RX_BUFF_MASK; // circular buffer
     e6c:	84 8d       	ldd	r24, Z+28	; 0x1c
     e6e:	25 8d       	ldd	r18, Z+29	; 0x1d
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	40 96       	adiw	r24, 0x10	; 16
     e74:	82 1b       	sub	r24, r18
     e76:	91 09       	sbc	r25, r1
}
     e78:	8f 70       	andi	r24, 0x0F	; 15
     e7a:	99 27       	eor	r25, r25
     e7c:	08 95       	ret

00000e7e <softSerialWrite>:
	bool ret = p->_buffer_overflow;
	p->_buffer_overflow = false;
	return ret;
}

size_t softSerialWrite(uint8_t b, Uart *p) {
     e7e:	0f 93       	push	r16
     e80:	1f 93       	push	r17
     e82:	cf 93       	push	r28
     e84:	df 93       	push	r29
     e86:	db 01       	movw	r26, r22
	if (p->_tx_delay == 0) {
     e88:	96 96       	adiw	r26, 0x26	; 38
     e8a:	2d 91       	ld	r18, X+
     e8c:	3c 91       	ld	r19, X
     e8e:	97 97       	sbiw	r26, 0x27	; 39
     e90:	23 2b       	or	r18, r19
     e92:	09 f4       	brne	.+2      	; 0xe96 <softSerialWrite+0x18>
     e94:	7b c0       	rjmp	.+246    	; 0xf8c <softSerialWrite+0x10e>
		//setWriteError();
		return 0;
	}

	uint8_t oldSREG = SREG; // store interrupt flag
     e96:	cf b7       	in	r28, 0x3f	; 63
	cli();	// turn off interrupts for a clean txmit
     e98:	f8 94       	cli

	// Write the start bit
	*p->_PORT &= ~(1<<p->_TX_PIN_NUM); // tx pin low
     e9a:	16 96       	adiw	r26, 0x06	; 6
     e9c:	ed 91       	ld	r30, X+
     e9e:	fc 91       	ld	r31, X
     ea0:	17 97       	sbiw	r26, 0x07	; 7
     ea2:	1b 96       	adiw	r26, 0x0b	; 11
     ea4:	9c 91       	ld	r25, X
     ea6:	1b 97       	sbiw	r26, 0x0b	; 11
     ea8:	21 e0       	ldi	r18, 0x01	; 1
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	02 c0       	rjmp	.+4      	; 0xeb2 <softSerialWrite+0x34>
     eae:	22 0f       	add	r18, r18
     eb0:	33 1f       	adc	r19, r19
     eb2:	9a 95       	dec	r25
     eb4:	e2 f7       	brpl	.-8      	; 0xeae <softSerialWrite+0x30>
     eb6:	20 95       	com	r18
     eb8:	90 81       	ld	r25, Z
     eba:	29 23       	and	r18, r25
     ebc:	20 83       	st	Z, r18
	tunedDelay(p->_tx_delay + XMIT_START_ADJUSTMENT);
     ebe:	96 96       	adiw	r26, 0x26	; 38
     ec0:	ed 91       	ld	r30, X+
     ec2:	fc 91       	ld	r31, X
     ec4:	97 97       	sbiw	r26, 0x27	; 39
     ec6:	34 96       	adiw	r30, 0x04	; 4


inline void tunedDelay(uint16_t delay) {
	uint8_t tmp = 0;

	asm volatile("sbiw    %0, 0x01 \n\t"
     ec8:	20 e0       	ldi	r18, 0x00	; 0
     eca:	31 97       	sbiw	r30, 0x01	; 1
     ecc:	2f ef       	ldi	r18, 0xFF	; 255
     ece:	ef 3f       	cpi	r30, 0xFF	; 255
     ed0:	f2 07       	cpc	r31, r18
     ed2:	d9 f7       	brne	.-10     	; 0xeca <softSerialWrite+0x4c>
     ed4:	28 e0       	ldi	r18, 0x08	; 8
     ed6:	30 e0       	ldi	r19, 0x00	; 0
	// Write the start bit
	*p->_PORT &= ~(1<<p->_TX_PIN_NUM); // tx pin low
	tunedDelay(p->_tx_delay + XMIT_START_ADJUSTMENT);

	// Write each of the 8 bits
	for (byte mask = 0x01; mask; mask <<= 1) {
     ed8:	91 e0       	ldi	r25, 0x01	; 1
		if (b & mask) // choose bit
			*p->_PORT |= (1<<p->_TX_PIN_NUM); // tx pin high, send 1
		else
			*p->_PORT &= ~(1<<p->_TX_PIN_NUM); // tx pin low, send 0
     eda:	41 e0       	ldi	r20, 0x01	; 1
     edc:	50 e0       	ldi	r21, 0x00	; 0


inline void tunedDelay(uint16_t delay) {
	uint8_t tmp = 0;

	asm volatile("sbiw    %0, 0x01 \n\t"
     ede:	d0 e0       	ldi	r29, 0x00	; 0
	*p->_PORT &= ~(1<<p->_TX_PIN_NUM); // tx pin low
	tunedDelay(p->_tx_delay + XMIT_START_ADJUSTMENT);

	// Write each of the 8 bits
	for (byte mask = 0x01; mask; mask <<= 1) {
		if (b & mask) // choose bit
     ee0:	69 2f       	mov	r22, r25
     ee2:	68 23       	and	r22, r24
     ee4:	91 f0       	breq	.+36     	; 0xf0a <softSerialWrite+0x8c>
			*p->_PORT |= (1<<p->_TX_PIN_NUM); // tx pin high, send 1
     ee6:	16 96       	adiw	r26, 0x06	; 6
     ee8:	ed 91       	ld	r30, X+
     eea:	fc 91       	ld	r31, X
     eec:	17 97       	sbiw	r26, 0x07	; 7
     eee:	1b 96       	adiw	r26, 0x0b	; 11
     ef0:	6c 91       	ld	r22, X
     ef2:	1b 97       	sbiw	r26, 0x0b	; 11
     ef4:	8a 01       	movw	r16, r20
     ef6:	02 c0       	rjmp	.+4      	; 0xefc <softSerialWrite+0x7e>
     ef8:	00 0f       	add	r16, r16
     efa:	11 1f       	adc	r17, r17
     efc:	6a 95       	dec	r22
     efe:	e2 f7       	brpl	.-8      	; 0xef8 <softSerialWrite+0x7a>
     f00:	b8 01       	movw	r22, r16
     f02:	70 81       	ld	r23, Z
     f04:	67 2b       	or	r22, r23
     f06:	60 83       	st	Z, r22
     f08:	12 c0       	rjmp	.+36     	; 0xf2e <softSerialWrite+0xb0>
		else
			*p->_PORT &= ~(1<<p->_TX_PIN_NUM); // tx pin low, send 0
     f0a:	16 96       	adiw	r26, 0x06	; 6
     f0c:	ed 91       	ld	r30, X+
     f0e:	fc 91       	ld	r31, X
     f10:	17 97       	sbiw	r26, 0x07	; 7
     f12:	1b 96       	adiw	r26, 0x0b	; 11
     f14:	6c 91       	ld	r22, X
     f16:	1b 97       	sbiw	r26, 0x0b	; 11
     f18:	8a 01       	movw	r16, r20
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <softSerialWrite+0xa2>
     f1c:	00 0f       	add	r16, r16
     f1e:	11 1f       	adc	r17, r17
     f20:	6a 95       	dec	r22
     f22:	e2 f7       	brpl	.-8      	; 0xf1c <softSerialWrite+0x9e>
     f24:	b8 01       	movw	r22, r16
     f26:	60 95       	com	r22
     f28:	70 81       	ld	r23, Z
     f2a:	67 23       	and	r22, r23
     f2c:	60 83       	st	Z, r22

		tunedDelay(p->_tx_delay);
     f2e:	96 96       	adiw	r26, 0x26	; 38
     f30:	ed 91       	ld	r30, X+
     f32:	fc 91       	ld	r31, X
     f34:	97 97       	sbiw	r26, 0x27	; 39


inline void tunedDelay(uint16_t delay) {
	uint8_t tmp = 0;

	asm volatile("sbiw    %0, 0x01 \n\t"
     f36:	6d 2f       	mov	r22, r29
     f38:	31 97       	sbiw	r30, 0x01	; 1
     f3a:	6f ef       	ldi	r22, 0xFF	; 255
     f3c:	ef 3f       	cpi	r30, 0xFF	; 255
     f3e:	f6 07       	cpc	r31, r22
     f40:	d9 f7       	brne	.-10     	; 0xf38 <softSerialWrite+0xba>
	// Write the start bit
	*p->_PORT &= ~(1<<p->_TX_PIN_NUM); // tx pin low
	tunedDelay(p->_tx_delay + XMIT_START_ADJUSTMENT);

	// Write each of the 8 bits
	for (byte mask = 0x01; mask; mask <<= 1) {
     f42:	99 0f       	add	r25, r25
     f44:	21 50       	subi	r18, 0x01	; 1
     f46:	31 09       	sbc	r19, r1
     f48:	21 15       	cp	r18, r1
     f4a:	31 05       	cpc	r19, r1
     f4c:	49 f6       	brne	.-110    	; 0xee0 <softSerialWrite+0x62>
		else
			*p->_PORT &= ~(1<<p->_TX_PIN_NUM); // tx pin low, send 0

		tunedDelay(p->_tx_delay);
	}
	*p->_PORT |= (1<<p->_TX_PIN_NUM); // tx pin high, restore pin to natural state
     f4e:	16 96       	adiw	r26, 0x06	; 6
     f50:	ed 91       	ld	r30, X+
     f52:	fc 91       	ld	r31, X
     f54:	17 97       	sbiw	r26, 0x07	; 7
     f56:	1b 96       	adiw	r26, 0x0b	; 11
     f58:	2c 91       	ld	r18, X
     f5a:	1b 97       	sbiw	r26, 0x0b	; 11
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <softSerialWrite+0xe8>
     f62:	88 0f       	add	r24, r24
     f64:	99 1f       	adc	r25, r25
     f66:	2a 95       	dec	r18
     f68:	e2 f7       	brpl	.-8      	; 0xf62 <softSerialWrite+0xe4>
     f6a:	90 81       	ld	r25, Z
     f6c:	89 2b       	or	r24, r25
     f6e:	80 83       	st	Z, r24

	//sei();
	SREG = oldSREG; // turn interrupts back on
     f70:	cf bf       	out	0x3f, r28	; 63
	tunedDelay(p->_tx_delay);
     f72:	96 96       	adiw	r26, 0x26	; 38
     f74:	8d 91       	ld	r24, X+
     f76:	9c 91       	ld	r25, X
     f78:	97 97       	sbiw	r26, 0x27	; 39


inline void tunedDelay(uint16_t delay) {
	uint8_t tmp = 0;

	asm volatile("sbiw    %0, 0x01 \n\t"
     f7a:	20 e0       	ldi	r18, 0x00	; 0
     f7c:	01 97       	sbiw	r24, 0x01	; 1
     f7e:	2f ef       	ldi	r18, 0xFF	; 255
     f80:	8f 3f       	cpi	r24, 0xFF	; 255
     f82:	92 07       	cpc	r25, r18
     f84:	d9 f7       	brne	.-10     	; 0xf7c <softSerialWrite+0xfe>

	//sei();
	SREG = oldSREG; // turn interrupts back on
	tunedDelay(p->_tx_delay);

	return 1;
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <softSerialWrite+0x112>
}

size_t softSerialWrite(uint8_t b, Uart *p) {
	if (p->_tx_delay == 0) {
		//setWriteError();
		return 0;
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	90 e0       	ldi	r25, 0x00	; 0
	//sei();
	SREG = oldSREG; // turn interrupts back on
	tunedDelay(p->_tx_delay);

	return 1;
}
     f90:	df 91       	pop	r29
     f92:	cf 91       	pop	r28
     f94:	1f 91       	pop	r17
     f96:	0f 91       	pop	r16
     f98:	08 95       	ret

00000f9a <modbus_init>:
unsigned int calculateCRC(unsigned char bufferSize);
void sendPacket(unsigned char bufferSize);
bool testAddress(unsigned int address);

void modbus_init() {
	modbus_error_count = 0;
     f9a:	10 92 8d 00 	sts	0x008D, r1
	modbus_crc_errors = 0;
     f9e:	10 92 a2 00 	sts	0x00A2, r1
     fa2:	10 92 a1 00 	sts	0x00A1, r1
     fa6:	08 95       	ret

00000fa8 <calculateCRC>:

unsigned int calculateCRC(unsigned char bufferSize) 
{
  unsigned int temp, temp2, flag;
  temp = 0xFFFF;
  for (unsigned char i = 0; i < bufferSize; i++)
     fa8:	88 23       	and	r24, r24
     faa:	f1 f0       	breq	.+60     	; 0xfe8 <calculateCRC+0x40>
     fac:	eb ea       	ldi	r30, 0xAB	; 171
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	81 50       	subi	r24, 0x01	; 1
     fb2:	48 2f       	mov	r20, r24
     fb4:	50 e0       	ldi	r21, 0x00	; 0
     fb6:	44 55       	subi	r20, 0x54	; 84
     fb8:	5f 4f       	sbci	r21, 0xFF	; 255


unsigned int calculateCRC(unsigned char bufferSize) 
{
  unsigned int temp, temp2, flag;
  temp = 0xFFFF;
     fba:	8f ef       	ldi	r24, 0xFF	; 255
     fbc:	9f ef       	ldi	r25, 0xFF	; 255
  for (unsigned char i = 0; i < bufferSize; i++)
  {
    temp = temp ^ frame[i];
     fbe:	78 e0       	ldi	r23, 0x08	; 8
     fc0:	21 91       	ld	r18, Z+
     fc2:	82 27       	eor	r24, r18
     fc4:	67 2f       	mov	r22, r23
    for (unsigned char j = 1; j <= 8; j++)
    {
      flag = temp & 0x0001;
     fc6:	9c 01       	movw	r18, r24
     fc8:	21 70       	andi	r18, 0x01	; 1
     fca:	33 27       	eor	r19, r19
      temp >>= 1;
     fcc:	96 95       	lsr	r25
     fce:	87 95       	ror	r24
      if (flag)
     fd0:	23 2b       	or	r18, r19
     fd2:	21 f0       	breq	.+8      	; 0xfdc <calculateCRC+0x34>
        temp ^= 0xA001;
     fd4:	21 e0       	ldi	r18, 0x01	; 1
     fd6:	82 27       	eor	r24, r18
     fd8:	20 ea       	ldi	r18, 0xA0	; 160
     fda:	92 27       	eor	r25, r18
     fdc:	61 50       	subi	r22, 0x01	; 1
  unsigned int temp, temp2, flag;
  temp = 0xFFFF;
  for (unsigned char i = 0; i < bufferSize; i++)
  {
    temp = temp ^ frame[i];
    for (unsigned char j = 1; j <= 8; j++)
     fde:	99 f7       	brne	.-26     	; 0xfc6 <calculateCRC+0x1e>

unsigned int calculateCRC(unsigned char bufferSize) 
{
  unsigned int temp, temp2, flag;
  temp = 0xFFFF;
  for (unsigned char i = 0; i < bufferSize; i++)
     fe0:	e4 17       	cp	r30, r20
     fe2:	f5 07       	cpc	r31, r21
     fe4:	69 f7       	brne	.-38     	; 0xfc0 <calculateCRC+0x18>
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <calculateCRC+0x44>


unsigned int calculateCRC(unsigned char bufferSize) 
{
  unsigned int temp, temp2, flag;
  temp = 0xFFFF;
     fe8:	8f ef       	ldi	r24, 0xFF	; 255
     fea:	9f ef       	ldi	r25, 0xFF	; 255
  // Reverse byte order. 
  temp2 = temp >> 8;
  temp = (temp << 8) | temp2;
  temp &= 0xFFFF;
  return temp; // the returned value is already swopped - crcLo byte is first & crcHi byte is last
}
     fec:	98 27       	eor	r25, r24
     fee:	89 27       	eor	r24, r25
     ff0:	98 27       	eor	r25, r24
     ff2:	08 95       	ret

00000ff4 <sendPacket>:
  if (exception == MODBUS_ERROR_CRC)
    modbus_crc_errors++;
}

void sendPacket(unsigned char bufferSize)
{
     ff4:	0f 93       	push	r16
     ff6:	1f 93       	push	r17
     ff8:	cf 93       	push	r28
     ffa:	df 93       	push	r29
  
  for (unsigned char i = 0; i < bufferSize; i++)
     ffc:	88 23       	and	r24, r24
     ffe:	a1 f0       	breq	.+40     	; 0x1028 <sendPacket+0x34>
    1000:	cb ea       	ldi	r28, 0xAB	; 171
    1002:	d0 e0       	ldi	r29, 0x00	; 0
    1004:	81 50       	subi	r24, 0x01	; 1
    1006:	08 2f       	mov	r16, r24
    1008:	10 e0       	ldi	r17, 0x00	; 0
    100a:	04 55       	subi	r16, 0x54	; 84
    100c:	1f 4f       	sbci	r17, 0xFF	; 255
    (*modbus_SerialWrite)(frame[i], modbus_serial_port);
    100e:	60 91 98 00 	lds	r22, 0x0098
    1012:	70 91 99 00 	lds	r23, 0x0099
    1016:	e0 91 90 00 	lds	r30, 0x0090
    101a:	f0 91 91 00 	lds	r31, 0x0091
    101e:	89 91       	ld	r24, Y+
    1020:	09 95       	icall
}

void sendPacket(unsigned char bufferSize)
{
  
  for (unsigned char i = 0; i < bufferSize; i++)
    1022:	c0 17       	cp	r28, r16
    1024:	d1 07       	cpc	r29, r17
    1026:	99 f7       	brne	.-26     	; 0x100e <sendPacket+0x1a>
    1028:	8d ee       	ldi	r24, 0xED	; 237
    102a:	92 e0       	ldi	r25, 0x02	; 2
    102c:	01 97       	sbiw	r24, 0x01	; 1
    102e:	f1 f7       	brne	.-4      	; 0x102c <sendPacket+0x38>
    1030:	00 c0       	rjmp	.+0      	; 0x1032 <sendPacket+0x3e>
    1032:	00 00       	nop
 
  // allow a frame delay to indicate end of transmission
  _delay_ms(3);
  

}
    1034:	df 91       	pop	r29
    1036:	cf 91       	pop	r28
    1038:	1f 91       	pop	r17
    103a:	0f 91       	pop	r16
    103c:	08 95       	ret

0000103e <exceptionResponse>:
  temp &= 0xFFFF;
  return temp; // the returned value is already swopped - crcLo byte is first & crcHi byte is last
}

void exceptionResponse(unsigned char exception)
{
    103e:	cf 93       	push	r28
    1040:	c8 2f       	mov	r28, r24
  modbus_error_count++; // each call to exceptionResponse() will increment the modbus_error_count
    1042:	80 91 8d 00 	lds	r24, 0x008D
    1046:	8f 5f       	subi	r24, 0xFF	; 255
    1048:	80 93 8d 00 	sts	0x008D, r24
  if (!broadcastFlag) // don't respond if its a broadcast message
    104c:	80 91 aa 00 	lds	r24, 0x00AA
    1050:	81 11       	cpse	r24, r1
    1052:	13 c0       	rjmp	.+38     	; 0x107a <exceptionResponse+0x3c>
  {
    frame[0] = slaveID;
    1054:	80 91 9e 00 	lds	r24, 0x009E
    1058:	80 93 ab 00 	sts	0x00AB, r24
    frame[1] = (function | MODBUS_ERROR_MARKER); // set the MSB bit high, informs the master of an exception
    105c:	80 91 a9 00 	lds	r24, 0x00A9
    1060:	80 68       	ori	r24, 0x80	; 128
    1062:	80 93 ac 00 	sts	0x00AC, r24
    frame[2] = exception;
    1066:	c0 93 ad 00 	sts	0x00AD, r28
    unsigned int crc16 = calculateCRC(3); // ID, function + 0x80, exception code == 3 bytes
    106a:	83 e0       	ldi	r24, 0x03	; 3
    106c:	9d df       	rcall	.-198    	; 0xfa8 <calculateCRC>
    frame[3] = crc16 >> 8;
    106e:	90 93 ae 00 	sts	0x00AE, r25
    frame[4] = crc16 & 0xFF;
    1072:	80 93 af 00 	sts	0x00AF, r24
    // exception response is always 5 bytes ID, function + 0x80, exception code, 2 bytes crc
    sendPacket(5); 
    1076:	85 e0       	ldi	r24, 0x05	; 5
    1078:	bd df       	rcall	.-134    	; 0xff4 <sendPacket>
  }
  buffer = 0;
    107a:	10 92 6b 00 	sts	0x006B, r1

  if (exception == MODBUS_ERROR_CRC)
    107e:	c0 31       	cpi	r28, 0x10	; 16
    1080:	49 f4       	brne	.+18     	; 0x1094 <exceptionResponse+0x56>
    modbus_crc_errors++;
    1082:	80 91 a1 00 	lds	r24, 0x00A1
    1086:	90 91 a2 00 	lds	r25, 0x00A2
    108a:	01 96       	adiw	r24, 0x01	; 1
    108c:	90 93 a2 00 	sts	0x00A2, r25
    1090:	80 93 a1 00 	sts	0x00A1, r24
}
    1094:	cf 91       	pop	r28
    1096:	08 95       	ret

00001098 <testAddress>:
  

}

bool testAddress(unsigned int address) {
	if ((address>=M90E26_START_ADDRESS) && (address<=M90E26_END_ADDRESS)) {
    1098:	80 37       	cpi	r24, 0x70	; 112
    109a:	91 05       	cpc	r25, r1
    109c:	a8 f0       	brcs	.+42     	; 0x10c8 <testAddress+0x30>
		return true;
	} 
	else if ((address >= RELAY_REG_START_ADDRESS) && (address <= RELAY_REG_END_ADDRESS) ) {
    109e:	9c 01       	movw	r18, r24
    10a0:	2b 7f       	andi	r18, 0xFB	; 251
    10a2:	20 58       	subi	r18, 0x80	; 128
    10a4:	31 09       	sbc	r19, r1
    10a6:	22 30       	cpi	r18, 0x02	; 2
    10a8:	31 05       	cpc	r19, r1
    10aa:	80 f0       	brcs	.+32     	; 0x10cc <testAddress+0x34>
		return true;
	}
	else if ((address>=DS18B20_START_ADDRESS) && (address<=DS18B20_END_ADDRESS)) {
		return true;
	}
	else if ((address>=ERRORS_START_ADDRESS) && (address<=ERRORS_END_ADDRESS)) {
    10ac:	9c 01       	movw	r18, r24
    10ae:	28 58       	subi	r18, 0x88	; 136
    10b0:	31 09       	sbc	r19, r1
    10b2:	2a 30       	cpi	r18, 0x0A	; 10
    10b4:	31 05       	cpc	r19, r1
    10b6:	60 f0       	brcs	.+24     	; 0x10d0 <testAddress+0x38>
		return true;
	}
	else if ((address>=DEBUG_REGS_START_ADDRESS) && (address<=DEBUG_REGS_END_ADDRESS)) {
    10b8:	28 50       	subi	r18, 0x08	; 8
    10ba:	31 09       	sbc	r19, r1
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	21 31       	cpi	r18, 0x11	; 17
    10c0:	31 05       	cpc	r19, r1
    10c2:	38 f0       	brcs	.+14     	; 0x10d2 <testAddress+0x3a>
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	08 95       	ret

}

bool testAddress(unsigned int address) {
	if ((address>=M90E26_START_ADDRESS) && (address<=M90E26_END_ADDRESS)) {
		return true;
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	08 95       	ret
	} 
	else if ((address >= RELAY_REG_START_ADDRESS) && (address <= RELAY_REG_END_ADDRESS) ) {
		return true;
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	08 95       	ret
	}
	else if ((address>=DS18B20_START_ADDRESS) && (address<=DS18B20_END_ADDRESS)) {
		return true;
	}
	else if ((address>=ERRORS_START_ADDRESS) && (address<=ERRORS_END_ADDRESS)) {
		return true;
    10d0:	81 e0       	ldi	r24, 0x01	; 1
	else if ((address>=DEBUG_REGS_START_ADDRESS) && (address<=DEBUG_REGS_END_ADDRESS)) {
		return true;
	}
	else 
		return false;
}
    10d2:	08 95       	ret

000010d4 <pull_port>:
void modbus_init() {
	modbus_error_count = 0;
	modbus_crc_errors = 0;
}

unsigned char pull_port(int c){
    10d4:	af 92       	push	r10
    10d6:	bf 92       	push	r11
    10d8:	cf 92       	push	r12
    10da:	df 92       	push	r13
    10dc:	ef 92       	push	r14
    10de:	ff 92       	push	r15
    10e0:	0f 93       	push	r16
    10e2:	1f 93       	push	r17
    10e4:	cf 93       	push	r28
    10e6:	df 93       	push	r29
    10e8:	00 d0       	rcall	.+0      	; 0x10ea <pull_port+0x16>
    10ea:	cd b7       	in	r28, 0x3d	; 61
    10ec:	de b7       	in	r29, 0x3e	; 62

	if (c == -1) {
    10ee:	8f 3f       	cpi	r24, 0xFF	; 255
    10f0:	2f ef       	ldi	r18, 0xFF	; 255
    10f2:	92 07       	cpc	r25, r18
    10f4:	09 f4       	brne	.+2      	; 0x10f8 <pull_port+0x24>
    10f6:	da c0       	rjmp	.+436    	; 0x12ac <pull_port+0x1d8>
		return 0;
	}

	if (!overflow) {
    10f8:	20 91 6a 00 	lds	r18, 0x006A
    10fc:	21 11       	cpse	r18, r1
    10fe:	14 c0       	rjmp	.+40     	; 0x1128 <pull_port+0x54>
		if (buffer == BUFFER_SIZE) {
    1100:	30 91 6b 00 	lds	r19, 0x006B
    1104:	30 31       	cpi	r19, 0x10	; 16
    1106:	19 f4       	brne	.+6      	; 0x110e <pull_port+0x3a>
			overflow = true;
    1108:	21 e0       	ldi	r18, 0x01	; 1
    110a:	20 93 6a 00 	sts	0x006A, r18
		}
		frame[buffer] = (unsigned char)c;
    110e:	e3 2f       	mov	r30, r19
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	e5 55       	subi	r30, 0x55	; 85
    1114:	ff 4f       	sbci	r31, 0xFF	; 255
    1116:	80 83       	st	Z, r24
		buffer++;
    1118:	01 e0       	ldi	r16, 0x01	; 1
    111a:	03 0f       	add	r16, r19
    111c:	00 93 6b 00 	sts	0x006B, r16
	}

	if (overflow) {
    1120:	80 91 6a 00 	lds	r24, 0x006A
    1124:	88 23       	and	r24, r24
    1126:	59 f0       	breq	.+22     	; 0x113e <pull_port+0x6a>
		buffer = 0;
    1128:	10 92 6b 00 	sts	0x006B, r1
		overflow = false;
    112c:	10 92 6a 00 	sts	0x006A, r1
		return modbus_error_count++;
    1130:	80 91 8d 00 	lds	r24, 0x008D
    1134:	91 e0       	ldi	r25, 0x01	; 1
    1136:	98 0f       	add	r25, r24
    1138:	90 93 8d 00 	sts	0x008D, r25
    113c:	bc c0       	rjmp	.+376    	; 0x12b6 <pull_port+0x1e2>
	// The minimum request packet is 8 bytes for function 3 & 16
	/*
	Вообще, надо сделать проверку. Если сейчас буфер меньше, чем должны получить данных -
	то пропускаем и принимаем дальше.
	*/
  	if (buffer > 7) {
    113e:	08 30       	cpi	r16, 0x08	; 8
    1140:	08 f4       	brcc	.+2      	; 0x1144 <pull_port+0x70>
    1142:	b6 c0       	rjmp	.+364    	; 0x12b0 <pull_port+0x1dc>
  		unsigned char id = frame[0];
    1144:	80 91 ab 00 	lds	r24, 0x00AB
  		broadcastFlag = (id == MODBUS_BROADCAST_ID);
    1148:	ff 24       	eor	r15, r15
    114a:	f3 94       	inc	r15
    114c:	81 11       	cpse	r24, r1
    114e:	f1 2c       	mov	r15, r1
    1150:	f0 92 aa 00 	sts	0x00AA, r15
  		

  		if (id == slaveID || broadcastFlag) {
    1154:	90 91 9e 00 	lds	r25, 0x009E
    1158:	89 17       	cp	r24, r25
    115a:	19 f0       	breq	.+6      	; 0x1162 <pull_port+0x8e>
    115c:	ff 20       	and	r15, r15
    115e:	09 f4       	brne	.+2      	; 0x1162 <pull_port+0x8e>
    1160:	a9 c0       	rjmp	.+338    	; 0x12b4 <pull_port+0x1e0>
  			function = frame[1];
    1162:	e0 90 ac 00 	lds	r14, 0x00AC
    1166:	e0 92 a9 00 	sts	0x00A9, r14
			// костыль!
			if ((frame[1] != MODBUS_FUNCTION_READ_AO) && (frame[1] != MODBUS_FUNCTION_WRITE_AO)) {
    116a:	63 e0       	ldi	r22, 0x03	; 3
    116c:	e6 16       	cp	r14, r22
    116e:	41 f0       	breq	.+16     	; 0x1180 <pull_port+0xac>
    1170:	76 e0       	ldi	r23, 0x06	; 6
    1172:	e7 16       	cp	r14, r23
    1174:	29 f0       	breq	.+10     	; 0x1180 <pull_port+0xac>
				exceptionResponse(MODBUS_ERROR_ILLEGAL_FUNCTION);
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	62 df       	rcall	.-316    	; 0x103e <exceptionResponse>
				return modbus_error_count;
    117a:	80 91 8d 00 	lds	r24, 0x008D
    117e:	9b c0       	rjmp	.+310    	; 0x12b6 <pull_port+0x1e2>
			}
  			// combine the crc Low & High bytes
  			unsigned int crc = ((frame[buffer - 2] << 8) | frame[buffer - 1]);
    1180:	10 e0       	ldi	r17, 0x00	; 0
  			

  			if (calculateCRC(buffer - 2) == crc) {
    1182:	8f ef       	ldi	r24, 0xFF	; 255
    1184:	83 0f       	add	r24, r19
    1186:	10 df       	rcall	.-480    	; 0xfa8 <calculateCRC>
			if ((frame[1] != MODBUS_FUNCTION_READ_AO) && (frame[1] != MODBUS_FUNCTION_WRITE_AO)) {
				exceptionResponse(MODBUS_ERROR_ILLEGAL_FUNCTION);
				return modbus_error_count;
			}
  			// combine the crc Low & High bytes
  			unsigned int crc = ((frame[buffer - 2] << 8) | frame[buffer - 1]);
    1188:	98 01       	movw	r18, r16
    118a:	25 55       	subi	r18, 0x55	; 85
    118c:	3f 4f       	sbci	r19, 0xFF	; 255
    118e:	f9 01       	movw	r30, r18
    1190:	32 97       	sbiw	r30, 0x02	; 2
    1192:	40 81       	ld	r20, Z
    1194:	50 e0       	ldi	r21, 0x00	; 0
    1196:	54 2f       	mov	r21, r20
    1198:	44 27       	eor	r20, r20
    119a:	31 96       	adiw	r30, 0x01	; 1
    119c:	20 81       	ld	r18, Z
    119e:	ba 01       	movw	r22, r20
    11a0:	62 2b       	or	r22, r18
    11a2:	9b 01       	movw	r18, r22
  			

  			if (calculateCRC(buffer - 2) == crc) {
    11a4:	82 17       	cp	r24, r18
    11a6:	93 07       	cpc	r25, r19
    11a8:	09 f0       	breq	.+2      	; 0x11ac <pull_port+0xd8>
    11aa:	7c c0       	rjmp	.+248    	; 0x12a4 <pull_port+0x1d0>
  				function = frame[1];
  				unsigned int startingAddress = ((frame[2] << 8) | frame[3]);
    11ac:	c0 90 ad 00 	lds	r12, 0x00AD
    11b0:	d1 2c       	mov	r13, r1
    11b2:	dc 2c       	mov	r13, r12
    11b4:	cc 24       	eor	r12, r12
    11b6:	80 91 ae 00 	lds	r24, 0x00AE
    11ba:	c8 2a       	or	r12, r24
  				unsigned int no_of_registers = ((frame[4] << 8) | frame[5]);
    11bc:	00 91 af 00 	lds	r16, 0x00AF
    11c0:	10 e0       	ldi	r17, 0x00	; 0
    11c2:	10 2f       	mov	r17, r16
    11c4:	00 27       	eor	r16, r16
    11c6:	80 91 b0 00 	lds	r24, 0x00B0
    11ca:	08 2b       	or	r16, r24
    11cc:	58 01       	movw	r10, r16
  				unsigned int crc16;

  				if (!broadcastFlag && (function == MODBUS_FUNCTION_READ_AO)) {
    11ce:	f1 10       	cpse	r15, r1
    11d0:	47 c0       	rjmp	.+142    	; 0x1260 <pull_port+0x18c>
    11d2:	73 e0       	ldi	r23, 0x03	; 3
    11d4:	e7 12       	cpse	r14, r23
    11d6:	44 c0       	rjmp	.+136    	; 0x1260 <pull_port+0x18c>
  					if (testAddress(startingAddress)) {
    11d8:	c6 01       	movw	r24, r12
    11da:	5e df       	rcall	.-324    	; 0x1098 <testAddress>
    11dc:	88 23       	and	r24, r24
    11de:	e1 f1       	breq	.+120    	; 0x1258 <pull_port+0x184>
  						if (no_of_registers == 1) {
    11e0:	aa 94       	dec	r10
    11e2:	ab 28       	or	r10, r11
    11e4:	a9 f5       	brne	.+106    	; 0x1250 <pull_port+0x17c>
  							unsigned int temp = 0;
    11e6:	1a 82       	std	Y+2, r1	; 0x02
    11e8:	19 82       	std	Y+1, r1	; 0x01

  							if ((*modbus_read_reg)(startingAddress, &temp)) {
    11ea:	e0 91 8b 00 	lds	r30, 0x008B
    11ee:	f0 91 8c 00 	lds	r31, 0x008C
    11f2:	be 01       	movw	r22, r28
    11f4:	6f 5f       	subi	r22, 0xFF	; 255
    11f6:	7f 4f       	sbci	r23, 0xFF	; 255
    11f8:	c6 01       	movw	r24, r12
    11fa:	09 95       	icall
    11fc:	88 23       	and	r24, r24
    11fe:	21 f1       	breq	.+72     	; 0x1248 <pull_port+0x174>
  								unsigned char noOfBytes = no_of_registers * 2;
    1200:	00 0f       	add	r16, r16
	  							unsigned char responseFrameSize = 5 + noOfBytes;
    1202:	15 e0       	ldi	r17, 0x05	; 5
    1204:	10 0f       	add	r17, r16
	  							frame[0] = slaveID;
    1206:	80 91 9e 00 	lds	r24, 0x009E
    120a:	80 93 ab 00 	sts	0x00AB, r24
	              				frame[1] = function;
    120e:	80 91 a9 00 	lds	r24, 0x00A9
    1212:	80 93 ac 00 	sts	0x00AC, r24
	              				frame[2] = noOfBytes;
    1216:	00 93 ad 00 	sts	0x00AD, r16
	  							frame[3] = temp >> 8;
    121a:	89 81       	ldd	r24, Y+1	; 0x01
    121c:	9a 81       	ldd	r25, Y+2	; 0x02
    121e:	90 93 ae 00 	sts	0x00AE, r25
	  							frame[4] = temp & 0x00FF;
    1222:	80 93 af 00 	sts	0x00AF, r24
	  							crc16 = calculateCRC(responseFrameSize - 2);
    1226:	83 e0       	ldi	r24, 0x03	; 3
    1228:	80 0f       	add	r24, r16
    122a:	be de       	rcall	.-644    	; 0xfa8 <calculateCRC>
	  							frame[responseFrameSize - 2] = crc16 >> 8;
    122c:	21 2f       	mov	r18, r17
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	25 55       	subi	r18, 0x55	; 85
    1232:	3f 4f       	sbci	r19, 0xFF	; 255
    1234:	f9 01       	movw	r30, r18
    1236:	32 97       	sbiw	r30, 0x02	; 2
    1238:	90 83       	st	Z, r25
	              				frame[responseFrameSize - 1] = crc16 & 0xFF;
    123a:	31 96       	adiw	r30, 0x01	; 1
    123c:	80 83       	st	Z, r24
	  							sendPacket(responseFrameSize);
    123e:	81 2f       	mov	r24, r17
    1240:	d9 de       	rcall	.-590    	; 0xff4 <sendPacket>
	  							buffer = 0;
    1242:	10 92 6b 00 	sts	0x006B, r1
    1246:	02 c0       	rjmp	.+4      	; 0x124c <pull_port+0x178>
  							}
  							else 
  								exceptionResponse(MODBUS_ERROR_SLAVE_DEVICE_FAILURE);
    1248:	84 e0       	ldi	r24, 0x04	; 4
    124a:	f9 de       	rcall	.-526    	; 0x103e <exceptionResponse>

  	} else {
  		return 0;
  	}

  	return 0;
    124c:	80 e0       	ldi	r24, 0x00	; 0
    124e:	33 c0       	rjmp	.+102    	; 0x12b6 <pull_port+0x1e2>
  							}
  							else 
  								exceptionResponse(MODBUS_ERROR_SLAVE_DEVICE_FAILURE);
  						}
  						else
  							exceptionResponse(MODBUS_ERROR_ILLEGAL_DATA_VALUE);
    1250:	83 e0       	ldi	r24, 0x03	; 3
    1252:	f5 de       	rcall	.-534    	; 0x103e <exceptionResponse>

  	} else {
  		return 0;
  	}

  	return 0;
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	2f c0       	rjmp	.+94     	; 0x12b6 <pull_port+0x1e2>
  						}
  						else
  							exceptionResponse(MODBUS_ERROR_ILLEGAL_DATA_VALUE);
  					}
  					else 
  						exceptionResponse(MODBUS_ERROR_ILLEGAL_DATA_ADDRESS);
    1258:	82 e0       	ldi	r24, 0x02	; 2
    125a:	f1 de       	rcall	.-542    	; 0x103e <exceptionResponse>

  	} else {
  		return 0;
  	}

  	return 0;
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	2b c0       	rjmp	.+86     	; 0x12b6 <pull_port+0x1e2>
  							exceptionResponse(MODBUS_ERROR_ILLEGAL_DATA_VALUE);
  					}
  					else 
  						exceptionResponse(MODBUS_ERROR_ILLEGAL_DATA_ADDRESS);
  				}
  				else if (function == MODBUS_FUNCTION_WRITE_AO) {
    1260:	26 e0       	ldi	r18, 0x06	; 6
    1262:	e2 12       	cpse	r14, r18
    1264:	1b c0       	rjmp	.+54     	; 0x129c <pull_port+0x1c8>
  					if (testAddress(startingAddress)) {
    1266:	c6 01       	movw	r24, r12
    1268:	17 df       	rcall	.-466    	; 0x1098 <testAddress>
    126a:	88 23       	and	r24, r24
    126c:	99 f0       	breq	.+38     	; 0x1294 <pull_port+0x1c0>
  						unsigned int startingAddress = ((frame[2] << 8) | frame[3]);
              			unsigned int regStatus = ((frame[4] << 8) | frame[5]);

              			if ((*modbus_write_reg)(startingAddress,regStatus)){
    126e:	e0 91 89 00 	lds	r30, 0x0089
    1272:	f0 91 8a 00 	lds	r31, 0x008A
    1276:	b8 01       	movw	r22, r16
    1278:	c6 01       	movw	r24, r12
    127a:	09 95       	icall
    127c:	88 23       	and	r24, r24
    127e:	31 f0       	breq	.+12     	; 0x128c <pull_port+0x1b8>
              				sendPacket(MODBUS_FUNCTION_WRITE_AO_RESPONSE_SIZE);
    1280:	88 e0       	ldi	r24, 0x08	; 8
    1282:	b8 de       	rcall	.-656    	; 0xff4 <sendPacket>
              				buffer = 0;
    1284:	10 92 6b 00 	sts	0x006B, r1

  	} else {
  		return 0;
  	}

  	return 0;
    1288:	80 e0       	ldi	r24, 0x00	; 0
    128a:	15 c0       	rjmp	.+42     	; 0x12b6 <pull_port+0x1e2>
              			if ((*modbus_write_reg)(startingAddress,regStatus)){
              				sendPacket(MODBUS_FUNCTION_WRITE_AO_RESPONSE_SIZE);
              				buffer = 0;
              			}
              			else 
              				exceptionResponse(MODBUS_ERROR_SLAVE_DEVICE_FAILURE);
    128c:	84 e0       	ldi	r24, 0x04	; 4
    128e:	d7 de       	rcall	.-594    	; 0x103e <exceptionResponse>

  	} else {
  		return 0;
  	}

  	return 0;
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	11 c0       	rjmp	.+34     	; 0x12b6 <pull_port+0x1e2>
              			}
              			else 
              				exceptionResponse(MODBUS_ERROR_SLAVE_DEVICE_FAILURE);
  					}
  					else
  						exceptionResponse(MODBUS_ERROR_ILLEGAL_DATA_ADDRESS);
    1294:	82 e0       	ldi	r24, 0x02	; 2
    1296:	d3 de       	rcall	.-602    	; 0x103e <exceptionResponse>

  	} else {
  		return 0;
  	}

  	return 0;
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	0d c0       	rjmp	.+26     	; 0x12b6 <pull_port+0x1e2>
  					}
  					else
  						exceptionResponse(MODBUS_ERROR_ILLEGAL_DATA_ADDRESS);
  				}
  				else
          			exceptionResponse(MODBUS_ERROR_ILLEGAL_FUNCTION);
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	cf de       	rcall	.-610    	; 0x103e <exceptionResponse>

  	} else {
  		return 0;
  	}

  	return 0;
    12a0:	80 e0       	ldi	r24, 0x00	; 0
    12a2:	09 c0       	rjmp	.+18     	; 0x12b6 <pull_port+0x1e2>

  			}
  			else 
  			{	
				//sendPacket(buffer);
  				exceptionResponse(MODBUS_ERROR_CRC);
    12a4:	80 e1       	ldi	r24, 0x10	; 16
    12a6:	cb de       	rcall	.-618    	; 0x103e <exceptionResponse>

  	} else {
  		return 0;
  	}

  	return 0;
    12a8:	80 e0       	ldi	r24, 0x00	; 0
    12aa:	05 c0       	rjmp	.+10     	; 0x12b6 <pull_port+0x1e2>
}

unsigned char pull_port(int c){

	if (c == -1) {
		return 0;
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	03 c0       	rjmp	.+6      	; 0x12b6 <pull_port+0x1e2>
  			}
  		}


  	} else {
  		return 0;
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	01 c0       	rjmp	.+2      	; 0x12b6 <pull_port+0x1e2>
  	}

  	return 0;
    12b4:	80 e0       	ldi	r24, 0x00	; 0

}
    12b6:	0f 90       	pop	r0
    12b8:	0f 90       	pop	r0
    12ba:	df 91       	pop	r29
    12bc:	cf 91       	pop	r28
    12be:	1f 91       	pop	r17
    12c0:	0f 91       	pop	r16
    12c2:	ff 90       	pop	r15
    12c4:	ef 90       	pop	r14
    12c6:	df 90       	pop	r13
    12c8:	cf 90       	pop	r12
    12ca:	bf 90       	pop	r11
    12cc:	af 90       	pop	r10
    12ce:	08 95       	ret

000012d0 <__adddi3_s8>:
    12d0:	00 24       	eor	r0, r0
    12d2:	a7 fd       	sbrc	r26, 7
    12d4:	00 94       	com	r0
    12d6:	2a 0f       	add	r18, r26
    12d8:	30 1d       	adc	r19, r0
    12da:	40 1d       	adc	r20, r0
    12dc:	50 1d       	adc	r21, r0
    12de:	60 1d       	adc	r22, r0
    12e0:	70 1d       	adc	r23, r0
    12e2:	80 1d       	adc	r24, r0
    12e4:	90 1d       	adc	r25, r0
    12e6:	08 95       	ret

000012e8 <__subdi3>:
    12e8:	2a 19       	sub	r18, r10
    12ea:	3b 09       	sbc	r19, r11
    12ec:	4c 09       	sbc	r20, r12
    12ee:	5d 09       	sbc	r21, r13
    12f0:	6e 09       	sbc	r22, r14
    12f2:	7f 09       	sbc	r23, r15
    12f4:	80 0b       	sbc	r24, r16
    12f6:	91 0b       	sbc	r25, r17
    12f8:	08 95       	ret

000012fa <__cmpdi2_s8>:
    12fa:	00 24       	eor	r0, r0
    12fc:	a7 fd       	sbrc	r26, 7
    12fe:	00 94       	com	r0
    1300:	2a 17       	cp	r18, r26
    1302:	30 05       	cpc	r19, r0
    1304:	40 05       	cpc	r20, r0
    1306:	50 05       	cpc	r21, r0
    1308:	60 05       	cpc	r22, r0
    130a:	70 05       	cpc	r23, r0
    130c:	80 05       	cpc	r24, r0
    130e:	90 05       	cpc	r25, r0
    1310:	08 95       	ret

00001312 <__eerd_byte_tn84a>:
    1312:	e1 99       	sbic	0x1c, 1	; 28
    1314:	fe cf       	rjmp	.-4      	; 0x1312 <__eerd_byte_tn84a>
    1316:	9f bb       	out	0x1f, r25	; 31
    1318:	8e bb       	out	0x1e, r24	; 30
    131a:	e0 9a       	sbi	0x1c, 0	; 28
    131c:	99 27       	eor	r25, r25
    131e:	8d b3       	in	r24, 0x1d	; 29
    1320:	08 95       	ret

00001322 <__eewr_byte_tn84a>:
    1322:	26 2f       	mov	r18, r22

00001324 <__eewr_r18_tn84a>:
    1324:	e1 99       	sbic	0x1c, 1	; 28
    1326:	fe cf       	rjmp	.-4      	; 0x1324 <__eewr_r18_tn84a>
    1328:	1c ba       	out	0x1c, r1	; 28
    132a:	9f bb       	out	0x1f, r25	; 31
    132c:	8e bb       	out	0x1e, r24	; 30
    132e:	2d bb       	out	0x1d, r18	; 29
    1330:	0f b6       	in	r0, 0x3f	; 63
    1332:	f8 94       	cli
    1334:	e2 9a       	sbi	0x1c, 2	; 28
    1336:	e1 9a       	sbi	0x1c, 1	; 28
    1338:	0f be       	out	0x3f, r0	; 63
    133a:	01 96       	adiw	r24, 0x01	; 1
    133c:	08 95       	ret

0000133e <_exit>:
    133e:	f8 94       	cli

00001340 <__stop_program>:
    1340:	ff cf       	rjmp	.-2      	; 0x1340 <__stop_program>
