
GccApplication4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000208  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000208  0000029c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080006a  0080006a  000002a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a86  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000659  00000000  00000000  00000dda  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000450  00000000  00000000  00001433  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  00001884  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a5  00000000  00000000  000018f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000336  00000000  00000000  00001c99  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001fcf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 e0       	ldi	r30, 0x08	; 8
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	aa 36       	cpi	r26, 0x6A	; 106
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	aa e6       	ldi	r26, 0x6A	; 106
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 37       	cpi	r26, 0x70	; 112
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	52 d0       	rcall	.+164    	; 0xfe <main>
  5a:	d4 c0       	rjmp	.+424    	; 0x204 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <uart_putc>:
	#endif /* !UART_RX_ENABLED */
}

void
uart_putc(char c)
{
  5e:	cf 93       	push	r28
  60:	df 93       	push	r29
	#ifdef    UART_TX_ENABLED
	uint8_t sreg;

	sreg = SREG;
  62:	9f b7       	in	r25, 0x3f	; 63
	cli();
  64:	f8 94       	cli
	PORTB |= 1 << UART_TX;
  66:	c0 9a       	sbi	0x18, 0	; 24
	DDRB |= 1 << UART_TX;
  68:	b8 9a       	sbi	0x17, 0	; 23
	asm volatile(
  6a:	c0 98       	cbi	0x18, 0	; 24
  6c:	08 b2       	in	r0, 0x18	; 24
  6e:	e3 e0       	ldi	r30, 0x03	; 3
  70:	c0 e2       	ldi	r28, 0x20	; 32

00000072 <TxLoop>:
  72:	dc 2f       	mov	r29, r28

00000074 <TxDelay>:
  74:	da 95       	dec	r29
  76:	f1 f7       	brne	.-4      	; 0x74 <TxDelay>
  78:	80 fb       	bst	r24, 0
  7a:	00 f8       	bld	r0, 0
  7c:	e6 95       	lsr	r30
  7e:	87 95       	ror	r24
  80:	08 ba       	out	0x18, r0	; 24
  82:	b9 f7       	brne	.-18     	; 0x72 <TxLoop>
	[uart_pin] "I" (UART_TX),
	[txdelay] "I" (TXDELAY),
	[ch] "r" (c)
	: "r0","r28","r29","r30"
	);
	SREG = sreg;
  84:	9f bf       	out	0x3f, r25	; 63
	#endif /* !UART_TX_ENABLED */
}
  86:	df 91       	pop	r29
  88:	cf 91       	pop	r28
  8a:	08 95       	ret

0000008c <DS18B20_init>:
unsigned int buffer;

// Инициализация DS18B20
unsigned char DS18B20_init(void)
{
	DDRC |= (1 << PC0); // PC0 - выход
  8c:	a0 9a       	sbi	0x14, 0	; 20
	PORTC &= ~(1 << PC0); // Устанавливаем низкий уровень
  8e:	a8 98       	cbi	0x15, 0	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	83 ea       	ldi	r24, 0xA3	; 163
  92:	8a 95       	dec	r24
  94:	f1 f7       	brne	.-4      	; 0x92 <DS18B20_init+0x6>
  96:	00 00       	nop
	_delay_us(490);
	DDRC &= ~(1 << PC0); // PC0 - вход
  98:	a0 98       	cbi	0x14, 0	; 20
  9a:	86 e1       	ldi	r24, 0x16	; 22
  9c:	8a 95       	dec	r24
  9e:	f1 f7       	brne	.-4      	; 0x9c <DS18B20_init+0x10>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <DS18B20_init+0x16>
	_delay_us(68);
	OK_Flag = (PINC & (1 << PC0)); // Ловим импульс присутствия датчика
  a2:	83 b3       	in	r24, 0x13	; 19
  a4:	81 70       	andi	r24, 0x01	; 1
  a6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <OK_Flag>
  aa:	8c e8       	ldi	r24, 0x8C	; 140
  ac:	8a 95       	dec	r24
  ae:	f1 f7       	brne	.-4      	; 0xac <DS18B20_init+0x20>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <DS18B20_init+0x26>
	// если OK_Flag = 0 датчик подключен, OK_Flag = 1 датчик не подключен
	_delay_us(422);
	return OK_Flag;
}
  b2:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <OK_Flag>
  b6:	08 95       	ret

000000b8 <read_18b20>:



// Функция чтения байта из DS18B20
unsigned char read_18b20(void)
{
  b8:	98 e0       	ldi	r25, 0x08	; 8
	unsigned char i, data = 0;
  ba:	80 e0       	ldi	r24, 0x00	; 0
	for(i = 0; i < 8; i++)
	{
		DDRC |= (1 << PC0); // PC0 - выход
  bc:	a0 9a       	sbi	0x14, 0	; 20
  be:	00 c0       	rjmp	.+0      	; 0xc0 <read_18b20+0x8>
		_delay_us(2);
		DDRC &= ~(1 << PC0); // PC0 - вход
  c0:	a0 98       	cbi	0x14, 0	; 20
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <read_18b20+0xc>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <read_18b20+0xe>
		_delay_us(4);
		data = data >> 1; // Следующий бит
  c6:	86 95       	lsr	r24
		if(PINC & (1 << PC0)) data |= 0x80;
  c8:	98 99       	sbic	0x13, 0	; 19
  ca:	80 68       	ori	r24, 0x80	; 128
  cc:	24 e1       	ldi	r18, 0x14	; 20
  ce:	2a 95       	dec	r18
  d0:	f1 f7       	brne	.-4      	; 0xce <read_18b20+0x16>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <read_18b20+0x1c>
  d4:	91 50       	subi	r25, 0x01	; 1

// Функция чтения байта из DS18B20
unsigned char read_18b20(void)
{
	unsigned char i, data = 0;
	for(i = 0; i < 8; i++)
  d6:	91 f7       	brne	.-28     	; 0xbc <read_18b20+0x4>
		data = data >> 1; // Следующий бит
		if(PINC & (1 << PC0)) data |= 0x80;
		_delay_us(62);
	}
	return data;
}
  d8:	08 95       	ret

000000da <write_18b20>:

// Функция записи байта в DS18B20
void write_18b20(unsigned char data)
{
  da:	98 e0       	ldi	r25, 0x08	; 8
	unsigned char i;
	for(i = 0; i < 8; i++)
	{
		DDRC |= (1 << PC0); // PC0 - выход
  dc:	a0 9a       	sbi	0x14, 0	; 20
  de:	00 c0       	rjmp	.+0      	; 0xe0 <write_18b20+0x6>
		_delay_us(2);
		if(data & 0x01) DDRC &= ~(1 << PC0);
  e0:	80 ff       	sbrs	r24, 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <write_18b20+0xe>
  e4:	a0 98       	cbi	0x14, 0	; 20
  e6:	01 c0       	rjmp	.+2      	; 0xea <write_18b20+0x10>
		else DDRC |= (1 << PC0);
  e8:	a0 9a       	sbi	0x14, 0	; 20
		data = data >> 1; // Следующий бит
  ea:	86 95       	lsr	r24
  ec:	24 e1       	ldi	r18, 0x14	; 20
  ee:	2a 95       	dec	r18
  f0:	f1 f7       	brne	.-4      	; 0xee <write_18b20+0x14>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <write_18b20+0x1a>
		_delay_us(62);
		DDRC &= ~(1 << PC0); // PC0 - вход
  f4:	a0 98       	cbi	0x14, 0	; 20
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <write_18b20+0x1e>
  f8:	91 50       	subi	r25, 0x01	; 1

// Функция записи байта в DS18B20
void write_18b20(unsigned char data)
{
	unsigned char i;
	for(i = 0; i < 8; i++)
  fa:	81 f7       	brne	.-32     	; 0xdc <write_18b20+0x2>
		data = data >> 1; // Следующий бит
		_delay_us(62);
		DDRC &= ~(1 << PC0); // PC0 - вход
		_delay_us(2);
	}
}                       // разрешаем прерывания
  fc:	08 95       	ret

000000fe <main>:

int main(void)
{	
  fe:	c1 e6       	ldi	r28, 0x61	; 97
 100:	d0 e0       	ldi	r29, 0x00	; 0
 102:	84 e5       	ldi	r24, 0x54	; 84
}

void
uart_puts(const char *s)
{
	while (*s) uart_putc(*(s++));
 104:	ac df       	rcall	.-168    	; 0x5e <uart_putc>
 106:	89 91       	ld	r24, Y+
 108:	81 11       	cpse	r24, r1
 10a:	fc cf       	rjmp	.-8      	; 0x104 <main+0x6>
			Temp_H = read_18b20();
			buffer = ((Temp_H << 4) & 0x70)|(Temp_L >> 4);
			_delay_ms(250);
			
			uart_putc((buffer % 1000/100)+48);
			uart_putc((buffer % 100/10)+48);
 10c:	14 e6       	ldi	r17, 0x64	; 100
    unsigned int buffer;
    unsigned int temp_point; // Переменная для дробного значения температуры
    uart_puts("TRANSMIT\n");
		while(1){
			char c, *p, buff[16];
			DS18B20_init();        // Инициализация DS18B20
 10e:	be df       	rcall	.-132    	; 0x8c <DS18B20_init>
			write_18b20(0xCC);     // Проверка кода датчика
 110:	8c ec       	ldi	r24, 0xCC	; 204
 112:	e3 df       	rcall	.-58     	; 0xda <write_18b20>
			write_18b20(0x44);     // Запуск температурного преобразования
 114:	84 e4       	ldi	r24, 0x44	; 68
 116:	e1 df       	rcall	.-62     	; 0xda <write_18b20>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 118:	83 e2       	ldi	r24, 0x23	; 35
 11a:	94 ef       	ldi	r25, 0xF4	; 244
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <main+0x1e>
 120:	00 c0       	rjmp	.+0      	; 0x122 <main+0x24>
 122:	00 00       	nop
			_delay_ms(250);
			DS18B20_init();        // Инициализация DS18B20
 124:	b3 df       	rcall	.-154    	; 0x8c <DS18B20_init>
			write_18b20(0xCC);     // Проверка кода датчика
 126:	8c ec       	ldi	r24, 0xCC	; 204
 128:	d8 df       	rcall	.-80     	; 0xda <write_18b20>
			write_18b20(0xBE);     // Считываем содержимое ОЗУ
 12a:	8e eb       	ldi	r24, 0xBE	; 190
 12c:	d6 df       	rcall	.-84     	; 0xda <write_18b20>
			Temp_L = read_18b20(); // Читаем первые 2 байта блокнота
 12e:	c4 df       	rcall	.-120    	; 0xb8 <read_18b20>
 130:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
			Temp_H = read_18b20();
 134:	c1 df       	rcall	.-126    	; 0xb8 <read_18b20>
 136:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <Temp_H>
			buffer = ((Temp_H << 4) & 0x70)|(Temp_L >> 4);
 13a:	90 e1       	ldi	r25, 0x10	; 16
 13c:	89 9f       	mul	r24, r25
 13e:	e0 01       	movw	r28, r0
 140:	11 24       	eor	r1, r1
 142:	c0 77       	andi	r28, 0x70	; 112
 144:	dd 27       	eor	r29, r29
 146:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 14a:	82 95       	swap	r24
 14c:	8f 70       	andi	r24, 0x0F	; 15
 14e:	c8 2b       	or	r28, r24
 150:	83 e2       	ldi	r24, 0x23	; 35
 152:	94 ef       	ldi	r25, 0xF4	; 244
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <main+0x56>
 158:	00 c0       	rjmp	.+0      	; 0x15a <main+0x5c>
 15a:	00 00       	nop
			_delay_ms(250);
			
			uart_putc((buffer % 1000/100)+48);
 15c:	9e 01       	movw	r18, r28
 15e:	36 95       	lsr	r19
 160:	27 95       	ror	r18
 162:	36 95       	lsr	r19
 164:	27 95       	ror	r18
 166:	ab e7       	ldi	r26, 0x7B	; 123
 168:	b4 e1       	ldi	r27, 0x14	; 20
 16a:	40 d0       	rcall	.+128    	; 0x1ec <__umulhisi3>
 16c:	96 95       	lsr	r25
 16e:	87 95       	ror	r24
 170:	80 5d       	subi	r24, 0xD0	; 208
 172:	75 df       	rcall	.-278    	; 0x5e <uart_putc>
			uart_putc((buffer % 100/10)+48);
 174:	9e 01       	movw	r18, r28
 176:	36 95       	lsr	r19
 178:	27 95       	ror	r18
 17a:	36 95       	lsr	r19
 17c:	27 95       	ror	r18
 17e:	ab e7       	ldi	r26, 0x7B	; 123
 180:	b4 e1       	ldi	r27, 0x14	; 20
 182:	34 d0       	rcall	.+104    	; 0x1ec <__umulhisi3>
 184:	96 95       	lsr	r25
 186:	87 95       	ror	r24
 188:	18 9f       	mul	r17, r24
 18a:	90 01       	movw	r18, r0
 18c:	19 9f       	mul	r17, r25
 18e:	30 0d       	add	r19, r0
 190:	11 24       	eor	r1, r1
 192:	ce 01       	movw	r24, r28
 194:	82 1b       	sub	r24, r18
 196:	93 0b       	sbc	r25, r19
 198:	9c 01       	movw	r18, r24
 19a:	ad ec       	ldi	r26, 0xCD	; 205
 19c:	bc ec       	ldi	r27, 0xCC	; 204
 19e:	26 d0       	rcall	.+76     	; 0x1ec <__umulhisi3>
 1a0:	96 95       	lsr	r25
 1a2:	87 95       	ror	r24
 1a4:	96 95       	lsr	r25
 1a6:	87 95       	ror	r24
 1a8:	96 95       	lsr	r25
 1aa:	87 95       	ror	r24
 1ac:	80 5d       	subi	r24, 0xD0	; 208
 1ae:	57 df       	rcall	.-338    	; 0x5e <uart_putc>
			uart_putc((buffer % 10)+48);
 1b0:	9e 01       	movw	r18, r28
 1b2:	ad ec       	ldi	r26, 0xCD	; 205
 1b4:	bc ec       	ldi	r27, 0xCC	; 204
 1b6:	1a d0       	rcall	.+52     	; 0x1ec <__umulhisi3>
 1b8:	96 95       	lsr	r25
 1ba:	87 95       	ror	r24
 1bc:	96 95       	lsr	r25
 1be:	87 95       	ror	r24
 1c0:	96 95       	lsr	r25
 1c2:	87 95       	ror	r24
 1c4:	9c 01       	movw	r18, r24
 1c6:	22 0f       	add	r18, r18
 1c8:	33 1f       	adc	r19, r19
 1ca:	88 0f       	add	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	82 0f       	add	r24, r18
 1d8:	93 1f       	adc	r25, r19
 1da:	9e 01       	movw	r18, r28
 1dc:	28 1b       	sub	r18, r24
 1de:	39 0b       	sbc	r19, r25
 1e0:	c9 01       	movw	r24, r18
 1e2:	80 5d       	subi	r24, 0xD0	; 208
 1e4:	3c df       	rcall	.-392    	; 0x5e <uart_putc>
			uart_putc('\r');
 1e6:	8d e0       	ldi	r24, 0x0D	; 13
 1e8:	3a df       	rcall	.-396    	; 0x5e <uart_putc>
 1ea:	91 cf       	rjmp	.-222    	; 0x10e <main+0x10>

000001ec <__umulhisi3>:
 1ec:	a2 9f       	mul	r26, r18
 1ee:	b0 01       	movw	r22, r0
 1f0:	b3 9f       	mul	r27, r19
 1f2:	c0 01       	movw	r24, r0
 1f4:	a3 9f       	mul	r26, r19
 1f6:	01 d0       	rcall	.+2      	; 0x1fa <__umulhisi3+0xe>
 1f8:	b2 9f       	mul	r27, r18
 1fa:	70 0d       	add	r23, r0
 1fc:	81 1d       	adc	r24, r1
 1fe:	11 24       	eor	r1, r1
 200:	91 1d       	adc	r25, r1
 202:	08 95       	ret

00000204 <_exit>:
 204:	f8 94       	cli

00000206 <__stop_program>:
 206:	ff cf       	rjmp	.-2      	; 0x206 <__stop_program>
