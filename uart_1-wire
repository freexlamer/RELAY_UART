/*
 * GccApplication4.c
 *
 * Created: 29.09.2019 21:41:30
 * Author : User
 */ 


#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

#define    UART_RX_ENABLED        (1) // Enable UART RX
#define    UART_TX_ENABLED        (1) // Enable UART TX

#define        F_CPU           (1000000UL) // 1 MHz


#if defined(UART_TX_ENABLED) && !defined(UART_TX)
# define        UART_TX         PB0 // Use PB3 as TX pin
#endif  /* !UART_TX */

#if defined(UART_RX_ENABLED) && !defined(UART_RX)
# define        UART_RX         PB1 // Use PB4 as RX pin
#endif  /* !UART_RX */

#if (defined(UART_TX_ENABLED) || defined(UART_RX_ENABLED)) && !defined(UART_BAUDRATE)
# define        UART_BAUDRATE   (9600)
#endif  /* !UART_BAUDRATE */

#define    TXDELAY             (int)(((F_CPU/UART_BAUDRATE)-7 +1.5)/3)
#define RXDELAY             (int)(((F_CPU/UART_BAUDRATE)-5 +1.5)/3)
#define RXDELAY2            (int)((RXDELAY*1.5)-2.5)
#define RXROUNDED           (((F_CPU/UART_BAUDRATE)-5 +2)/3)
#if RXROUNDED > 127
# error Low baud rates unsupported - use higher UART_BAUDRATE
#endif

static char uart_getc();
static void uart_putc(char c);
static void uart_puts(const char *s);

#define DS18B20_PORT PORTC
#define DS18B20_DDR DDRC
#define DS18B20_PIN PINC
#define DS18B20_DQ PC0



unsigned char Temp_H, Temp_L, OK_Flag, temp_flag;
unsigned int buffer;

// Инициализация DS18B20
unsigned char DS18B20_init(void)
{
	DDRC |= (1 << PC0); // PC0 - выход
	PORTC &= ~(1 << PC0); // Устанавливаем низкий уровень
	_delay_us(490);
	DDRC &= ~(1 << PC0); // PC0 - вход
	_delay_us(68);
	OK_Flag = (PINC & (1 << PC0)); // Ловим импульс присутствия датчика
	// если OK_Flag = 0 датчик подключен, OK_Flag = 1 датчик не подключен
	_delay_us(422);
	return OK_Flag;
}



// Функция чтения байта из DS18B20
unsigned char read_18b20(void)
{
	unsigned char i, data = 0;
	for(i = 0; i < 8; i++)
	{
		DDRC |= (1 << PC0); // PC0 - выход
		_delay_us(2);
		DDRC &= ~(1 << PC0); // PC0 - вход
		_delay_us(4);
		data = data >> 1; // Следующий бит
		if(PINC & (1 << PC0)) data |= 0x80;
		_delay_us(62);
	}
	return data;
}

// Функция записи байта в DS18B20
void write_18b20(unsigned char data)
{
	unsigned char i;
	for(i = 0; i < 8; i++)
	{
		DDRC |= (1 << PC0); // PC0 - выход
		_delay_us(2);
		if(data & 0x01) DDRC &= ~(1 << PC0);
		else DDRC |= (1 << PC0);
		data = data >> 1; // Следующий бит
		_delay_us(62);
		DDRC &= ~(1 << PC0); // PC0 - вход
		_delay_us(2);
	}
}                       // разрешаем прерывания

int main(void)
{	
    unsigned int buffer;
    unsigned int temp_point; // Переменная для дробного значения температуры
    uart_puts("TRANSMIT\n");
		while(1){
			
			DS18B20_init();        // Инициализация DS18B20
			write_18b20(0xCC);     // Проверка кода датчика
			write_18b20(0x44);     // Запуск температурного преобразования
			_delay_ms(250);
			DS18B20_init();        // Инициализация DS18B20
			write_18b20(0xCC);     // Проверка кода датчика
			write_18b20(0xBE);     // Считываем содержимое ОЗУ
			Temp_L = read_18b20(); // Читаем первые 2 байта блокнота
			Temp_H = read_18b20();
			buffer = ((Temp_H << 4) & 0x70)|(Temp_L >> 4);
			_delay_ms(250);
			uart_putc((buffer % 1000/100)+48);
			uart_putc((buffer % 100/10)+48);
			uart_putc((buffer % 10)+48);
			uart_putc('\r');
		}
	
}

char
uart_getc(void)
{
	#ifdef    UART_RX_ENABLED
	char c;
	uint8_t sreg;

	sreg = SREG;
	cli();
	PORTB &= ~(1 << UART_RX);
	DDRB &= ~(1 << UART_RX);
	__asm volatile(
	" ldi r18, %[rxdelay2] \n\t" // 1.5 bit delay
	" ldi %0, 0x80 \n\t" // bit shift counter
	"WaitStart: \n\t"
	" sbic %[uart_port]-2, %[uart_pin] \n\t" // wait for start edge
	" rjmp WaitStart \n\t"
	"RxBit: \n\t"
	// 6 cycle loop + delay - total = 5 + 3*r22
	// delay (3 cycle * r18) -1 and clear carry with subi
	" subi r18, 1 \n\t"
	" brne RxBit \n\t"
	" ldi r18, %[rxdelay] \n\t"
	" sbic %[uart_port]-2, %[uart_pin] \n\t" // check UART PIN
	" sec \n\t"
	" ror %0 \n\t"
	" brcc RxBit \n\t"
	"StopBit: \n\t"
	" dec r18 \n\t"
	" brne StopBit \n\t"
	: "=r" (c)
	: [uart_port] "I" (_SFR_IO_ADDR(PORTB)),
	[uart_pin] "I" (UART_RX),
	[rxdelay] "I" (RXDELAY),
	[rxdelay2] "I" (RXDELAY2)
	: "r0","r18","r19"
	);
	SREG = sreg;
	return c;
	#else
	return (-1);
	#endif /* !UART_RX_ENABLED */
}

void
uart_putc(char c)
{
	#ifdef    UART_TX_ENABLED
	uint8_t sreg;

	sreg = SREG;
	cli();
	PORTB |= 1 << UART_TX;
	DDRB |= 1 << UART_TX;
	asm volatile(
	" cbi %[uart_port], %[uart_pin] \n\t" // start bit
	" in r0, %[uart_port] \n\t"
	" ldi r30, 3 \n\t" // stop bit + idle state
	" ldi r28, %[txdelay] \n\t"
	"TxLoop: \n\t"
	// 8 cycle loop + delay - total = 7 + 3*r22
	" mov r29, r28 \n\t"
	"TxDelay: \n\t"
	// delay (3 cycle * delayCount) - 1
	" dec r29 \n\t"
	" brne TxDelay \n\t"
	" bst %[ch], 0 \n\t"
	" bld r0, %[uart_pin] \n\t"
	" lsr r30 \n\t"
	" ror %[ch] \n\t"
	" out %[uart_port], r0 \n\t"
	" brne TxLoop \n\t"
	:
	: [uart_port] "I" (_SFR_IO_ADDR(PORTB)),
	[uart_pin] "I" (UART_TX),
	[txdelay] "I" (TXDELAY),
	[ch] "r" (c)
	: "r0","r28","r29","r30"
	);
	SREG = sreg;
	#endif /* !UART_TX_ENABLED */
}

void
uart_puts(const char *s)
{
	while (*s) uart_putc(*(s++));
}
